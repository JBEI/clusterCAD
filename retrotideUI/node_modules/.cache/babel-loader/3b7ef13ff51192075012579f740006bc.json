{"ast":null,"code":"// WHEN REPLACING, CHECK FOR:\n// KEEP THIS WHEN REGENERATING THE PARSER !!\nmodule.exports = function () {\n  \"use strict\";\n  /*\n   * Generated by PEG.js 0.10.0.\n   *\n   * http://pegjs.org/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function peg$SyntaxError(message, expected, found, location) {\n    this.message = message;\n    this.expected = expected;\n    this.found = found;\n    this.location = location;\n    this.name = \"SyntaxError\";\n\n    if (typeof Error.captureStackTrace === \"function\") {\n      Error.captureStackTrace(this, peg$SyntaxError);\n    }\n  }\n\n  peg$subclass(peg$SyntaxError, Error);\n\n  peg$SyntaxError.buildMessage = function (expected, found) {\n    var DESCRIBE_EXPECTATION_FNS = {\n      literal: function (expectation) {\n        return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n      },\n      \"class\": function (expectation) {\n        var escapedParts = \"\",\n            i;\n\n        for (i = 0; i < expectation.parts.length; i++) {\n          escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);\n        }\n\n        return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n      },\n      any: function (expectation) {\n        return \"any character\";\n      },\n      end: function (expectation) {\n        return \"end of input\";\n      },\n      other: function (expectation) {\n        return expectation.description;\n      }\n    };\n\n    function hex(ch) {\n      return ch.charCodeAt(0).toString(16).toUpperCase();\n    }\n\n    function literalEscape(s) {\n      return s.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\0/g, '\\\\0').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x0F]/g, function (ch) {\n        return '\\\\x0' + hex(ch);\n      }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n        return '\\\\x' + hex(ch);\n      });\n    }\n\n    function classEscape(s) {\n      return s.replace(/\\\\/g, '\\\\\\\\').replace(/\\]/g, '\\\\]').replace(/\\^/g, '\\\\^').replace(/-/g, '\\\\-').replace(/\\0/g, '\\\\0').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x0F]/g, function (ch) {\n        return '\\\\x0' + hex(ch);\n      }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n        return '\\\\x' + hex(ch);\n      });\n    }\n\n    function describeExpectation(expectation) {\n      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n    }\n\n    function describeExpected(expected) {\n      var descriptions = new Array(expected.length),\n          i,\n          j;\n\n      for (i = 0; i < expected.length; i++) {\n        descriptions[i] = describeExpectation(expected[i]);\n      }\n\n      descriptions.sort();\n\n      if (descriptions.length > 0) {\n        for (i = 1, j = 1; i < descriptions.length; i++) {\n          if (descriptions[i - 1] !== descriptions[i]) {\n            descriptions[j] = descriptions[i];\n            j++;\n          }\n        }\n\n        descriptions.length = j;\n      }\n\n      switch (descriptions.length) {\n        case 1:\n          return descriptions[0];\n\n        case 2:\n          return descriptions[0] + \" or \" + descriptions[1];\n\n        default:\n          return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n      }\n    }\n\n    function describeFound(found) {\n      return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n    }\n\n    return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n  };\n\n  function peg$parse(input, options) {\n    options = options !== void 0 ? options : {}; // KEEP THIS WHEN REGENERATING THE PARSER !!\n\n    var nOpenParentheses = input.split('(').length - 1;\n    var nCloseParentheses = input.split(')').length - 1;\n\n    if (nOpenParentheses !== nCloseParentheses) {\n      throw peg$buildSimpleError('The number of opening parentheses does not match the number of closing parentheses.', 0);\n    } // KEEP THIS WHEN REGENERATING THE PARSER !!\n\n\n    var peg$FAILED = {},\n        peg$startRuleFunctions = {\n      chain: peg$parsechain\n    },\n        peg$startRuleFunction = peg$parsechain,\n        peg$c0 = function (s) {\n      var branches = [];\n      var rings = [];\n\n      for (var i = 0; i < s[1].length; i++) {\n        branches.push(s[1][i]);\n      }\n\n      for (var i = 0; i < s[2].length; i++) {\n        var bond = s[2][i][0] ? s[2][i][0] : '-';\n        rings.push({\n          'bond': bond,\n          'id': s[2][i][1]\n        });\n      }\n\n      for (var i = 0; i < s[3].length; i++) {\n        branches.push(s[3][i]);\n      }\n\n      for (var i = 0; i < s[6].length; i++) {\n        branches.push(s[6][i]);\n      }\n\n      return {\n        'atom': s[0],\n        'isBracket': s[0].element ? true : false,\n        'branches': branches,\n        'branchCount': branches.length,\n        'ringbonds': rings,\n        'ringbondCount': rings.length,\n        'bond': s[4] ? s[4] : '-',\n        'next': s[5],\n        'hasNext': s[5] ? true : false\n      };\n      return s;\n    },\n        peg$c1 = \"(\",\n        peg$c2 = peg$literalExpectation(\"(\", false),\n        peg$c3 = \")\",\n        peg$c4 = peg$literalExpectation(\")\", false),\n        peg$c5 = function (b) {\n      var bond = b[1] ? b[1] : '-';\n      b[2].branchBond = bond;\n      return b[2];\n    },\n        peg$c6 = function (a) {\n      return a;\n    },\n        peg$c7 = /^[\\-=#$:\\/\\\\.]/,\n        peg$c8 = peg$classExpectation([\"-\", \"=\", \"#\", \"$\", \":\", \"/\", \"\\\\\", \".\"], false, false),\n        peg$c9 = function (b) {\n      return b;\n    },\n        peg$c10 = \"[\",\n        peg$c11 = peg$literalExpectation(\"[\", false),\n        peg$c12 = \"se\",\n        peg$c13 = peg$literalExpectation(\"se\", false),\n        peg$c14 = \"as\",\n        peg$c15 = peg$literalExpectation(\"as\", false),\n        peg$c16 = \"]\",\n        peg$c17 = peg$literalExpectation(\"]\", false),\n        peg$c18 = function (b) {\n      return {\n        'isotope': b[1],\n        'element': b[2],\n        'chirality': b[3],\n        'hcount': b[4],\n        'charge': b[5],\n        'class': b[6]\n      };\n    },\n        peg$c19 = \"B\",\n        peg$c20 = peg$literalExpectation(\"B\", false),\n        peg$c21 = \"r\",\n        peg$c22 = peg$literalExpectation(\"r\", false),\n        peg$c23 = \"C\",\n        peg$c24 = peg$literalExpectation(\"C\", false),\n        peg$c25 = \"l\",\n        peg$c26 = peg$literalExpectation(\"l\", false),\n        peg$c27 = /^[NOPSFI]/,\n        peg$c28 = peg$classExpectation([\"N\", \"O\", \"P\", \"S\", \"F\", \"I\"], false, false),\n        peg$c29 = function (o) {\n      if (o.length > 1) return o.join('');\n      return o;\n    },\n        peg$c30 = /^[bcnops]/,\n        peg$c31 = peg$classExpectation([\"b\", \"c\", \"n\", \"o\", \"p\", \"s\"], false, false),\n        peg$c32 = \"*\",\n        peg$c33 = peg$literalExpectation(\"*\", false),\n        peg$c34 = function (w) {\n      return w;\n    },\n        peg$c35 = /^[A-Z]/,\n        peg$c36 = peg$classExpectation([[\"A\", \"Z\"]], false, false),\n        peg$c37 = /^[a-z]/,\n        peg$c38 = peg$classExpectation([[\"a\", \"z\"]], false, false),\n        peg$c39 = function (e) {\n      return e.join('');\n    },\n        peg$c40 = \"%\",\n        peg$c41 = peg$literalExpectation(\"%\", false),\n        peg$c42 = /^[1-9]/,\n        peg$c43 = peg$classExpectation([[\"1\", \"9\"]], false, false),\n        peg$c44 = /^[0-9]/,\n        peg$c45 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n        peg$c46 = function (r) {\n      if (r.length == 1) return Number(r);\n      return Number(r.join('').replace('%', ''));\n    },\n        peg$c47 = \"@\",\n        peg$c48 = peg$literalExpectation(\"@\", false),\n        peg$c49 = \"TH\",\n        peg$c50 = peg$literalExpectation(\"TH\", false),\n        peg$c51 = /^[12]/,\n        peg$c52 = peg$classExpectation([\"1\", \"2\"], false, false),\n        peg$c53 = \"AL\",\n        peg$c54 = peg$literalExpectation(\"AL\", false),\n        peg$c55 = \"SP\",\n        peg$c56 = peg$literalExpectation(\"SP\", false),\n        peg$c57 = /^[1-3]/,\n        peg$c58 = peg$classExpectation([[\"1\", \"3\"]], false, false),\n        peg$c59 = \"TB\",\n        peg$c60 = peg$literalExpectation(\"TB\", false),\n        peg$c61 = \"OH\",\n        peg$c62 = peg$literalExpectation(\"OH\", false),\n        peg$c63 = function (c) {\n      if (!c[1]) return '@';\n      if (c[1] == '@') return '@@';\n      return c[1].join('').replace(',', '');\n    },\n        peg$c64 = function (c) {\n      return c;\n    },\n        peg$c65 = \"+\",\n        peg$c66 = peg$literalExpectation(\"+\", false),\n        peg$c67 = function (c) {\n      if (!c[1]) return 1;\n      if (c[1] != '+') return Number(c[1].join(''));\n      return 2;\n    },\n        peg$c68 = \"-\",\n        peg$c69 = peg$literalExpectation(\"-\", false),\n        peg$c70 = function (c) {\n      if (!c[1]) return -1;\n      if (c[1] != '-') return -Number(c[1].join(''));\n      return -2;\n    },\n        peg$c71 = \"H\",\n        peg$c72 = peg$literalExpectation(\"H\", false),\n        peg$c73 = function (h) {\n      if (h[1]) return Number(h[1]);\n      return 1;\n    },\n        peg$c74 = \":\",\n        peg$c75 = peg$literalExpectation(\":\", false),\n        peg$c76 = /^[0]/,\n        peg$c77 = peg$classExpectation([\"0\"], false, false),\n        peg$c78 = function (c) {\n      return Number(c[1][0] + c[1][1].join(''));\n    },\n        peg$c79 = function (i) {\n      return Number(i.join(''));\n    },\n        peg$currPos = 0,\n        peg$savedPos = 0,\n        peg$posDetailsCache = [{\n      line: 1,\n      column: 1\n    }],\n        peg$maxFailPos = 0,\n        peg$maxFailExpected = [],\n        peg$silentFails = 0,\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function location() {\n      return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description, location) {\n      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);\n      throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);\n    }\n\n    function error(message, location) {\n      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);\n      throw peg$buildSimpleError(message, location);\n    }\n\n    function peg$literalExpectation(text, ignoreCase) {\n      return {\n        type: \"literal\",\n        text: text,\n        ignoreCase: ignoreCase\n      };\n    }\n\n    function peg$classExpectation(parts, inverted, ignoreCase) {\n      return {\n        type: \"class\",\n        parts: parts,\n        inverted: inverted,\n        ignoreCase: ignoreCase\n      };\n    }\n\n    function peg$anyExpectation() {\n      return {\n        type: \"any\"\n      };\n    }\n\n    function peg$endExpectation() {\n      return {\n        type: \"end\"\n      };\n    }\n\n    function peg$otherExpectation(description) {\n      return {\n        type: \"other\",\n        description: description\n      };\n    }\n\n    function peg$computePosDetails(pos) {\n      var details = peg$posDetailsCache[pos],\n          p;\n\n      if (details) {\n        return details;\n      } else {\n        p = pos - 1;\n\n        while (!peg$posDetailsCache[p]) {\n          p--;\n        }\n\n        details = peg$posDetailsCache[p];\n        details = {\n          line: details.line,\n          column: details.column\n        };\n\n        while (p < pos) {\n          if (input.charCodeAt(p) === 10) {\n            details.line++;\n            details.column = 1;\n          } else {\n            details.column++;\n          }\n\n          p++;\n        }\n\n        peg$posDetailsCache[pos] = details;\n        return details;\n      }\n    }\n\n    function peg$computeLocation(startPos, endPos) {\n      var startPosDetails = peg$computePosDetails(startPos),\n          endPosDetails = peg$computePosDetails(endPos);\n      return {\n        start: {\n          offset: startPos,\n          line: startPosDetails.line,\n          column: startPosDetails.column\n        },\n        end: {\n          offset: endPos,\n          line: endPosDetails.line,\n          column: endPosDetails.column\n        }\n      };\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) {\n        return;\n      }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildSimpleError(message, location) {\n      return new peg$SyntaxError(message, null, null, location);\n    }\n\n    function peg$buildStructuredError(expected, found, location) {\n      return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);\n    }\n\n    function peg$parsechain() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseatom();\n\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsebranch();\n\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsebranch();\n        }\n\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parsebond();\n\n          if (s6 === peg$FAILED) {\n            s6 = null;\n          }\n\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsering();\n\n            if (s7 !== peg$FAILED) {\n              s6 = [s6, s7];\n              s5 = s6;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parsebond();\n\n            if (s6 === peg$FAILED) {\n              s6 = null;\n            }\n\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsering();\n\n              if (s7 !== peg$FAILED) {\n                s6 = [s6, s7];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsebranch();\n\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsebranch();\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsebond();\n\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsechain();\n\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n\n                if (s7 !== peg$FAILED) {\n                  s8 = [];\n                  s9 = peg$parsebranch();\n\n                  while (s9 !== peg$FAILED) {\n                    s8.push(s9);\n                    s9 = peg$parsebranch();\n                  }\n\n                  if (s8 !== peg$FAILED) {\n                    s2 = [s2, s3, s4, s5, s6, s7, s8];\n                    s1 = s2;\n                  } else {\n                    peg$currPos = s1;\n                    s1 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s1;\n                  s1 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    function peg$parsebranch() {\n      var s0, s1, s2, s3, s4, s5;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c1;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c2);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsebond();\n\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsechain();\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 41) {\n              s5 = peg$c3;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c4);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s2 = [s2, s3, s4, s5];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c5(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    function peg$parseatom() {\n      var s0, s1;\n      s0 = peg$currPos;\n      s1 = peg$parseorganicsymbol();\n\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsearomaticsymbol();\n\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsebracketatom();\n\n          if (s1 === peg$FAILED) {\n            s1 = peg$parsewildcard();\n          }\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    function peg$parsebond() {\n      var s0, s1;\n      s0 = peg$currPos;\n\n      if (peg$c7.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos); // Hack to resolve problem caused by:\n        // O=C(N[C@@H](CC(O)=O)C(N[C@H](C1=CC=C(O)C=C1)C(N[C@@H](CC(O)=O)C(NCC(N[C@@H](C(N[C@@H]([C@H](C)CC(O)=O)C(N/C(C(O[C@H](C)[C@@H]2NC([C@H](CO)NC(C(O3)C3CCC)=O)=O)=O)=C\\\\\\\\C4=CNC5=C4C=CC=C5)=O)=O)[C@H](O)C(N)=O)=O)=O)=O)=O)[C@H](CC(O)=O)NC([C@@H](CC6=CNC7=C6C=CC=C7)NC2=O)=O\n        // KEEP THIS WHEN REGENERATING THE PARSER !!\n\n        if (s1 === input.charAt(peg$currPos + 1)) {\n          s1 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            throw peg$buildSimpleError('The parser encountered a bond repetition.', peg$currPos + 1);\n          }\n        } // KEEP THIS WHEN REGENERATING THE PARSER !!\n\n\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c8);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c9(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    function peg$parsebracketatom() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s2 = peg$c10;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c11);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseisotope();\n\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n\n        if (s3 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c12) {\n            s4 = peg$c12;\n            peg$currPos += 2;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c13);\n            }\n          }\n\n          if (s4 === peg$FAILED) {\n            if (input.substr(peg$currPos, 2) === peg$c14) {\n              s4 = peg$c14;\n              peg$currPos += 2;\n            } else {\n              s4 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c15);\n              }\n            }\n\n            if (s4 === peg$FAILED) {\n              s4 = peg$parsearomaticsymbol();\n\n              if (s4 === peg$FAILED) {\n                s4 = peg$parseelementsymbol();\n\n                if (s4 === peg$FAILED) {\n                  s4 = peg$parsewildcard();\n                }\n              }\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsechiral();\n\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsehcount();\n\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecharge();\n\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseclass();\n\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 93) {\n                      s9 = peg$c16;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c17);\n                      }\n                    }\n\n                    if (s9 !== peg$FAILED) {\n                      s2 = [s2, s3, s4, s5, s6, s7, s8, s9];\n                      s1 = s2;\n                    } else {\n                      peg$currPos = s1;\n                      s1 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s1;\n                    s1 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s1;\n                  s1 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c18(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    function peg$parseorganicsymbol() {\n      var s0, s1, s2, s3;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 66) {\n        s2 = peg$c19;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c20);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 114) {\n          s3 = peg$c21;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c22);\n          }\n        }\n\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n\n        if (input.charCodeAt(peg$currPos) === 67) {\n          s2 = peg$c23;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c24);\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 108) {\n            s3 = peg$c25;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c26);\n            }\n          }\n\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n\n          if (s3 !== peg$FAILED) {\n            s2 = [s2, s3];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n\n        if (s1 === peg$FAILED) {\n          if (peg$c27.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c28);\n            }\n          }\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c29(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    function peg$parsearomaticsymbol() {\n      var s0, s1;\n      s0 = peg$currPos;\n\n      if (peg$c30.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c31);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    function peg$parsewildcard() {\n      var s0, s1;\n      s0 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 42) {\n        s1 = peg$c32;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c33);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c34(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    function peg$parseelementsymbol() {\n      var s0, s1, s2, s3;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n\n      if (peg$c35.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c36);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        if (peg$c37.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c38);\n          }\n        }\n\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c39(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    function peg$parsering() {\n      var s0, s1, s2, s3, s4;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 37) {\n        s2 = peg$c40;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c41);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        if (peg$c42.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c43);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          if (peg$c44.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c45);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 === peg$FAILED) {\n        if (peg$c44.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c45);\n          }\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c46(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    function peg$parsechiral() {\n      var s0, s1, s2, s3, s4, s5, s6;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 64) {\n        s2 = peg$c47;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c48);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 64) {\n          s3 = peg$c47;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c48);\n          }\n        }\n\n        if (s3 === peg$FAILED) {\n          s3 = peg$currPos;\n\n          if (input.substr(peg$currPos, 2) === peg$c49) {\n            s4 = peg$c49;\n            peg$currPos += 2;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c50);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            if (peg$c51.test(input.charAt(peg$currPos))) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c52);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n\n          if (s3 === peg$FAILED) {\n            s3 = peg$currPos;\n\n            if (input.substr(peg$currPos, 2) === peg$c53) {\n              s4 = peg$c53;\n              peg$currPos += 2;\n            } else {\n              s4 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c54);\n              }\n            }\n\n            if (s4 !== peg$FAILED) {\n              if (peg$c51.test(input.charAt(peg$currPos))) {\n                s5 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c52);\n                }\n              }\n\n              if (s5 !== peg$FAILED) {\n                s4 = [s4, s5];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n\n            if (s3 === peg$FAILED) {\n              s3 = peg$currPos;\n\n              if (input.substr(peg$currPos, 2) === peg$c55) {\n                s4 = peg$c55;\n                peg$currPos += 2;\n              } else {\n                s4 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c56);\n                }\n              }\n\n              if (s4 !== peg$FAILED) {\n                if (peg$c57.test(input.charAt(peg$currPos))) {\n                  s5 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s5 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c58);\n                  }\n                }\n\n                if (s5 !== peg$FAILED) {\n                  s4 = [s4, s5];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n\n              if (s3 === peg$FAILED) {\n                s3 = peg$currPos;\n\n                if (input.substr(peg$currPos, 2) === peg$c59) {\n                  s4 = peg$c59;\n                  peg$currPos += 2;\n                } else {\n                  s4 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c60);\n                  }\n                }\n\n                if (s4 !== peg$FAILED) {\n                  if (peg$c42.test(input.charAt(peg$currPos))) {\n                    s5 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s5 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c43);\n                    }\n                  }\n\n                  if (s5 !== peg$FAILED) {\n                    if (peg$c44.test(input.charAt(peg$currPos))) {\n                      s6 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s6 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c45);\n                      }\n                    }\n\n                    if (s6 === peg$FAILED) {\n                      s6 = null;\n                    }\n\n                    if (s6 !== peg$FAILED) {\n                      s4 = [s4, s5, s6];\n                      s3 = s4;\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n\n                if (s3 === peg$FAILED) {\n                  s3 = peg$currPos;\n\n                  if (input.substr(peg$currPos, 2) === peg$c61) {\n                    s4 = peg$c61;\n                    peg$currPos += 2;\n                  } else {\n                    s4 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c62);\n                    }\n                  }\n\n                  if (s4 !== peg$FAILED) {\n                    if (peg$c42.test(input.charAt(peg$currPos))) {\n                      s5 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s5 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c43);\n                      }\n                    }\n\n                    if (s5 !== peg$FAILED) {\n                      if (peg$c44.test(input.charAt(peg$currPos))) {\n                        s6 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                      } else {\n                        s6 = peg$FAILED;\n\n                        if (peg$silentFails === 0) {\n                          peg$fail(peg$c45);\n                        }\n                      }\n\n                      if (s6 === peg$FAILED) {\n                        s6 = null;\n                      }\n\n                      if (s6 !== peg$FAILED) {\n                        s4 = [s4, s5, s6];\n                        s3 = s4;\n                      } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c63(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    function peg$parsecharge() {\n      var s0, s1;\n      s0 = peg$currPos;\n      s1 = peg$parseposcharge();\n\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsenegcharge();\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c64(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    function peg$parseposcharge() {\n      var s0, s1, s2, s3, s4, s5;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 43) {\n        s2 = peg$c65;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c66);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 43) {\n          s3 = peg$c65;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c66);\n          }\n        }\n\n        if (s3 === peg$FAILED) {\n          s3 = peg$currPos;\n\n          if (peg$c42.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c43);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            if (peg$c44.test(input.charAt(peg$currPos))) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c45);\n              }\n            }\n\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c67(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    function peg$parsenegcharge() {\n      var s0, s1, s2, s3, s4, s5;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s2 = peg$c68;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c69);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s3 = peg$c68;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c69);\n          }\n        }\n\n        if (s3 === peg$FAILED) {\n          s3 = peg$currPos;\n\n          if (peg$c42.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c43);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            if (peg$c44.test(input.charAt(peg$currPos))) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c45);\n              }\n            }\n\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c70(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    function peg$parsehcount() {\n      var s0, s1, s2, s3;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 72) {\n        s2 = peg$c71;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c72);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        if (peg$c44.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c45);\n          }\n        }\n\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c73(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    function peg$parseclass() {\n      var s0, s1, s2, s3, s4, s5, s6;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 58) {\n        s2 = peg$c74;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c75);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n\n        if (peg$c42.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c43);\n          }\n        }\n\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n\n          if (peg$c44.test(input.charAt(peg$currPos))) {\n            s6 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c45);\n            }\n          }\n\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n\n            if (peg$c44.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c45);\n              }\n            }\n          }\n\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n\n        if (s3 === peg$FAILED) {\n          if (peg$c76.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c77);\n            }\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c78(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    function peg$parseisotope() {\n      var s0, s1, s2, s3, s4;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n\n      if (peg$c42.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c43);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        if (peg$c44.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c45);\n          }\n        }\n\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n\n        if (s3 !== peg$FAILED) {\n          if (peg$c44.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c45);\n            }\n          }\n\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c79(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail(peg$endExpectation());\n      }\n\n      throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n    }\n  }\n\n  return {\n    SyntaxError: peg$SyntaxError,\n    parse: peg$parse\n  };\n}();","map":{"version":3,"sources":["/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/smiles-drawer/src/Parser.js"],"names":["module","exports","peg$subclass","child","parent","ctor","constructor","prototype","peg$SyntaxError","message","expected","found","location","name","Error","captureStackTrace","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","escapedParts","i","parts","length","Array","classEscape","inverted","any","end","other","description","hex","ch","charCodeAt","toString","toUpperCase","s","replace","describeExpectation","type","describeExpected","descriptions","j","sort","slice","join","describeFound","peg$parse","input","options","nOpenParentheses","split","nCloseParentheses","peg$buildSimpleError","peg$FAILED","peg$startRuleFunctions","chain","peg$parsechain","peg$startRuleFunction","peg$c0","branches","rings","push","bond","element","peg$c1","peg$c2","peg$literalExpectation","peg$c3","peg$c4","peg$c5","b","branchBond","peg$c6","a","peg$c7","peg$c8","peg$classExpectation","peg$c9","peg$c10","peg$c11","peg$c12","peg$c13","peg$c14","peg$c15","peg$c16","peg$c17","peg$c18","peg$c19","peg$c20","peg$c21","peg$c22","peg$c23","peg$c24","peg$c25","peg$c26","peg$c27","peg$c28","peg$c29","o","peg$c30","peg$c31","peg$c32","peg$c33","peg$c34","w","peg$c35","peg$c36","peg$c37","peg$c38","peg$c39","e","peg$c40","peg$c41","peg$c42","peg$c43","peg$c44","peg$c45","peg$c46","r","Number","peg$c47","peg$c48","peg$c49","peg$c50","peg$c51","peg$c52","peg$c53","peg$c54","peg$c55","peg$c56","peg$c57","peg$c58","peg$c59","peg$c60","peg$c61","peg$c62","peg$c63","c","peg$c64","peg$c65","peg$c66","peg$c67","peg$c68","peg$c69","peg$c70","peg$c71","peg$c72","peg$c73","h","peg$c74","peg$c75","peg$c76","peg$c77","peg$c78","peg$c79","peg$currPos","peg$savedPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","peg$result","startRule","substring","peg$computeLocation","peg$buildStructuredError","peg$otherExpectation","error","ignoreCase","peg$anyExpectation","peg$endExpectation","peg$computePosDetails","pos","details","p","startPos","endPos","startPosDetails","endPosDetails","start","offset","peg$fail","s0","s1","s2","s3","s4","s5","s6","s7","s8","s9","peg$parseatom","peg$parsebranch","peg$parsebond","peg$parsering","peg$parseorganicsymbol","peg$parsearomaticsymbol","peg$parsebracketatom","peg$parsewildcard","test","charAt","peg$parseisotope","substr","peg$parseelementsymbol","peg$parsechiral","peg$parsehcount","peg$parsecharge","peg$parseclass","peg$parseposcharge","peg$parsenegcharge","SyntaxError","parse"],"mappings":"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","sourcesContent":["// WHEN REPLACING, CHECK FOR:\n// KEEP THIS WHEN REGENERATING THE PARSER !!\n\nmodule.exports = (function () {\n  \"use strict\";\n\n  /*\n   * Generated by PEG.js 0.10.0.\n   *\n   * http://pegjs.org/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() {\n      this.constructor = child;\n    }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function peg$SyntaxError(message, expected, found, location) {\n    this.message = message;\n    this.expected = expected;\n    this.found = found;\n    this.location = location;\n    this.name = \"SyntaxError\";\n\n    if (typeof Error.captureStackTrace === \"function\") {\n      Error.captureStackTrace(this, peg$SyntaxError);\n    }\n  }\n\n  peg$subclass(peg$SyntaxError, Error);\n\n  peg$SyntaxError.buildMessage = function (expected, found) {\n    var DESCRIBE_EXPECTATION_FNS = {\n      literal: function (expectation) {\n        return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n      },\n\n      \"class\": function (expectation) {\n        var escapedParts = \"\",\n          i;\n\n        for (i = 0; i < expectation.parts.length; i++) {\n          escapedParts += expectation.parts[i] instanceof Array ?\n            classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1]) :\n            classEscape(expectation.parts[i]);\n        }\n\n        return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n      },\n\n      any: function (expectation) {\n        return \"any character\";\n      },\n\n      end: function (expectation) {\n        return \"end of input\";\n      },\n\n      other: function (expectation) {\n        return expectation.description;\n      }\n    };\n\n    function hex(ch) {\n      return ch.charCodeAt(0).toString(16).toUpperCase();\n    }\n\n    function literalEscape(s) {\n      return s\n        .replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\"/g, '\\\\\"')\n        .replace(/\\0/g, '\\\\0')\n        .replace(/\\t/g, '\\\\t')\n        .replace(/\\n/g, '\\\\n')\n        .replace(/\\r/g, '\\\\r')\n        .replace(/[\\x00-\\x0F]/g, function (ch) {\n          return '\\\\x0' + hex(ch);\n        })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n          return '\\\\x' + hex(ch);\n        });\n    }\n\n    function classEscape(s) {\n      return s\n        .replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\\]/g, '\\\\]')\n        .replace(/\\^/g, '\\\\^')\n        .replace(/-/g, '\\\\-')\n        .replace(/\\0/g, '\\\\0')\n        .replace(/\\t/g, '\\\\t')\n        .replace(/\\n/g, '\\\\n')\n        .replace(/\\r/g, '\\\\r')\n        .replace(/[\\x00-\\x0F]/g, function (ch) {\n          return '\\\\x0' + hex(ch);\n        })\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n          return '\\\\x' + hex(ch);\n        });\n    }\n\n    function describeExpectation(expectation) {\n      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n    }\n\n    function describeExpected(expected) {\n      var descriptions = new Array(expected.length),\n        i, j;\n\n      for (i = 0; i < expected.length; i++) {\n        descriptions[i] = describeExpectation(expected[i]);\n      }\n\n      descriptions.sort();\n\n      if (descriptions.length > 0) {\n        for (i = 1, j = 1; i < descriptions.length; i++) {\n          if (descriptions[i - 1] !== descriptions[i]) {\n            descriptions[j] = descriptions[i];\n            j++;\n          }\n        }\n        descriptions.length = j;\n      }\n\n      switch (descriptions.length) {\n        case 1:\n          return descriptions[0];\n\n        case 2:\n          return descriptions[0] + \" or \" + descriptions[1];\n\n        default:\n          return descriptions.slice(0, -1).join(\", \") +\n            \", or \" +\n            descriptions[descriptions.length - 1];\n      }\n    }\n\n    function describeFound(found) {\n      return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n    }\n\n    return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n  };\n\n  function peg$parse(input, options) {\n    options = options !== void 0 ? options : {};\n\n    // KEEP THIS WHEN REGENERATING THE PARSER !!\n    var nOpenParentheses = input.split('(').length - 1;\n    var nCloseParentheses = input.split(')').length - 1;\n\n    if (nOpenParentheses !== nCloseParentheses) {\n      throw peg$buildSimpleError('The number of opening parentheses does not match the number of closing parentheses.', 0);\n    }\n    // KEEP THIS WHEN REGENERATING THE PARSER !!\n\n    var peg$FAILED = {},\n\n      peg$startRuleFunctions = {\n        chain: peg$parsechain\n      },\n      peg$startRuleFunction = peg$parsechain,\n\n      peg$c0 = function (s) {\n        var branches = [];\n        var rings = [];\n\n        for (var i = 0; i < s[1].length; i++) {\n          branches.push(s[1][i]);\n        }\n\n\n        for (var i = 0; i < s[2].length; i++) {\n          var bond = (s[2][i][0]) ? s[2][i][0] : '-';\n          rings.push({\n            'bond': bond,\n            'id': s[2][i][1]\n          });\n        }\n\n        for (var i = 0; i < s[3].length; i++) {\n          branches.push(s[3][i]);\n        }\n\n        for (var i = 0; i < s[6].length; i++) {\n          branches.push(s[6][i]);\n        }\n\n        return {\n          'atom': s[0],\n          'isBracket': s[0].element ? true : false,\n          'branches': branches,\n          'branchCount': branches.length,\n          'ringbonds': rings,\n          'ringbondCount': rings.length,\n          'bond': s[4] ? s[4] : '-',\n          'next': s[5],\n          'hasNext': s[5] ? true : false\n        }\n\n        return s;\n      },\n      peg$c1 = \"(\",\n      peg$c2 = peg$literalExpectation(\"(\", false),\n      peg$c3 = \")\",\n      peg$c4 = peg$literalExpectation(\")\", false),\n      peg$c5 = function (b) {\n        var bond = (b[1]) ? b[1] : '-';\n        b[2].branchBond = bond;\n        return b[2]\n      },\n      peg$c6 = function (a) {\n        return a;\n      },\n      peg$c7 = /^[\\-=#$:\\/\\\\.]/,\n      peg$c8 = peg$classExpectation([\"-\", \"=\", \"#\", \"$\", \":\", \"/\", \"\\\\\", \".\"], false, false),\n      peg$c9 = function (b) {\n        return b;\n      },\n      peg$c10 = \"[\",\n      peg$c11 = peg$literalExpectation(\"[\", false),\n      peg$c12 = \"se\",\n      peg$c13 = peg$literalExpectation(\"se\", false),\n      peg$c14 = \"as\",\n      peg$c15 = peg$literalExpectation(\"as\", false),\n      peg$c16 = \"]\",\n      peg$c17 = peg$literalExpectation(\"]\", false),\n      peg$c18 = function (b) {\n        return {\n          'isotope': b[1],\n          'element': b[2],\n          'chirality': b[3],\n          'hcount': b[4],\n          'charge': b[5],\n          'class': b[6]\n        }\n      },\n      peg$c19 = \"B\",\n      peg$c20 = peg$literalExpectation(\"B\", false),\n      peg$c21 = \"r\",\n      peg$c22 = peg$literalExpectation(\"r\", false),\n      peg$c23 = \"C\",\n      peg$c24 = peg$literalExpectation(\"C\", false),\n      peg$c25 = \"l\",\n      peg$c26 = peg$literalExpectation(\"l\", false),\n      peg$c27 = /^[NOPSFI]/,\n      peg$c28 = peg$classExpectation([\"N\", \"O\", \"P\", \"S\", \"F\", \"I\"], false, false),\n      peg$c29 = function (o) {\n        if (o.length > 1) return o.join('');\n        return o;\n      },\n      peg$c30 = /^[bcnops]/,\n      peg$c31 = peg$classExpectation([\"b\", \"c\", \"n\", \"o\", \"p\", \"s\"], false, false),\n      peg$c32 = \"*\",\n      peg$c33 = peg$literalExpectation(\"*\", false),\n      peg$c34 = function (w) {\n        return w;\n      },\n      peg$c35 = /^[A-Z]/,\n      peg$c36 = peg$classExpectation([\n        [\"A\", \"Z\"]\n      ], false, false),\n      peg$c37 = /^[a-z]/,\n      peg$c38 = peg$classExpectation([\n        [\"a\", \"z\"]\n      ], false, false),\n      peg$c39 = function (e) {\n        return e.join('');\n      },\n      peg$c40 = \"%\",\n      peg$c41 = peg$literalExpectation(\"%\", false),\n      peg$c42 = /^[1-9]/,\n      peg$c43 = peg$classExpectation([\n        [\"1\", \"9\"]\n      ], false, false),\n      peg$c44 = /^[0-9]/,\n      peg$c45 = peg$classExpectation([\n        [\"0\", \"9\"]\n      ], false, false),\n      peg$c46 = function (r) {\n        if (r.length == 1) return Number(r);\n        return Number(r.join('').replace('%', ''));\n      },\n      peg$c47 = \"@\",\n      peg$c48 = peg$literalExpectation(\"@\", false),\n      peg$c49 = \"TH\",\n      peg$c50 = peg$literalExpectation(\"TH\", false),\n      peg$c51 = /^[12]/,\n      peg$c52 = peg$classExpectation([\"1\", \"2\"], false, false),\n      peg$c53 = \"AL\",\n      peg$c54 = peg$literalExpectation(\"AL\", false),\n      peg$c55 = \"SP\",\n      peg$c56 = peg$literalExpectation(\"SP\", false),\n      peg$c57 = /^[1-3]/,\n      peg$c58 = peg$classExpectation([\n        [\"1\", \"3\"]\n      ], false, false),\n      peg$c59 = \"TB\",\n      peg$c60 = peg$literalExpectation(\"TB\", false),\n      peg$c61 = \"OH\",\n      peg$c62 = peg$literalExpectation(\"OH\", false),\n      peg$c63 = function (c) {\n        if (!c[1]) return '@';\n        if (c[1] == '@') return '@@';\n\n        return c[1].join('').replace(',', '');\n      },\n      peg$c64 = function (c) {\n        return c;\n      },\n      peg$c65 = \"+\",\n      peg$c66 = peg$literalExpectation(\"+\", false),\n      peg$c67 = function (c) {\n        if (!c[1]) return 1;\n        if (c[1] != '+') return Number(c[1].join(''));\n        return 2;\n      },\n      peg$c68 = \"-\",\n      peg$c69 = peg$literalExpectation(\"-\", false),\n      peg$c70 = function (c) {\n        if (!c[1]) return -1;\n        if (c[1] != '-') return -Number(c[1].join(''));\n        return -2;\n      },\n      peg$c71 = \"H\",\n      peg$c72 = peg$literalExpectation(\"H\", false),\n      peg$c73 = function (h) {\n        if (h[1]) return Number(h[1]);\n        return 1;\n      },\n      peg$c74 = \":\",\n      peg$c75 = peg$literalExpectation(\":\", false),\n      peg$c76 = /^[0]/,\n      peg$c77 = peg$classExpectation([\"0\"], false, false),\n      peg$c78 = function (c) {\n        return Number(c[1][0] + c[1][1].join(''));\n      },\n      peg$c79 = function (i) {\n        return Number(i.join(''));\n      },\n\n      peg$currPos = 0,\n      peg$savedPos = 0,\n      peg$posDetailsCache = [{\n        line: 1,\n        column: 1\n      }],\n      peg$maxFailPos = 0,\n      peg$maxFailExpected = [],\n      peg$silentFails = 0,\n\n      peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function location() {\n      return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description, location) {\n      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n      throw peg$buildStructuredError(\n        [peg$otherExpectation(description)],\n        input.substring(peg$savedPos, peg$currPos),\n        location\n      );\n    }\n\n    function error(message, location) {\n      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n      throw peg$buildSimpleError(message, location);\n    }\n\n    function peg$literalExpectation(text, ignoreCase) {\n      return {\n        type: \"literal\",\n        text: text,\n        ignoreCase: ignoreCase\n      };\n    }\n\n    function peg$classExpectation(parts, inverted, ignoreCase) {\n      return {\n        type: \"class\",\n        parts: parts,\n        inverted: inverted,\n        ignoreCase: ignoreCase\n      };\n    }\n\n    function peg$anyExpectation() {\n      return {\n        type: \"any\"\n      };\n    }\n\n    function peg$endExpectation() {\n      return {\n        type: \"end\"\n      };\n    }\n\n    function peg$otherExpectation(description) {\n      return {\n        type: \"other\",\n        description: description\n      };\n    }\n\n    function peg$computePosDetails(pos) {\n      var details = peg$posDetailsCache[pos],\n        p;\n\n      if (details) {\n        return details;\n      } else {\n        p = pos - 1;\n        while (!peg$posDetailsCache[p]) {\n          p--;\n        }\n\n        details = peg$posDetailsCache[p];\n        details = {\n          line: details.line,\n          column: details.column\n        };\n\n        while (p < pos) {\n          if (input.charCodeAt(p) === 10) {\n            details.line++;\n            details.column = 1;\n          } else {\n            details.column++;\n          }\n\n          p++;\n        }\n\n        peg$posDetailsCache[pos] = details;\n        return details;\n      }\n    }\n\n    function peg$computeLocation(startPos, endPos) {\n      var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails = peg$computePosDetails(endPos);\n\n      return {\n        start: {\n          offset: startPos,\n          line: startPosDetails.line,\n          column: startPosDetails.column\n        },\n        end: {\n          offset: endPos,\n          line: endPosDetails.line,\n          column: endPosDetails.column\n        }\n      };\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) {\n        return;\n      }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildSimpleError(message, location) {\n      return new peg$SyntaxError(message, null, null, location);\n    }\n\n    function peg$buildStructuredError(expected, found, location) {\n      return new peg$SyntaxError(\n        peg$SyntaxError.buildMessage(expected, found),\n        expected,\n        found,\n        location\n      );\n    }\n\n    function peg$parsechain() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseatom();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsebranch();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsebranch();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parsebond();\n          if (s6 === peg$FAILED) {\n            s6 = null;\n          }\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsering();\n            if (s7 !== peg$FAILED) {\n              s6 = [s6, s7];\n              s5 = s6;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parsebond();\n            if (s6 === peg$FAILED) {\n              s6 = null;\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsering();\n              if (s7 !== peg$FAILED) {\n                s6 = [s6, s7];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsebranch();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsebranch();\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsebond();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsechain();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = [];\n                  s9 = peg$parsebranch();\n                  while (s9 !== peg$FAILED) {\n                    s8.push(s9);\n                    s9 = peg$parsebranch();\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s2 = [s2, s3, s4, s5, s6, s7, s8];\n                    s1 = s2;\n                  } else {\n                    peg$currPos = s1;\n                    s1 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s1;\n                  s1 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsebranch() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c1;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c2);\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsebond();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsechain();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 41) {\n              s5 = peg$c3;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c4);\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              s2 = [s2, s3, s4, s5];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c5(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseatom() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      s1 = peg$parseorganicsymbol();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsearomaticsymbol();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsebracketatom();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parsewildcard();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsebond() {\n      var s0, s1;\n      s0 = peg$currPos;\n      if (peg$c7.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n\n        // Hack to resolve problem caused by:\n        // O=C(N[C@@H](CC(O)=O)C(N[C@H](C1=CC=C(O)C=C1)C(N[C@@H](CC(O)=O)C(NCC(N[C@@H](C(N[C@@H]([C@H](C)CC(O)=O)C(N/C(C(O[C@H](C)[C@@H]2NC([C@H](CO)NC(C(O3)C3CCC)=O)=O)=O)=C\\\\\\\\C4=CNC5=C4C=CC=C5)=O)=O)[C@H](O)C(N)=O)=O)=O)=O)=O)[C@H](CC(O)=O)NC([C@@H](CC6=CNC7=C6C=CC=C7)NC2=O)=O\n        // KEEP THIS WHEN REGENERATING THE PARSER !!\n        if (s1 === input.charAt(peg$currPos + 1)) {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            throw peg$buildSimpleError('The parser encountered a bond repetition.', peg$currPos + 1);\n          }\n        }\n        // KEEP THIS WHEN REGENERATING THE PARSER !!\n\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c8);\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c9(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsebracketatom() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s2 = peg$c10;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c11);\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseisotope();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c12) {\n            s4 = peg$c12;\n            peg$currPos += 2;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c13);\n            }\n          }\n          if (s4 === peg$FAILED) {\n            if (input.substr(peg$currPos, 2) === peg$c14) {\n              s4 = peg$c14;\n              peg$currPos += 2;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c15);\n              }\n            }\n            if (s4 === peg$FAILED) {\n              s4 = peg$parsearomaticsymbol();\n              if (s4 === peg$FAILED) {\n                s4 = peg$parseelementsymbol();\n                if (s4 === peg$FAILED) {\n                  s4 = peg$parsewildcard();\n                }\n              }\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsechiral();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsehcount();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecharge();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseclass();\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 93) {\n                      s9 = peg$c16;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c17);\n                      }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s2 = [s2, s3, s4, s5, s6, s7, s8, s9];\n                      s1 = s2;\n                    } else {\n                      peg$currPos = s1;\n                      s1 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s1;\n                    s1 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s1;\n                  s1 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c18(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseorganicsymbol() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 66) {\n        s2 = peg$c19;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c20);\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 114) {\n          s3 = peg$c21;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c22);\n          }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 67) {\n          s2 = peg$c23;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c24);\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 108) {\n            s3 = peg$c25;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c26);\n            }\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s2 = [s2, s3];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          if (peg$c27.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c28);\n            }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c29(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsearomaticsymbol() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (peg$c30.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c31);\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsewildcard() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 42) {\n        s1 = peg$c32;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c33);\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c34(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseelementsymbol() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (peg$c35.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c36);\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (peg$c37.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c38);\n          }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c39(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsering() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 37) {\n        s2 = peg$c40;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c41);\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (peg$c42.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c43);\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          if (peg$c44.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c45);\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        if (peg$c44.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c45);\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c46(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsechiral() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 64) {\n        s2 = peg$c47;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c48);\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 64) {\n          s3 = peg$c47;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c48);\n          }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c49) {\n            s4 = peg$c49;\n            peg$currPos += 2;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c50);\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            if (peg$c51.test(input.charAt(peg$currPos))) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c52);\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c53) {\n              s4 = peg$c53;\n              peg$currPos += 2;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c54);\n              }\n            }\n            if (s4 !== peg$FAILED) {\n              if (peg$c51.test(input.charAt(peg$currPos))) {\n                s5 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c52);\n                }\n              }\n              if (s5 !== peg$FAILED) {\n                s4 = [s4, s5];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 === peg$FAILED) {\n              s3 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c55) {\n                s4 = peg$c55;\n                peg$currPos += 2;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c56);\n                }\n              }\n              if (s4 !== peg$FAILED) {\n                if (peg$c57.test(input.charAt(peg$currPos))) {\n                  s5 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c58);\n                  }\n                }\n                if (s5 !== peg$FAILED) {\n                  s4 = [s4, s5];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n              if (s3 === peg$FAILED) {\n                s3 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c59) {\n                  s4 = peg$c59;\n                  peg$currPos += 2;\n                } else {\n                  s4 = peg$FAILED;\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c60);\n                  }\n                }\n                if (s4 !== peg$FAILED) {\n                  if (peg$c42.test(input.charAt(peg$currPos))) {\n                    s5 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c43);\n                    }\n                  }\n                  if (s5 !== peg$FAILED) {\n                    if (peg$c44.test(input.charAt(peg$currPos))) {\n                      s6 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s6 = peg$FAILED;\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c45);\n                      }\n                    }\n                    if (s6 === peg$FAILED) {\n                      s6 = null;\n                    }\n                    if (s6 !== peg$FAILED) {\n                      s4 = [s4, s5, s6];\n                      s3 = s4;\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n                if (s3 === peg$FAILED) {\n                  s3 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c61) {\n                    s4 = peg$c61;\n                    peg$currPos += 2;\n                  } else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c62);\n                    }\n                  }\n                  if (s4 !== peg$FAILED) {\n                    if (peg$c42.test(input.charAt(peg$currPos))) {\n                      s5 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s5 = peg$FAILED;\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c43);\n                      }\n                    }\n                    if (s5 !== peg$FAILED) {\n                      if (peg$c44.test(input.charAt(peg$currPos))) {\n                        s6 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                      } else {\n                        s6 = peg$FAILED;\n                        if (peg$silentFails === 0) {\n                          peg$fail(peg$c45);\n                        }\n                      }\n                      if (s6 === peg$FAILED) {\n                        s6 = null;\n                      }\n                      if (s6 !== peg$FAILED) {\n                        s4 = [s4, s5, s6];\n                        s3 = s4;\n                      } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c63(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsecharge() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      s1 = peg$parseposcharge();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsenegcharge();\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c64(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseposcharge() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 43) {\n        s2 = peg$c65;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c66);\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 43) {\n          s3 = peg$c65;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c66);\n          }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = peg$currPos;\n          if (peg$c42.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c43);\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            if (peg$c44.test(input.charAt(peg$currPos))) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c45);\n              }\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c67(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsenegcharge() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s2 = peg$c68;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c69);\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s3 = peg$c68;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c69);\n          }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = peg$currPos;\n          if (peg$c42.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c43);\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            if (peg$c44.test(input.charAt(peg$currPos))) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c45);\n              }\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c70(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsehcount() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 72) {\n        s2 = peg$c71;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c72);\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (peg$c44.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c45);\n          }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c73(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseclass() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 58) {\n        s2 = peg$c74;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c75);\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (peg$c42.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c43);\n          }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          if (peg$c44.test(input.charAt(peg$currPos))) {\n            s6 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c45);\n            }\n          }\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            if (peg$c44.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c45);\n              }\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 === peg$FAILED) {\n          if (peg$c76.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c77);\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c78(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseisotope() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (peg$c42.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c43);\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (peg$c44.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c45);\n          }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          if (peg$c44.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c45);\n            }\n          }\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c79(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail(peg$endExpectation());\n      }\n\n      throw peg$buildStructuredError(\n        peg$maxFailExpected,\n        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n        peg$maxFailPos < input.length ?\n        peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) :\n        peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n      );\n    }\n  }\n\n  return {\n    SyntaxError: peg$SyntaxError,\n    parse: peg$parse\n  };\n})();"]},"metadata":{},"sourceType":"script"}