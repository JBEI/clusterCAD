{"ast":null,"code":"var _classCallCheck = require(\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n//@ts-check\nvar MathHelper = require('./MathHelper');\n\nvar Vector2 = require('./Vector2');\n\nvar Line = require('./Line');\n\nvar Vertex = require('./Vertex');\n\nvar Ring = require('./Ring');\n\nvar _require = require('./UtilityFunctions'),\n    getChargeText = _require.getChargeText;\n/** \r\n * A class wrapping a canvas element.\r\n * \r\n * @property {HTMLElement} canvas The HTML element for the canvas associated with this CanvasWrapper instance.\r\n * @property {CanvasRenderingContext2D} ctx The CanvasRenderingContext2D of the canvas associated with this CanvasWrapper instance.\r\n * @property {Object} colors The colors object as defined in the SmilesDrawer options.\r\n * @property {Object} opts The SmilesDrawer options.\r\n * @property {Number} drawingWidth The width of the canvas.\r\n * @property {Number} drawingHeight The height of the canvas.\r\n * @property {Number} offsetX The horizontal offset required for centering the drawing.\r\n * @property {Number} offsetY The vertical offset required for centering the drawing.\r\n * @property {Number} fontLarge The large font size in pt.\r\n * @property {Number} fontSmall The small font size in pt.\r\n */\n\n\nvar CanvasWrapper = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\r\n   * The constructor for the class CanvasWrapper.\r\n   *\r\n   * @param {(String|HTMLElement)} target The canvas id or the canvas HTMLElement.\r\n   * @param {ThemeManager} themeManager Theme manager for setting proper colors.\r\n   * @param {Object} options The smiles drawer options object.\r\n   */\n  function CanvasWrapper(target, themeManager, options) {\n    _classCallCheck(this, CanvasWrapper);\n\n    if (typeof target === 'string' || target instanceof String) {\n      this.canvas = document.getElementById(target);\n    } else {\n      this.canvas = target;\n    }\n\n    this.ctx = this.canvas.getContext('2d');\n    this.themeManager = themeManager;\n    this.opts = options;\n    this.drawingWidth = 0.0;\n    this.drawingHeight = 0.0;\n    this.offsetX = 0.0;\n    this.offsetY = 0.0;\n    this.fontLarge = this.opts.fontSizeLarge + 'pt Helvetica, Arial, sans-serif';\n    this.fontSmall = this.opts.fontSizeSmall + 'pt Helvetica, Arial, sans-serif';\n    this.updateSize(this.opts.width, this.opts.height);\n    this.ctx.font = this.fontLarge;\n    this.hydrogenWidth = this.ctx.measureText('H').width;\n    this.halfHydrogenWidth = this.hydrogenWidth / 2.0;\n    this.halfBondThickness = this.opts.bondThickness / 2.0; // TODO: Find out why clear was here.\n    // this.clear();\n  }\n  /**\r\n   * Update the width and height of the canvas\r\n   * \r\n   * @param {Number} width \r\n   * @param {Number} height \r\n   */\n\n\n  _createClass(CanvasWrapper, [{\n    key: \"updateSize\",\n    value: function updateSize(width, height) {\n      this.devicePixelRatio = window.devicePixelRatio || 1;\n      this.backingStoreRatio = this.ctx.webkitBackingStorePixelRatio || this.ctx.mozBackingStorePixelRatio || this.ctx.msBackingStorePixelRatio || this.ctx.oBackingStorePixelRatio || this.ctx.backingStorePixelRatio || 1;\n      this.ratio = this.devicePixelRatio / this.backingStoreRatio;\n\n      if (this.ratio !== 1) {\n        this.canvas.width = width * this.ratio;\n        this.canvas.height = height * this.ratio;\n        this.canvas.style.width = width + 'px';\n        this.canvas.style.height = height + 'px';\n        this.ctx.setTransform(this.ratio, 0, 0, this.ratio, 0, 0);\n      } else {\n        this.canvas.width = width * this.ratio;\n        this.canvas.height = height * this.ratio;\n      }\n    }\n    /**\r\n     * Sets a provided theme.\r\n     *\r\n     * @param {Object} theme A theme from the smiles drawer options.\r\n     */\n\n  }, {\n    key: \"setTheme\",\n    value: function setTheme(theme) {\n      this.colors = theme;\n    }\n    /**\r\n     * Scale the canvas based on vertex positions.\r\n     *\r\n     * @param {Vertex[]} vertices An array of vertices containing the vertices associated with the current molecule.\r\n     */\n\n  }, {\n    key: \"scale\",\n    value: function scale(vertices) {\n      // Figure out the final size of the image\n      var maxX = -Number.MAX_VALUE;\n      var maxY = -Number.MAX_VALUE;\n      var minX = Number.MAX_VALUE;\n      var minY = Number.MAX_VALUE;\n\n      for (var i = 0; i < vertices.length; i++) {\n        if (!vertices[i].value.isDrawn) {\n          continue;\n        }\n\n        var p = vertices[i].position;\n        if (maxX < p.x) maxX = p.x;\n        if (maxY < p.y) maxY = p.y;\n        if (minX > p.x) minX = p.x;\n        if (minY > p.y) minY = p.y;\n      } // Add padding\n\n\n      var padding = this.opts.padding;\n      maxX += padding;\n      maxY += padding;\n      minX -= padding;\n      minY -= padding;\n      this.drawingWidth = maxX - minX;\n      this.drawingHeight = maxY - minY;\n      var scaleX = this.canvas.offsetWidth / this.drawingWidth;\n      var scaleY = this.canvas.offsetHeight / this.drawingHeight;\n      var scale = scaleX < scaleY ? scaleX : scaleY;\n      this.ctx.scale(scale, scale);\n      this.offsetX = -minX;\n      this.offsetY = -minY; // Center\n\n      if (scaleX < scaleY) {\n        this.offsetY += this.canvas.offsetHeight / (2.0 * scale) - this.drawingHeight / 2.0;\n      } else {\n        this.offsetX += this.canvas.offsetWidth / (2.0 * scale) - this.drawingWidth / 2.0;\n      }\n    }\n    /**\r\n     * Resets the transform of the canvas.\r\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n    }\n    /**\r\n     * Returns the hex code of a color associated with a key from the current theme.\r\n     *\r\n     * @param {String} key The color key in the theme (e.g. C, N, BACKGROUND, ...).\r\n     * @returns {String} A color hex value.\r\n     */\n\n  }, {\n    key: \"getColor\",\n    value: function getColor(key) {\n      key = key.toUpperCase();\n\n      if (key in this.colors) {\n        return this.colors[key];\n      }\n\n      return this.colors['C'];\n    }\n    /**\r\n     * Draws a circle to a canvas context.\r\n     * @param {Number} x The x coordinate of the circles center.\r\n     * @param {Number} y The y coordinate of the circles center.\r\n     * @param {Number} radius The radius of the circle\r\n     * @param {String} color A hex encoded color.\r\n     * @param {Boolean} [fill=true] Whether to fill or stroke the circle.\r\n     * @param {Boolean} [debug=false] Draw in debug mode.\r\n     * @param {String} [debugText=''] A debug message.\r\n     */\n\n  }, {\n    key: \"drawCircle\",\n    value: function drawCircle(x, y, radius, color) {\n      var fill = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n      var debug = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n      var debugText = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : '';\n      var ctx = this.ctx;\n      var offsetX = this.offsetX;\n      var offsetY = this.offsetY;\n      ctx.save();\n      ctx.lineWidth = 1.5;\n      ctx.beginPath();\n      ctx.arc(x + offsetX, y + offsetY, radius, 0, MathHelper.twoPI, true);\n      ctx.closePath();\n\n      if (debug) {\n        if (fill) {\n          ctx.fillStyle = '#f00';\n          ctx.fill();\n        } else {\n          ctx.strokeStyle = '#f00';\n          ctx.stroke();\n        }\n\n        this.drawDebugText(x, y, debugText);\n      } else {\n        if (fill) {\n          ctx.fillStyle = color;\n          ctx.fill();\n        } else {\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    }\n    /**\r\n     * Draw a line to a canvas.\r\n     *\r\n     * @param {Line} line A line.\r\n     * @param {Boolean} [dashed=false] Whether or not the line is dashed.\r\n     * @param {Number} [alpha=1.0] The alpha value of the color.\r\n     */\n\n  }, {\n    key: \"drawLine\",\n    value: function drawLine(line) {\n      var dashed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var alpha = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.0;\n      var ctx = this.ctx;\n      var offsetX = this.offsetX;\n      var offsetY = this.offsetY; // Add a shadow behind the line\n\n      var shortLine = line.clone().shorten(4.0);\n      var l = shortLine.getLeftVector().clone();\n      var r = shortLine.getRightVector().clone();\n      l.x += offsetX;\n      l.y += offsetY;\n      r.x += offsetX;\n      r.y += offsetY; // Draw the \"shadow\"\n\n      if (!dashed) {\n        ctx.save();\n        ctx.globalCompositeOperation = 'destination-out';\n        ctx.beginPath();\n        ctx.moveTo(l.x, l.y);\n        ctx.lineTo(r.x, r.y);\n        ctx.lineCap = 'round';\n        ctx.lineWidth = this.opts.bondThickness + 1.2;\n        ctx.strokeStyle = this.themeManager.getColor('BACKGROUND');\n        ctx.stroke();\n        ctx.globalCompositeOperation = 'source-over';\n        ctx.restore();\n      }\n\n      l = line.getLeftVector().clone();\n      r = line.getRightVector().clone();\n      l.x += offsetX;\n      l.y += offsetY;\n      r.x += offsetX;\n      r.y += offsetY;\n      ctx.save();\n      ctx.beginPath();\n      ctx.moveTo(l.x, l.y);\n      ctx.lineTo(r.x, r.y);\n      ctx.lineCap = 'round';\n      ctx.lineWidth = this.opts.bondThickness;\n      var gradient = this.ctx.createLinearGradient(l.x, l.y, r.x, r.y);\n      gradient.addColorStop(0.4, this.themeManager.getColor(line.getLeftElement()) || this.themeManager.getColor('C'));\n      gradient.addColorStop(0.6, this.themeManager.getColor(line.getRightElement()) || this.themeManager.getColor('C'));\n\n      if (dashed) {\n        ctx.setLineDash([1, 1.5]);\n        ctx.lineWidth = this.opts.bondThickness / 1.5;\n      }\n\n      if (alpha < 1.0) {\n        ctx.globalAlpha = alpha;\n      }\n\n      ctx.strokeStyle = gradient;\n      ctx.stroke();\n      ctx.restore();\n    }\n    /**\r\n     * Draw a wedge on the canvas.\r\n     *\r\n     * @param {Line} line A line.\r\n     * @param {Number} width The wedge width.\r\n     */\n\n  }, {\n    key: \"drawWedge\",\n    value: function drawWedge(line) {\n      var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1.0;\n\n      if (isNaN(line.from.x) || isNaN(line.from.y) || isNaN(line.to.x) || isNaN(line.to.y)) {\n        return;\n      }\n\n      var ctx = this.ctx;\n      var offsetX = this.offsetX;\n      var offsetY = this.offsetY; // Add a shadow behind the line\n\n      var shortLine = line.clone().shorten(5.0);\n      var l = shortLine.getLeftVector().clone();\n      var r = shortLine.getRightVector().clone();\n      l.x += offsetX;\n      l.y += offsetY;\n      r.x += offsetX;\n      r.y += offsetY;\n      l = line.getLeftVector().clone();\n      r = line.getRightVector().clone();\n      l.x += offsetX;\n      l.y += offsetY;\n      r.x += offsetX;\n      r.y += offsetY;\n      ctx.save();\n      var normals = Vector2.normals(l, r);\n      normals[0].normalize();\n      normals[1].normalize();\n      var isRightChiralCenter = line.getRightChiral();\n      var start = l;\n      var end = r;\n\n      if (isRightChiralCenter) {\n        start = r;\n        end = l;\n      }\n\n      var t = Vector2.add(start, Vector2.multiplyScalar(normals[0], this.halfBondThickness));\n      var u = Vector2.add(end, Vector2.multiplyScalar(normals[0], 1.5 + this.halfBondThickness));\n      var v = Vector2.add(end, Vector2.multiplyScalar(normals[1], 1.5 + this.halfBondThickness));\n      var w = Vector2.add(start, Vector2.multiplyScalar(normals[1], this.halfBondThickness));\n      ctx.beginPath();\n      ctx.moveTo(t.x, t.y);\n      ctx.lineTo(u.x, u.y);\n      ctx.lineTo(v.x, v.y);\n      ctx.lineTo(w.x, w.y);\n      var gradient = this.ctx.createRadialGradient(r.x, r.y, this.opts.bondLength, r.x, r.y, 0);\n      gradient.addColorStop(0.4, this.themeManager.getColor(line.getLeftElement()) || this.themeManager.getColor('C'));\n      gradient.addColorStop(0.6, this.themeManager.getColor(line.getRightElement()) || this.themeManager.getColor('C'));\n      ctx.fillStyle = gradient;\n      ctx.fill();\n      ctx.restore();\n    }\n    /**\r\n     * Draw a dashed wedge on the canvas.\r\n     *\r\n     * @param {Line} line A line.\r\n     */\n\n  }, {\n    key: \"drawDashedWedge\",\n    value: function drawDashedWedge(line) {\n      if (isNaN(line.from.x) || isNaN(line.from.y) || isNaN(line.to.x) || isNaN(line.to.y)) {\n        return;\n      }\n\n      var ctx = this.ctx;\n      var offsetX = this.offsetX;\n      var offsetY = this.offsetY;\n      var l = line.getLeftVector().clone();\n      var r = line.getRightVector().clone();\n      l.x += offsetX;\n      l.y += offsetY;\n      r.x += offsetX;\n      r.y += offsetY;\n      ctx.save();\n      var normals = Vector2.normals(l, r);\n      normals[0].normalize();\n      normals[1].normalize();\n      var isRightChiralCenter = line.getRightChiral();\n      var start;\n      var end;\n      var sStart;\n      var sEnd;\n      var shortLine = line.clone();\n\n      if (isRightChiralCenter) {\n        start = r;\n        end = l;\n        shortLine.shortenRight(1.0);\n        sStart = shortLine.getRightVector().clone();\n        sEnd = shortLine.getLeftVector().clone();\n      } else {\n        start = l;\n        end = r;\n        shortLine.shortenLeft(1.0);\n        sStart = shortLine.getLeftVector().clone();\n        sEnd = shortLine.getRightVector().clone();\n      }\n\n      sStart.x += offsetX;\n      sStart.y += offsetY;\n      sEnd.x += offsetX;\n      sEnd.y += offsetY;\n      var dir = Vector2.subtract(end, start).normalize();\n      ctx.strokeStyle = this.themeManager.getColor('C');\n      ctx.lineCap = 'round';\n      ctx.lineWidth = this.opts.bondThickness;\n      ctx.beginPath();\n      var length = line.getLength();\n      var step = 1.25 / (length / (this.opts.bondThickness * 3.0));\n      var changed = false;\n\n      for (var t = 0.0; t < 1.0; t += step) {\n        var to = Vector2.multiplyScalar(dir, t * length);\n        var startDash = Vector2.add(start, to);\n        var width = 1.5 * t;\n        var dashOffset = Vector2.multiplyScalar(normals[0], width);\n\n        if (!changed && t > 0.5) {\n          ctx.stroke();\n          ctx.beginPath();\n          ctx.strokeStyle = this.themeManager.getColor(line.getRightElement()) || this.themeManager.getColor('C');\n          changed = true;\n        }\n\n        startDash.subtract(dashOffset);\n        ctx.moveTo(startDash.x, startDash.y);\n        startDash.add(Vector2.multiplyScalar(dashOffset, 2.0));\n        ctx.lineTo(startDash.x, startDash.y);\n      }\n\n      ctx.stroke();\n      ctx.restore();\n    }\n    /**\r\n     * Draws a debug text message at a given position\r\n     *\r\n     * @param {Number} x The x coordinate.\r\n     * @param {Number} y The y coordinate.\r\n     * @param {String} text The debug text.\r\n     */\n\n  }, {\n    key: \"drawDebugText\",\n    value: function drawDebugText(x, y, text) {\n      var ctx = this.ctx;\n      ctx.save();\n      ctx.font = '5px Droid Sans, sans-serif';\n      ctx.textAlign = 'start';\n      ctx.textBaseline = 'top';\n      ctx.fillStyle = '#ff0000';\n      ctx.fillText(text, x + this.offsetX, y + this.offsetY);\n      ctx.restore();\n    }\n    /**\r\n     * Draw a ball to the canvas.\r\n     *\r\n     * @param {Number} x The x position of the text.\r\n     * @param {Number} y The y position of the text.\r\n     * @param {String} elementName The name of the element (single-letter).\r\n     */\n\n  }, {\n    key: \"drawBall\",\n    value: function drawBall(x, y, elementName) {\n      var ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      ctx.arc(x + this.offsetX, y + this.offsetY, this.opts.bondLength / 4.5, 0, MathHelper.twoPI, false);\n      ctx.fillStyle = this.themeManager.getColor(elementName);\n      ctx.fill();\n      ctx.restore();\n    }\n    /**\r\n     * Draw a point to the canvas.\r\n     *\r\n     * @param {Number} x The x position of the point.\r\n     * @param {Number} y The y position of the point.\r\n     * @param {String} elementName The name of the element (single-letter).\r\n     */\n\n  }, {\n    key: \"drawPoint\",\n    value: function drawPoint(x, y, elementName) {\n      var ctx = this.ctx;\n      var offsetX = this.offsetX;\n      var offsetY = this.offsetY;\n      ctx.save();\n      ctx.globalCompositeOperation = 'destination-out';\n      ctx.beginPath();\n      ctx.arc(x + offsetX, y + offsetY, 1.5, 0, MathHelper.twoPI, true);\n      ctx.closePath();\n      ctx.fill();\n      ctx.globalCompositeOperation = 'source-over';\n      ctx.beginPath();\n      ctx.arc(x + this.offsetX, y + this.offsetY, 0.75, 0, MathHelper.twoPI, false);\n      ctx.fillStyle = this.themeManager.getColor(elementName);\n      ctx.fill();\n      ctx.restore();\n    }\n    /**\r\n     * Draw a text to the canvas.\r\n     *\r\n     * @param {Number} x The x position of the text.\r\n     * @param {Number} y The y position of the text.\r\n     * @param {String} elementName The name of the element (single-letter).\r\n     * @param {Number} hydrogens The number of hydrogen atoms.\r\n     * @param {String} direction The direction of the text in relation to the associated vertex.\r\n     * @param {Boolean} isTerminal A boolean indicating whether or not the vertex is terminal.\r\n     * @param {Number} charge The charge of the atom.\r\n     * @param {Number} isotope The isotope number.\r\n     * @param {Object} attachedPseudoElement A map with containing information for pseudo elements or concatinated elements. The key is comprised of the element symbol and the hydrogen count.\r\n     * @param {String} attachedPseudoElement.element The element symbol.\r\n     * @param {Number} attachedPseudoElement.count The number of occurences that match the key.\r\n     * @param {Number} attachedPseudoElement.hyrogenCount The number of hydrogens attached to each atom matching the key.\r\n     */\n\n  }, {\n    key: \"drawText\",\n    value: function drawText(x, y, elementName, hydrogens, direction, isTerminal, charge, isotope) {\n      var attachedPseudoElement = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : {};\n      var ctx = this.ctx;\n      var offsetX = this.offsetX;\n      var offsetY = this.offsetY;\n      ctx.save();\n      ctx.textAlign = 'start';\n      ctx.textBaseline = 'alphabetic';\n      var pseudoElementHandled = false; // Charge\n\n      var chargeText = '';\n      var chargeWidth = 0;\n\n      if (charge) {\n        chargeText = getChargeText(charge);\n        ctx.font = this.fontSmall;\n        chargeWidth = ctx.measureText(chargeText).width;\n      }\n\n      var isotopeText = '0';\n      var isotopeWidth = 0;\n\n      if (isotope > 0) {\n        isotopeText = isotope.toString();\n        ctx.font = this.fontSmall;\n        isotopeWidth = ctx.measureText(isotopeText).width;\n      } // TODO: Better handle exceptions\n      // Exception for nitro (draw nitro as NO2 instead of N+O-O)\n\n\n      if (charge === 1 && elementName === 'N' && attachedPseudoElement.hasOwnProperty('0O') && attachedPseudoElement.hasOwnProperty('0O-1')) {\n        attachedPseudoElement = {\n          '0O': {\n            element: 'O',\n            count: 2,\n            hydrogenCount: 0,\n            previousElement: 'C',\n            charge: ''\n          }\n        };\n        charge = 0;\n      }\n\n      ctx.font = this.fontLarge;\n      ctx.fillStyle = this.themeManager.getColor('BACKGROUND');\n      var dim = ctx.measureText(elementName);\n      dim.totalWidth = dim.width + chargeWidth;\n      dim.height = parseInt(this.fontLarge, 10);\n      var r = dim.width > this.opts.fontSizeLarge ? dim.width : this.opts.fontSizeLarge;\n      r /= 1.5;\n      ctx.globalCompositeOperation = 'destination-out';\n      ctx.beginPath();\n      ctx.arc(x + offsetX, y + offsetY, r, 0, MathHelper.twoPI, true);\n      ctx.closePath();\n      ctx.fill();\n      ctx.globalCompositeOperation = 'source-over';\n      var cursorPos = -dim.width / 2.0;\n      var cursorPosLeft = -dim.width / 2.0;\n      ctx.fillStyle = this.themeManager.getColor(elementName);\n      ctx.fillText(elementName, x + offsetX + cursorPos, y + this.opts.halfFontSizeLarge + offsetY);\n      cursorPos += dim.width;\n\n      if (charge) {\n        ctx.font = this.fontSmall;\n        ctx.fillText(chargeText, x + offsetX + cursorPos, y - this.opts.fifthFontSizeSmall + offsetY);\n        cursorPos += chargeWidth;\n      }\n\n      if (isotope > 0) {\n        ctx.font = this.fontSmall;\n        ctx.fillText(isotopeText, x + offsetX + cursorPosLeft - isotopeWidth, y - this.opts.fifthFontSizeSmall + offsetY);\n        cursorPosLeft -= isotopeWidth;\n      }\n\n      ctx.font = this.fontLarge;\n      var hydrogenWidth = 0;\n      var hydrogenCountWidth = 0;\n\n      if (hydrogens === 1) {\n        var hx = x + offsetX;\n        var hy = y + offsetY + this.opts.halfFontSizeLarge;\n        hydrogenWidth = this.hydrogenWidth;\n        cursorPosLeft -= hydrogenWidth;\n\n        if (direction === 'left') {\n          hx += cursorPosLeft;\n        } else if (direction === 'right') {\n          hx += cursorPos;\n        } else if (direction === 'up' && isTerminal) {\n          hx += cursorPos;\n        } else if (direction === 'down' && isTerminal) {\n          hx += cursorPos;\n        } else if (direction === 'up' && !isTerminal) {\n          hy -= this.opts.fontSizeLarge + this.opts.quarterFontSizeLarge;\n          hx -= this.halfHydrogenWidth;\n        } else if (direction === 'down' && !isTerminal) {\n          hy += this.opts.fontSizeLarge + this.opts.quarterFontSizeLarge;\n          hx -= this.halfHydrogenWidth;\n        }\n\n        ctx.fillText('H', hx, hy);\n        cursorPos += hydrogenWidth;\n      } else if (hydrogens > 1) {\n        var _hx = x + offsetX;\n\n        var _hy = y + offsetY + this.opts.halfFontSizeLarge;\n\n        hydrogenWidth = this.hydrogenWidth;\n        ctx.font = this.fontSmall;\n        hydrogenCountWidth = ctx.measureText(hydrogens).width;\n        cursorPosLeft -= hydrogenWidth + hydrogenCountWidth;\n\n        if (direction === 'left') {\n          _hx += cursorPosLeft;\n        } else if (direction === 'right') {\n          _hx += cursorPos;\n        } else if (direction === 'up' && isTerminal) {\n          _hx += cursorPos;\n        } else if (direction === 'down' && isTerminal) {\n          _hx += cursorPos;\n        } else if (direction === 'up' && !isTerminal) {\n          _hy -= this.opts.fontSizeLarge + this.opts.quarterFontSizeLarge;\n          _hx -= this.halfHydrogenWidth;\n        } else if (direction === 'down' && !isTerminal) {\n          _hy += this.opts.fontSizeLarge + this.opts.quarterFontSizeLarge;\n          _hx -= this.halfHydrogenWidth;\n        }\n\n        ctx.font = this.fontLarge;\n        ctx.fillText('H', _hx, _hy);\n        ctx.font = this.fontSmall;\n        ctx.fillText(hydrogens, _hx + this.halfHydrogenWidth + hydrogenCountWidth, _hy + this.opts.fifthFontSizeSmall);\n        cursorPos += hydrogenWidth + this.halfHydrogenWidth + hydrogenCountWidth;\n      }\n\n      if (pseudoElementHandled) {\n        ctx.restore();\n        return;\n      }\n\n      for (var key in attachedPseudoElement) {\n        if (!attachedPseudoElement.hasOwnProperty(key)) {\n          continue;\n        }\n\n        var openParenthesisWidth = 0;\n        var closeParenthesisWidth = 0;\n        var element = attachedPseudoElement[key].element;\n        var elementCount = attachedPseudoElement[key].count;\n        var hydrogenCount = attachedPseudoElement[key].hydrogenCount;\n        var elementCharge = attachedPseudoElement[key].charge;\n        ctx.font = this.fontLarge;\n\n        if (elementCount > 1 && hydrogenCount > 0) {\n          openParenthesisWidth = ctx.measureText('(').width;\n          closeParenthesisWidth = ctx.measureText(')').width;\n        }\n\n        var elementWidth = ctx.measureText(element).width;\n        var elementCountWidth = 0;\n        var elementChargeText = '';\n        var elementChargeWidth = 0;\n        hydrogenWidth = 0;\n\n        if (hydrogenCount > 0) {\n          hydrogenWidth = this.hydrogenWidth;\n        }\n\n        ctx.font = this.fontSmall;\n\n        if (elementCount > 1) {\n          elementCountWidth = ctx.measureText(elementCount).width;\n        }\n\n        if (elementCharge !== 0) {\n          elementChargeText = getChargeText(elementCharge);\n          elementChargeWidth = ctx.measureText(elementChargeText).width;\n        }\n\n        hydrogenCountWidth = 0;\n\n        if (hydrogenCount > 1) {\n          hydrogenCountWidth = ctx.measureText(hydrogenCount).width;\n        }\n\n        ctx.font = this.fontLarge;\n\n        var _hx2 = x + offsetX;\n\n        var _hy2 = y + offsetY + this.opts.halfFontSizeLarge;\n\n        ctx.fillStyle = this.themeManager.getColor(element);\n\n        if (elementCount > 0) {\n          cursorPosLeft -= elementCountWidth;\n        }\n\n        if (elementCount > 1 && hydrogenCount > 0) {\n          if (direction === 'left') {\n            cursorPosLeft -= closeParenthesisWidth;\n            ctx.fillText(')', _hx2 + cursorPosLeft, _hy2);\n          } else {\n            ctx.fillText('(', _hx2 + cursorPos, _hy2);\n            cursorPos += openParenthesisWidth;\n          }\n        }\n\n        if (direction === 'left') {\n          cursorPosLeft -= elementWidth;\n          ctx.fillText(element, _hx2 + cursorPosLeft, _hy2);\n        } else {\n          ctx.fillText(element, _hx2 + cursorPos, _hy2);\n          cursorPos += elementWidth;\n        }\n\n        if (hydrogenCount > 0) {\n          if (direction === 'left') {\n            cursorPosLeft -= hydrogenWidth + hydrogenCountWidth;\n            ctx.fillText('H', _hx2 + cursorPosLeft, _hy2);\n\n            if (hydrogenCount > 1) {\n              ctx.font = this.fontSmall;\n              ctx.fillText(hydrogenCount, _hx2 + cursorPosLeft + hydrogenWidth, _hy2 + this.opts.fifthFontSizeSmall);\n            }\n          } else {\n            ctx.fillText('H', _hx2 + cursorPos, _hy2);\n            cursorPos += hydrogenWidth;\n\n            if (hydrogenCount > 1) {\n              ctx.font = this.fontSmall;\n              ctx.fillText(hydrogenCount, _hx2 + cursorPos, _hy2 + this.opts.fifthFontSizeSmall);\n              cursorPos += hydrogenCountWidth;\n            }\n          }\n        }\n\n        ctx.font = this.fontLarge;\n\n        if (elementCount > 1 && hydrogenCount > 0) {\n          if (direction === 'left') {\n            cursorPosLeft -= openParenthesisWidth;\n            ctx.fillText('(', _hx2 + cursorPosLeft, _hy2);\n          } else {\n            ctx.fillText(')', _hx2 + cursorPos, _hy2);\n            cursorPos += closeParenthesisWidth;\n          }\n        }\n\n        ctx.font = this.fontSmall;\n\n        if (elementCount > 1) {\n          if (direction === 'left') {\n            ctx.fillText(elementCount, _hx2 + cursorPosLeft + openParenthesisWidth + closeParenthesisWidth + hydrogenWidth + hydrogenCountWidth + elementWidth, _hy2 + this.opts.fifthFontSizeSmall);\n          } else {\n            ctx.fillText(elementCount, _hx2 + cursorPos, _hy2 + this.opts.fifthFontSizeSmall);\n            cursorPos += elementCountWidth;\n          }\n        }\n\n        if (elementCharge !== 0) {\n          if (direction === 'left') {\n            ctx.fillText(elementChargeText, _hx2 + cursorPosLeft + openParenthesisWidth + closeParenthesisWidth + hydrogenWidth + hydrogenCountWidth + elementWidth, y - this.opts.fifthFontSizeSmall + offsetY);\n          } else {\n            ctx.fillText(elementChargeText, _hx2 + cursorPos, y - this.opts.fifthFontSizeSmall + offsetY);\n            cursorPos += elementChargeWidth;\n          }\n        }\n      }\n\n      ctx.restore();\n    }\n    /**\r\n     * Translate the integer indicating the charge to the appropriate text.\r\n     * @param {Number} charge The integer indicating the charge.\r\n     * @returns {String} A string representing a charge.\r\n     */\n\n  }, {\n    key: \"getChargeText\",\n    value: function getChargeText(charge) {\n      if (charge === 1) {\n        return '+';\n      } else if (charge === 2) {\n        return '2+';\n      } else if (charge === -1) {\n        return '-';\n      } else if (charge === -2) {\n        return '2-';\n      } else {\n        return '';\n      }\n    }\n    /**\r\n     * Draws a dubug dot at a given coordinate and adds text.\r\n     *\r\n     * @param {Number} x The x coordinate.\r\n     * @param {Number} y The y coordindate.\r\n     * @param {String} [debugText=''] A string.\r\n     * @param {String} [color='#f00'] A color in hex form.\r\n     */\n\n  }, {\n    key: \"drawDebugPoint\",\n    value: function drawDebugPoint(x, y) {\n      var debugText = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      var color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '#f00';\n      this.drawCircle(x, y, 2, color, true, true, debugText);\n    }\n    /**\r\n     * Draws a ring inside a provided ring, indicating aromaticity.\r\n     *\r\n     * @param {Ring} ring A ring.\r\n     */\n\n  }, {\n    key: \"drawAromaticityRing\",\n    value: function drawAromaticityRing(ring) {\n      var ctx = this.ctx;\n      var radius = MathHelper.apothemFromSideLength(this.opts.bondLength, ring.getSize());\n      ctx.save();\n      ctx.strokeStyle = this.themeManager.getColor('C');\n      ctx.lineWidth = this.opts.bondThickness;\n      ctx.beginPath();\n      ctx.arc(ring.center.x + this.offsetX, ring.center.y + this.offsetY, radius - this.opts.bondSpacing, 0, Math.PI * 2, true);\n      ctx.closePath();\n      ctx.stroke();\n      ctx.restore();\n    }\n    /**\r\n     * Clear the canvas.\r\n     *\r\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.ctx.clearRect(0, 0, this.canvas.offsetWidth, this.canvas.offsetHeight);\n    }\n  }]);\n\n  return CanvasWrapper;\n}();\n\nmodule.exports = CanvasWrapper;","map":{"version":3,"sources":["/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/smiles-drawer/src/CanvasWrapper.js"],"names":["MathHelper","require","Vector2","Line","Vertex","Ring","getChargeText","CanvasWrapper","target","themeManager","options","String","canvas","document","getElementById","ctx","getContext","opts","drawingWidth","drawingHeight","offsetX","offsetY","fontLarge","fontSizeLarge","fontSmall","fontSizeSmall","updateSize","width","height","font","hydrogenWidth","measureText","halfHydrogenWidth","halfBondThickness","bondThickness","devicePixelRatio","window","backingStoreRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","ratio","style","setTransform","theme","colors","vertices","maxX","Number","MAX_VALUE","maxY","minX","minY","i","length","value","isDrawn","p","position","x","y","padding","scaleX","offsetWidth","scaleY","offsetHeight","scale","key","toUpperCase","radius","color","fill","debug","debugText","save","lineWidth","beginPath","arc","twoPI","closePath","fillStyle","strokeStyle","stroke","drawDebugText","restore","line","dashed","alpha","shortLine","clone","shorten","l","getLeftVector","r","getRightVector","globalCompositeOperation","moveTo","lineTo","lineCap","getColor","gradient","createLinearGradient","addColorStop","getLeftElement","getRightElement","setLineDash","globalAlpha","isNaN","from","to","normals","normalize","isRightChiralCenter","getRightChiral","start","end","t","add","multiplyScalar","u","v","w","createRadialGradient","bondLength","sStart","sEnd","shortenRight","shortenLeft","dir","subtract","getLength","step","changed","startDash","dashOffset","text","textAlign","textBaseline","fillText","elementName","hydrogens","direction","isTerminal","charge","isotope","attachedPseudoElement","pseudoElementHandled","chargeText","chargeWidth","isotopeText","isotopeWidth","toString","hasOwnProperty","element","count","hydrogenCount","previousElement","dim","totalWidth","parseInt","cursorPos","cursorPosLeft","halfFontSizeLarge","fifthFontSizeSmall","hydrogenCountWidth","hx","hy","quarterFontSizeLarge","openParenthesisWidth","closeParenthesisWidth","elementCount","elementCharge","elementWidth","elementCountWidth","elementChargeText","elementChargeWidth","drawCircle","ring","apothemFromSideLength","getSize","center","bondSpacing","Math","PI","clearRect","module","exports"],"mappings":"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","sourcesContent":["//@ts-check\r\nconst MathHelper = require('./MathHelper')\r\nconst Vector2 = require('./Vector2')\r\nconst Line = require('./Line')\r\nconst Vertex = require('./Vertex')\r\nconst Ring = require('./Ring')\r\nconst { getChargeText } = require('./UtilityFunctions')\r\n\r\n/** \r\n * A class wrapping a canvas element.\r\n * \r\n * @property {HTMLElement} canvas The HTML element for the canvas associated with this CanvasWrapper instance.\r\n * @property {CanvasRenderingContext2D} ctx The CanvasRenderingContext2D of the canvas associated with this CanvasWrapper instance.\r\n * @property {Object} colors The colors object as defined in the SmilesDrawer options.\r\n * @property {Object} opts The SmilesDrawer options.\r\n * @property {Number} drawingWidth The width of the canvas.\r\n * @property {Number} drawingHeight The height of the canvas.\r\n * @property {Number} offsetX The horizontal offset required for centering the drawing.\r\n * @property {Number} offsetY The vertical offset required for centering the drawing.\r\n * @property {Number} fontLarge The large font size in pt.\r\n * @property {Number} fontSmall The small font size in pt.\r\n */\r\nclass CanvasWrapper {\r\n    /**\r\n     * The constructor for the class CanvasWrapper.\r\n     *\r\n     * @param {(String|HTMLElement)} target The canvas id or the canvas HTMLElement.\r\n     * @param {ThemeManager} themeManager Theme manager for setting proper colors.\r\n     * @param {Object} options The smiles drawer options object.\r\n     */\r\n    constructor(target, themeManager, options) {\r\n        if (typeof target === 'string' || target instanceof String) {\r\n            this.canvas = document.getElementById(target);\r\n        } else {\r\n            this.canvas = target;\r\n        }\r\n\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.themeManager = themeManager;\r\n        this.opts = options;\r\n        this.drawingWidth = 0.0;\r\n        this.drawingHeight = 0.0;\r\n        this.offsetX = 0.0;\r\n        this.offsetY = 0.0;\r\n\r\n        this.fontLarge = this.opts.fontSizeLarge + 'pt Helvetica, Arial, sans-serif';\r\n        this.fontSmall = this.opts.fontSizeSmall + 'pt Helvetica, Arial, sans-serif';\r\n\r\n        this.updateSize(this.opts.width, this.opts.height);\r\n\r\n        this.ctx.font = this.fontLarge;\r\n        this.hydrogenWidth = this.ctx.measureText('H').width;\r\n        this.halfHydrogenWidth = this.hydrogenWidth / 2.0;\r\n        this.halfBondThickness = this.opts.bondThickness / 2.0;\r\n\r\n        // TODO: Find out why clear was here.\r\n        // this.clear();\r\n    }\r\n\r\n    /**\r\n     * Update the width and height of the canvas\r\n     * \r\n     * @param {Number} width \r\n     * @param {Number} height \r\n     */\r\n    updateSize(width, height) {\r\n        this.devicePixelRatio = window.devicePixelRatio || 1;\r\n        this.backingStoreRatio = this.ctx.webkitBackingStorePixelRatio || this.ctx.mozBackingStorePixelRatio ||\r\n            this.ctx.msBackingStorePixelRatio || this.ctx.oBackingStorePixelRatio ||\r\n            this.ctx.backingStorePixelRatio || 1;\r\n        this.ratio = this.devicePixelRatio / this.backingStoreRatio;\r\n\r\n        if (this.ratio !== 1) {\r\n            this.canvas.width = width * this.ratio;\r\n            this.canvas.height = height * this.ratio;\r\n            this.canvas.style.width = width + 'px';\r\n            this.canvas.style.height = height + 'px';\r\n            this.ctx.setTransform(this.ratio, 0, 0, this.ratio, 0, 0);\r\n        } else {\r\n            this.canvas.width = width * this.ratio;\r\n            this.canvas.height = height * this.ratio;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a provided theme.\r\n     *\r\n     * @param {Object} theme A theme from the smiles drawer options.\r\n     */\r\n    setTheme(theme) {\r\n        this.colors = theme;\r\n    }\r\n\r\n    /**\r\n     * Scale the canvas based on vertex positions.\r\n     *\r\n     * @param {Vertex[]} vertices An array of vertices containing the vertices associated with the current molecule.\r\n     */\r\n    scale(vertices) {\r\n        // Figure out the final size of the image\r\n        let maxX = -Number.MAX_VALUE;\r\n        let maxY = -Number.MAX_VALUE;\r\n        let minX = Number.MAX_VALUE;\r\n        let minY = Number.MAX_VALUE;\r\n\r\n        for (var i = 0; i < vertices.length; i++) {\r\n            if (!vertices[i].value.isDrawn) {\r\n                continue;\r\n            }\r\n\r\n            let p = vertices[i].position;\r\n\r\n            if (maxX < p.x) maxX = p.x;\r\n            if (maxY < p.y) maxY = p.y;\r\n            if (minX > p.x) minX = p.x;\r\n            if (minY > p.y) minY = p.y;\r\n        }\r\n\r\n        // Add padding\r\n        var padding = this.opts.padding;\r\n        maxX += padding;\r\n        maxY += padding;\r\n        minX -= padding;\r\n        minY -= padding;\r\n\r\n        this.drawingWidth = maxX - minX;\r\n        this.drawingHeight = maxY - minY;\r\n\r\n        var scaleX = this.canvas.offsetWidth / this.drawingWidth;\r\n        var scaleY = this.canvas.offsetHeight / this.drawingHeight;\r\n\r\n        var scale = (scaleX < scaleY) ? scaleX : scaleY;\r\n\r\n        this.ctx.scale(scale, scale);\r\n\r\n        this.offsetX = -minX;\r\n        this.offsetY = -minY;\r\n\r\n        // Center\r\n        if (scaleX < scaleY) {\r\n            this.offsetY += this.canvas.offsetHeight / (2.0 * scale) - this.drawingHeight / 2.0;\r\n        } else {\r\n            this.offsetX += this.canvas.offsetWidth / (2.0 * scale) - this.drawingWidth / 2.0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the transform of the canvas.\r\n     */\r\n    reset() {\r\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Returns the hex code of a color associated with a key from the current theme.\r\n     *\r\n     * @param {String} key The color key in the theme (e.g. C, N, BACKGROUND, ...).\r\n     * @returns {String} A color hex value.\r\n     */\r\n    getColor(key) {\r\n        key = key.toUpperCase();\r\n\r\n        if (key in this.colors) {\r\n            return this.colors[key];\r\n        }\r\n\r\n        return this.colors['C'];\r\n    }\r\n\r\n    /**\r\n     * Draws a circle to a canvas context.\r\n     * @param {Number} x The x coordinate of the circles center.\r\n     * @param {Number} y The y coordinate of the circles center.\r\n     * @param {Number} radius The radius of the circle\r\n     * @param {String} color A hex encoded color.\r\n     * @param {Boolean} [fill=true] Whether to fill or stroke the circle.\r\n     * @param {Boolean} [debug=false] Draw in debug mode.\r\n     * @param {String} [debugText=''] A debug message.\r\n     */\r\n    drawCircle(x, y, radius, color, fill = true, debug = false, debugText = '') {\r\n        let ctx = this.ctx;\r\n        let offsetX = this.offsetX;\r\n        let offsetY = this.offsetY;\r\n\r\n        ctx.save();\r\n        ctx.lineWidth = 1.5;\r\n        ctx.beginPath();\r\n        ctx.arc(x + offsetX, y + offsetY, radius, 0, MathHelper.twoPI, true);\r\n        ctx.closePath();\r\n\r\n        if (debug) {\r\n            if (fill) {\r\n                ctx.fillStyle = '#f00';\r\n                ctx.fill();\r\n            } else {\r\n                ctx.strokeStyle = '#f00';\r\n                ctx.stroke();\r\n            }\r\n\r\n            this.drawDebugText(x, y, debugText);\r\n        } else {\r\n            if (fill) {\r\n                ctx.fillStyle = color;\r\n                ctx.fill();\r\n            } else {\r\n                ctx.strokeStyle = color;\r\n                ctx.stroke();\r\n            }\r\n        }\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Draw a line to a canvas.\r\n     *\r\n     * @param {Line} line A line.\r\n     * @param {Boolean} [dashed=false] Whether or not the line is dashed.\r\n     * @param {Number} [alpha=1.0] The alpha value of the color.\r\n     */\r\n    drawLine(line, dashed = false, alpha = 1.0) {\r\n        let ctx = this.ctx;\r\n        let offsetX = this.offsetX;\r\n        let offsetY = this.offsetY;\r\n\r\n        // Add a shadow behind the line\r\n        let shortLine = line.clone().shorten(4.0);\r\n\r\n        let l = shortLine.getLeftVector().clone();\r\n        let r = shortLine.getRightVector().clone();\r\n\r\n        l.x += offsetX;\r\n        l.y += offsetY;\r\n\r\n        r.x += offsetX;\r\n        r.y += offsetY;\r\n\r\n        // Draw the \"shadow\"\r\n        if (!dashed) {\r\n            ctx.save();\r\n            ctx.globalCompositeOperation = 'destination-out';\r\n            ctx.beginPath();\r\n            ctx.moveTo(l.x, l.y);\r\n            ctx.lineTo(r.x, r.y);\r\n            ctx.lineCap = 'round';\r\n            ctx.lineWidth = this.opts.bondThickness + 1.2;\r\n            ctx.strokeStyle = this.themeManager.getColor('BACKGROUND');\r\n            ctx.stroke();\r\n            ctx.globalCompositeOperation = 'source-over';\r\n            ctx.restore();\r\n        }\r\n\r\n        l = line.getLeftVector().clone();\r\n        r = line.getRightVector().clone();\r\n\r\n        l.x += offsetX;\r\n        l.y += offsetY;\r\n\r\n        r.x += offsetX;\r\n        r.y += offsetY;\r\n\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        ctx.moveTo(l.x, l.y);\r\n        ctx.lineTo(r.x, r.y);\r\n        ctx.lineCap = 'round';\r\n        ctx.lineWidth = this.opts.bondThickness;\r\n\r\n        let gradient = this.ctx.createLinearGradient(l.x, l.y, r.x, r.y);\r\n        gradient.addColorStop(0.4, this.themeManager.getColor(line.getLeftElement()) ||\r\n            this.themeManager.getColor('C'));\r\n        gradient.addColorStop(0.6, this.themeManager.getColor(line.getRightElement()) ||\r\n            this.themeManager.getColor('C'));\r\n\r\n        if (dashed) {\r\n            ctx.setLineDash([1, 1.5]);\r\n            ctx.lineWidth = this.opts.bondThickness / 1.5;\r\n        }\r\n\r\n        if (alpha < 1.0) {\r\n            ctx.globalAlpha = alpha;\r\n        }\r\n\r\n        ctx.strokeStyle = gradient;\r\n\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Draw a wedge on the canvas.\r\n     *\r\n     * @param {Line} line A line.\r\n     * @param {Number} width The wedge width.\r\n     */\r\n    drawWedge(line, width = 1.0) {\r\n        if (isNaN(line.from.x) || isNaN(line.from.y) ||\r\n            isNaN(line.to.x) || isNaN(line.to.y)) {\r\n            return;\r\n        }\r\n\r\n        let ctx = this.ctx;\r\n        let offsetX = this.offsetX;\r\n        let offsetY = this.offsetY;\r\n\r\n        // Add a shadow behind the line\r\n        let shortLine = line.clone().shorten(5.0);\r\n\r\n        let l = shortLine.getLeftVector().clone();\r\n        let r = shortLine.getRightVector().clone();\r\n\r\n        l.x += offsetX;\r\n        l.y += offsetY;\r\n\r\n        r.x += offsetX;\r\n        r.y += offsetY;\r\n\r\n        l = line.getLeftVector().clone();\r\n        r = line.getRightVector().clone();\r\n\r\n        l.x += offsetX;\r\n        l.y += offsetY;\r\n\r\n        r.x += offsetX;\r\n        r.y += offsetY;\r\n\r\n        ctx.save();\r\n\r\n        let normals = Vector2.normals(l, r);\r\n\r\n        normals[0].normalize();\r\n        normals[1].normalize();\r\n\r\n        let isRightChiralCenter = line.getRightChiral();\r\n\r\n        let start = l;\r\n        let end = r;\r\n\r\n        if (isRightChiralCenter) {\r\n            start = r;\r\n            end = l;\r\n        }\r\n\r\n        let t = Vector2.add(start, Vector2.multiplyScalar(normals[0], this.halfBondThickness));\r\n        let u = Vector2.add(end, Vector2.multiplyScalar(normals[0], 1.5 + this.halfBondThickness));\r\n        let v = Vector2.add(end, Vector2.multiplyScalar(normals[1], 1.5 + this.halfBondThickness));\r\n        let w = Vector2.add(start, Vector2.multiplyScalar(normals[1], this.halfBondThickness));\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(t.x, t.y);\r\n        ctx.lineTo(u.x, u.y);\r\n        ctx.lineTo(v.x, v.y);\r\n        ctx.lineTo(w.x, w.y);\r\n\r\n        let gradient = this.ctx.createRadialGradient(r.x, r.y, this.opts.bondLength, r.x, r.y, 0);\r\n        gradient.addColorStop(0.4, this.themeManager.getColor(line.getLeftElement()) ||\r\n            this.themeManager.getColor('C'));\r\n        gradient.addColorStop(0.6, this.themeManager.getColor(line.getRightElement()) ||\r\n            this.themeManager.getColor('C'));\r\n\r\n        ctx.fillStyle = gradient;\r\n\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Draw a dashed wedge on the canvas.\r\n     *\r\n     * @param {Line} line A line.\r\n     */\r\n    drawDashedWedge(line) {\r\n        if (isNaN(line.from.x) || isNaN(line.from.y) ||\r\n            isNaN(line.to.x) || isNaN(line.to.y)) {\r\n            return;\r\n        }\r\n\r\n        let ctx = this.ctx;\r\n        let offsetX = this.offsetX;\r\n        let offsetY = this.offsetY;\r\n\r\n        let l = line.getLeftVector().clone();\r\n        let r = line.getRightVector().clone();\r\n\r\n        l.x += offsetX;\r\n        l.y += offsetY;\r\n\r\n        r.x += offsetX;\r\n        r.y += offsetY;\r\n\r\n        ctx.save();\r\n\r\n        let normals = Vector2.normals(l, r);\r\n\r\n        normals[0].normalize();\r\n        normals[1].normalize();\r\n\r\n\r\n        let isRightChiralCenter = line.getRightChiral();\r\n\r\n        let start;\r\n        let end;\r\n        let sStart;\r\n        let sEnd;\r\n\r\n        let shortLine = line.clone();\r\n\r\n        if (isRightChiralCenter) {\r\n            start = r;\r\n            end = l;\r\n\r\n            shortLine.shortenRight(1.0);\r\n\r\n            sStart = shortLine.getRightVector().clone();\r\n            sEnd = shortLine.getLeftVector().clone();\r\n        } else {\r\n            start = l;\r\n            end = r;\r\n\r\n            shortLine.shortenLeft(1.0);\r\n\r\n            sStart = shortLine.getLeftVector().clone();\r\n            sEnd = shortLine.getRightVector().clone();\r\n        }\r\n\r\n        sStart.x += offsetX;\r\n        sStart.y += offsetY;\r\n        sEnd.x += offsetX;\r\n        sEnd.y += offsetY;\r\n\r\n        let dir = Vector2.subtract(end, start).normalize();\r\n        ctx.strokeStyle = this.themeManager.getColor('C');\r\n        ctx.lineCap = 'round';\r\n        ctx.lineWidth = this.opts.bondThickness;\r\n        ctx.beginPath();\r\n        let length = line.getLength();\r\n        let step = 1.25 / (length / (this.opts.bondThickness * 3.0));\r\n\r\n        let changed = false;\r\n        for (var t = 0.0; t < 1.0; t += step) {\r\n            let to = Vector2.multiplyScalar(dir, t * length);\r\n            let startDash = Vector2.add(start, to);\r\n            let width = 1.5 * t;\r\n            let dashOffset = Vector2.multiplyScalar(normals[0], width);\r\n\r\n            if (!changed && t > 0.5) {\r\n              ctx.stroke();\r\n              ctx.beginPath();\r\n              ctx.strokeStyle = this.themeManager.getColor(line.getRightElement()) || this.themeManager.getColor('C');\r\n                changed = true;\r\n            }\r\n            \r\n            startDash.subtract(dashOffset);\r\n            ctx.moveTo(startDash.x, startDash.y);\r\n            startDash.add(Vector2.multiplyScalar(dashOffset, 2.0));\r\n            ctx.lineTo(startDash.x, startDash.y);\r\n        }\r\n\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Draws a debug text message at a given position\r\n     *\r\n     * @param {Number} x The x coordinate.\r\n     * @param {Number} y The y coordinate.\r\n     * @param {String} text The debug text.\r\n     */\r\n    drawDebugText(x, y, text) {\r\n        let ctx = this.ctx;\r\n\r\n        ctx.save();\r\n        ctx.font = '5px Droid Sans, sans-serif';\r\n        ctx.textAlign = 'start';\r\n        ctx.textBaseline = 'top';\r\n        ctx.fillStyle = '#ff0000';\r\n        ctx.fillText(text, x + this.offsetX, y + this.offsetY);\r\n        ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Draw a ball to the canvas.\r\n     *\r\n     * @param {Number} x The x position of the text.\r\n     * @param {Number} y The y position of the text.\r\n     * @param {String} elementName The name of the element (single-letter).\r\n     */\r\n    drawBall(x, y, elementName) {\r\n        let ctx = this.ctx;\r\n\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        ctx.arc(x + this.offsetX, y + this.offsetY, this.opts.bondLength / 4.5, 0, MathHelper.twoPI, false);\r\n        ctx.fillStyle = this.themeManager.getColor(elementName);\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Draw a point to the canvas.\r\n     *\r\n     * @param {Number} x The x position of the point.\r\n     * @param {Number} y The y position of the point.\r\n     * @param {String} elementName The name of the element (single-letter).\r\n     */\r\n    drawPoint(x, y, elementName) {\r\n        let ctx = this.ctx;\r\n        let offsetX = this.offsetX;\r\n        let offsetY = this.offsetY;\r\n\r\n        ctx.save();\r\n        ctx.globalCompositeOperation = 'destination-out';\r\n        ctx.beginPath();\r\n        ctx.arc(x + offsetX, y + offsetY, 1.5, 0, MathHelper.twoPI, true);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n        ctx.globalCompositeOperation = 'source-over';\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(x + this.offsetX, y + this.offsetY, 0.75, 0, MathHelper.twoPI, false);\r\n        ctx.fillStyle = this.themeManager.getColor(elementName);\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Draw a text to the canvas.\r\n     *\r\n     * @param {Number} x The x position of the text.\r\n     * @param {Number} y The y position of the text.\r\n     * @param {String} elementName The name of the element (single-letter).\r\n     * @param {Number} hydrogens The number of hydrogen atoms.\r\n     * @param {String} direction The direction of the text in relation to the associated vertex.\r\n     * @param {Boolean} isTerminal A boolean indicating whether or not the vertex is terminal.\r\n     * @param {Number} charge The charge of the atom.\r\n     * @param {Number} isotope The isotope number.\r\n     * @param {Object} attachedPseudoElement A map with containing information for pseudo elements or concatinated elements. The key is comprised of the element symbol and the hydrogen count.\r\n     * @param {String} attachedPseudoElement.element The element symbol.\r\n     * @param {Number} attachedPseudoElement.count The number of occurences that match the key.\r\n     * @param {Number} attachedPseudoElement.hyrogenCount The number of hydrogens attached to each atom matching the key.\r\n     */\r\n    drawText(x, y, elementName, hydrogens, direction, isTerminal, charge, isotope, attachedPseudoElement = {}) {\r\n        let ctx = this.ctx;\r\n        let offsetX = this.offsetX;\r\n        let offsetY = this.offsetY;\r\n\r\n        ctx.save();\r\n\r\n        ctx.textAlign = 'start';\r\n        ctx.textBaseline = 'alphabetic';\r\n\r\n        let pseudoElementHandled = false;\r\n\r\n        // Charge\r\n        let chargeText = ''\r\n        let chargeWidth = 0;\r\n\r\n        if (charge) {\r\n            chargeText = getChargeText(charge);\r\n\r\n            ctx.font = this.fontSmall;\r\n            chargeWidth = ctx.measureText(chargeText).width;\r\n        }\r\n\r\n        let isotopeText = '0';\r\n        let isotopeWidth = 0;\r\n\r\n        if (isotope > 0) {\r\n            isotopeText = isotope.toString();\r\n            ctx.font = this.fontSmall;\r\n            isotopeWidth = ctx.measureText(isotopeText).width;\r\n        }\r\n\r\n\r\n        // TODO: Better handle exceptions\r\n        // Exception for nitro (draw nitro as NO2 instead of N+O-O)\r\n        if (charge === 1 && elementName === 'N' && attachedPseudoElement.hasOwnProperty('0O') && \r\n            attachedPseudoElement.hasOwnProperty('0O-1')) {\r\n            attachedPseudoElement = { '0O': { element: 'O', count: 2, hydrogenCount: 0, previousElement: 'C', charge: '' } }\r\n            charge = 0;\r\n        }\r\n\r\n\r\n        ctx.font = this.fontLarge;\r\n        ctx.fillStyle = this.themeManager.getColor('BACKGROUND');\r\n\r\n        let dim = ctx.measureText(elementName);\r\n\r\n        dim.totalWidth = dim.width + chargeWidth;\r\n        dim.height = parseInt(this.fontLarge, 10);\r\n\r\n        let r = (dim.width > this.opts.fontSizeLarge) ? dim.width : this.opts.fontSizeLarge;\r\n        r /= 1.5;\r\n\r\n        ctx.globalCompositeOperation = 'destination-out';\r\n        ctx.beginPath();\r\n        ctx.arc(x + offsetX, y + offsetY, r, 0, MathHelper.twoPI, true);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n        ctx.globalCompositeOperation = 'source-over';\r\n\r\n        let cursorPos = -dim.width / 2.0;\r\n        let cursorPosLeft = -dim.width / 2.0;\r\n\r\n        ctx.fillStyle = this.themeManager.getColor(elementName);\r\n        ctx.fillText(elementName, x + offsetX + cursorPos, y + this.opts.halfFontSizeLarge + offsetY);\r\n        cursorPos += dim.width;\r\n\r\n        if (charge) {\r\n            ctx.font = this.fontSmall;\r\n            ctx.fillText(chargeText, x + offsetX + cursorPos, y - this.opts.fifthFontSizeSmall + offsetY);\r\n            cursorPos += chargeWidth;\r\n        }\r\n\r\n        if (isotope > 0) {\r\n            ctx.font = this.fontSmall;\r\n            ctx.fillText(isotopeText, x + offsetX + cursorPosLeft - isotopeWidth, y - this.opts.fifthFontSizeSmall + offsetY);\r\n            cursorPosLeft -= isotopeWidth;\r\n        }\r\n\r\n        ctx.font = this.fontLarge;\r\n\r\n        let hydrogenWidth = 0;\r\n        let hydrogenCountWidth = 0;\r\n\r\n        if (hydrogens === 1) {\r\n            let hx = x + offsetX;\r\n            let hy = y + offsetY + this.opts.halfFontSizeLarge;\r\n\r\n            hydrogenWidth = this.hydrogenWidth;\r\n            cursorPosLeft -= hydrogenWidth;\r\n\r\n            if (direction === 'left') {\r\n                hx += cursorPosLeft;\r\n            } else if (direction === 'right') {\r\n                hx += cursorPos;\r\n            } else if (direction === 'up' && isTerminal) {\r\n                hx += cursorPos;\r\n            } else if (direction === 'down' && isTerminal) {\r\n                hx += cursorPos;\r\n            } else if (direction === 'up' && !isTerminal) {\r\n                hy -= this.opts.fontSizeLarge + this.opts.quarterFontSizeLarge;\r\n                hx -= this.halfHydrogenWidth;\r\n            } else if (direction === 'down' && !isTerminal) {\r\n                hy += this.opts.fontSizeLarge + this.opts.quarterFontSizeLarge;\r\n                hx -= this.halfHydrogenWidth;\r\n            }\r\n\r\n            ctx.fillText('H', hx, hy);\r\n\r\n            cursorPos += hydrogenWidth;\r\n        } else if (hydrogens > 1) {\r\n            let hx = x + offsetX;\r\n            let hy = y + offsetY + this.opts.halfFontSizeLarge;\r\n\r\n            hydrogenWidth = this.hydrogenWidth;\r\n            ctx.font = this.fontSmall;\r\n            hydrogenCountWidth = ctx.measureText(hydrogens).width;\r\n            cursorPosLeft -= hydrogenWidth + hydrogenCountWidth;\r\n\r\n            if (direction === 'left') {\r\n                hx += cursorPosLeft;\r\n            } else if (direction === 'right') {\r\n                hx += cursorPos;\r\n            } else if (direction === 'up' && isTerminal) {\r\n                hx += cursorPos;\r\n            } else if (direction === 'down' && isTerminal) {\r\n                hx += cursorPos;\r\n            } else if (direction === 'up' && !isTerminal) {\r\n                hy -= this.opts.fontSizeLarge + this.opts.quarterFontSizeLarge;\r\n                hx -= this.halfHydrogenWidth;\r\n            } else if (direction === 'down' && !isTerminal) {\r\n                hy += this.opts.fontSizeLarge + this.opts.quarterFontSizeLarge;\r\n                hx -= this.halfHydrogenWidth;\r\n            }\r\n\r\n            ctx.font = this.fontLarge;\r\n            ctx.fillText('H', hx, hy)\r\n\r\n            ctx.font = this.fontSmall;\r\n            ctx.fillText(hydrogens, hx + this.halfHydrogenWidth + hydrogenCountWidth, hy + this.opts.fifthFontSizeSmall);\r\n\r\n            cursorPos += hydrogenWidth + this.halfHydrogenWidth + hydrogenCountWidth;\r\n        }\r\n\r\n        if (pseudoElementHandled) {\r\n            ctx.restore();\r\n            return;\r\n        }\r\n\r\n        for (let key in attachedPseudoElement) {\r\n            if (!attachedPseudoElement.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n\r\n            let openParenthesisWidth = 0;\r\n            let closeParenthesisWidth = 0;\r\n\r\n            let element = attachedPseudoElement[key].element;\r\n            let elementCount = attachedPseudoElement[key].count;\r\n            let hydrogenCount = attachedPseudoElement[key].hydrogenCount;\r\n            let elementCharge = attachedPseudoElement[key].charge;\r\n\r\n            ctx.font = this.fontLarge;\r\n\r\n            if (elementCount > 1 && hydrogenCount > 0) {\r\n                openParenthesisWidth = ctx.measureText('(').width;\r\n                closeParenthesisWidth = ctx.measureText(')').width;\r\n            }\r\n\r\n            let elementWidth = ctx.measureText(element).width;\r\n            let elementCountWidth = 0;\r\n\r\n            let elementChargeText = '';\r\n            let elementChargeWidth = 0;\r\n\r\n            hydrogenWidth = 0;\r\n\r\n            if (hydrogenCount > 0) {\r\n                hydrogenWidth = this.hydrogenWidth;\r\n            }\r\n\r\n            ctx.font = this.fontSmall;\r\n\r\n            if (elementCount > 1) {\r\n                elementCountWidth = ctx.measureText(elementCount).width;\r\n            }\r\n\r\n            if (elementCharge !== 0) {\r\n                elementChargeText = getChargeText(elementCharge);\r\n                elementChargeWidth = ctx.measureText(elementChargeText).width;\r\n            }\r\n\r\n            hydrogenCountWidth = 0;\r\n\r\n            if (hydrogenCount > 1) {\r\n                hydrogenCountWidth = ctx.measureText(hydrogenCount).width;\r\n            }\r\n\r\n            ctx.font = this.fontLarge;\r\n\r\n            let hx = x + offsetX;\r\n            let hy = y + offsetY + this.opts.halfFontSizeLarge;\r\n\r\n            ctx.fillStyle = this.themeManager.getColor(element);\r\n\r\n            if (elementCount > 0) {\r\n                cursorPosLeft -= elementCountWidth;\r\n            }\r\n\r\n            if (elementCount > 1 && hydrogenCount > 0) {\r\n                if (direction === 'left') {\r\n                    cursorPosLeft -= closeParenthesisWidth;\r\n                    ctx.fillText(')', hx + cursorPosLeft, hy);\r\n                } else {\r\n                    ctx.fillText('(', hx + cursorPos, hy);\r\n                    cursorPos += openParenthesisWidth;\r\n                }\r\n            }\r\n\r\n            if (direction === 'left') {\r\n                cursorPosLeft -= elementWidth;\r\n                ctx.fillText(element, hx + cursorPosLeft, hy)\r\n            } else {\r\n                ctx.fillText(element, hx + cursorPos, hy)\r\n                cursorPos += elementWidth;\r\n            }\r\n\r\n            if (hydrogenCount > 0) {\r\n                if (direction === 'left') {\r\n                    cursorPosLeft -= hydrogenWidth + hydrogenCountWidth;\r\n                    ctx.fillText('H', hx + cursorPosLeft, hy)\r\n\r\n                    if (hydrogenCount > 1) {\r\n                        ctx.font = this.fontSmall;\r\n                        ctx.fillText(hydrogenCount, hx + cursorPosLeft + hydrogenWidth, hy + this.opts.fifthFontSizeSmall);\r\n                    }\r\n                } else {\r\n                    ctx.fillText('H', hx + cursorPos, hy)\r\n                    cursorPos += hydrogenWidth;\r\n\r\n                    if (hydrogenCount > 1) {\r\n                        ctx.font = this.fontSmall;\r\n                        ctx.fillText(hydrogenCount, hx + cursorPos, hy + this.opts.fifthFontSizeSmall);\r\n                        cursorPos += hydrogenCountWidth;\r\n                    }\r\n                }\r\n            }\r\n\r\n            ctx.font = this.fontLarge;\r\n\r\n            if (elementCount > 1 && hydrogenCount > 0) {\r\n                if (direction === 'left') {\r\n                    cursorPosLeft -= openParenthesisWidth;\r\n                    ctx.fillText('(', hx + cursorPosLeft, hy);\r\n                } else {\r\n                    ctx.fillText(')', hx + cursorPos, hy);\r\n                    cursorPos += closeParenthesisWidth;\r\n                }\r\n            }\r\n\r\n            ctx.font = this.fontSmall;\r\n\r\n            if (elementCount > 1) {\r\n                if (direction === 'left') {\r\n                    ctx.fillText(elementCount, hx + cursorPosLeft +\r\n                        openParenthesisWidth + closeParenthesisWidth + hydrogenWidth +\r\n                        hydrogenCountWidth + elementWidth, hy + this.opts.fifthFontSizeSmall);\r\n                } else {\r\n                    ctx.fillText(elementCount, hx + cursorPos, hy + this.opts.fifthFontSizeSmall);\r\n                    cursorPos += elementCountWidth;\r\n                }\r\n            }\r\n\r\n            if (elementCharge !== 0) {\r\n                if (direction === 'left') {\r\n                    ctx.fillText(elementChargeText, hx + cursorPosLeft +\r\n                        openParenthesisWidth + closeParenthesisWidth + hydrogenWidth +\r\n                        hydrogenCountWidth + elementWidth, y - this.opts.fifthFontSizeSmall + offsetY);\r\n                } else {\r\n                    ctx.fillText(elementChargeText, hx + cursorPos, y - this.opts.fifthFontSizeSmall + offsetY);\r\n                    cursorPos += elementChargeWidth;\r\n                }\r\n            }\r\n        }\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Translate the integer indicating the charge to the appropriate text.\r\n     * @param {Number} charge The integer indicating the charge.\r\n     * @returns {String} A string representing a charge.\r\n     */\r\n    getChargeText(charge) {\r\n        if (charge === 1) {\r\n            return '+'\r\n        } else if (charge === 2) {\r\n            return '2+';\r\n        } else if (charge === -1) {\r\n            return '-';\r\n        } else if (charge === -2) {\r\n            return '2-';\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws a dubug dot at a given coordinate and adds text.\r\n     *\r\n     * @param {Number} x The x coordinate.\r\n     * @param {Number} y The y coordindate.\r\n     * @param {String} [debugText=''] A string.\r\n     * @param {String} [color='#f00'] A color in hex form.\r\n     */\r\n    drawDebugPoint(x, y, debugText = '', color = '#f00') {\r\n        this.drawCircle(x, y, 2, color, true, true, debugText);\r\n    }\r\n\r\n    /**\r\n     * Draws a ring inside a provided ring, indicating aromaticity.\r\n     *\r\n     * @param {Ring} ring A ring.\r\n     */\r\n    drawAromaticityRing(ring) {\r\n        let ctx = this.ctx;\r\n        let radius = MathHelper.apothemFromSideLength(this.opts.bondLength, ring.getSize());\r\n\r\n        ctx.save();\r\n        ctx.strokeStyle = this.themeManager.getColor('C');\r\n        ctx.lineWidth = this.opts.bondThickness;\r\n        ctx.beginPath();\r\n        ctx.arc(ring.center.x + this.offsetX, ring.center.y + this.offsetY,\r\n            radius - this.opts.bondSpacing, 0, Math.PI * 2, true);\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Clear the canvas.\r\n     *\r\n     */\r\n    clear() {\r\n        this.ctx.clearRect(0, 0, this.canvas.offsetWidth, this.canvas.offsetHeight);\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = CanvasWrapper;"]},"metadata":{},"sourceType":"script"}