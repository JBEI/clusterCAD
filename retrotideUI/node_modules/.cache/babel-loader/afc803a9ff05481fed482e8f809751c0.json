{"ast":null,"code":"var _classCallCheck = require(\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n//@ts-check\nvar ArrayHelper = require('./ArrayHelper');\n\nvar Vertex = require('./Vertex');\n\nvar Ring = require('./Ring');\n/** \r\n * A class representing an atom.\r\n * \r\n * @property {String} element The element symbol of this atom. Single-letter symbols are always uppercase. Examples: H, C, F, Br, Si, ...\r\n * @property {Boolean} drawExplicit A boolean indicating whether or not this atom is drawn explicitly (for example, a carbon atom). This overrides the default behaviour.\r\n * @property {Object[]} ringbonds An array containing the ringbond ids and bond types as specified in the original SMILE.\r\n * @property {String} branchBond The branch bond as defined in the SMILES.\r\n * @property {Number} ringbonds[].id The ringbond id as defined in the SMILES.\r\n * @property {String} ringbonds[].bondType The bond type of the ringbond as defined in the SMILES.\r\n * @property {Number[]} rings The ids of rings which contain this atom.\r\n * @property {String} bondType The bond type associated with this array. Examples: -, =, #, ...\r\n * @property {Boolean} isBridge A boolean indicating whether or not this atom is part of a bridge in a bridged ring (contained by the largest ring).\r\n * @property {Boolean} isBridgeNode A boolean indicating whether or not this atom is a bridge node (a member of the largest ring in a bridged ring which is connected to a bridge-atom).\r\n * @property {Number[]} originalRings Used to back up rings when they are replaced by a bridged ring.\r\n * @property {Number} bridgedRing The id of the bridged ring if the atom is part of a bridged ring.\r\n * @property {Number[]} anchoredRings The ids of the rings that are anchored to this atom. The centers of anchored rings are translated when this atom is translated.\r\n * @property {Object} bracket If this atom is defined as a bracket atom in the original SMILES, this object contains all the bracket information. Example: { hcount: {Number}, charge: ['--', '-', '+', '++'], isotope: {Number} }.\r\n * @property {Number} plane Specifies on which \"plane\" the atoms is in stereochemical deptictions (-1 back, 0 middle, 1 front).\r\n * @property {Object[]} attachedPseudoElements A map with containing information for pseudo elements or concatinated elements. The key is comprised of the element symbol and the hydrogen count.\r\n * @property {String} attachedPseudoElement[].element The element symbol.\r\n * @property {Number} attachedPseudoElement[].count The number of occurences that match the key.\r\n * @property {Number} attachedPseudoElement[].hyrogenCount The number of hydrogens attached to each atom matching the key.\r\n * @property {Boolean} hasAttachedPseudoElements A boolean indicating whether or not this attom will be drawn with an attached pseudo element or concatinated elements.\r\n * @property {Boolean} isDrawn A boolean indicating whether or not this atom is drawn. In contrast to drawExplicit, the bond is drawn neither.\r\n * @property {Boolean} isConnectedToRing A boolean indicating whether or not this atom is directly connected (but not a member of) a ring.\r\n * @property {String[]} neighbouringElements An array containing the element symbols of neighbouring atoms.\r\n * @property {Boolean} isPartOfAromaticRing A boolean indicating whether or not this atom is part of an explicitly defined aromatic ring. Example: c1ccccc1.\r\n * @property {Number} bondCount The number of bonds in which this atom is participating.\r\n * @property {String} chirality The chirality of this atom if it is a stereocenter (R or S).\r\n * @property {Number} priority The priority of this atom acording to the CIP rules, where 0 is the highest priority.\r\n * @property {Boolean} mainChain A boolean indicating whether or not this atom is part of the main chain (used for chirality).\r\n * @property {String} hydrogenDirection The direction of the hydrogen, either up or down. Only for stereocenters with and explicit hydrogen.\r\n * @property {Number} subtreeDepth The depth of the subtree coming from a stereocenter.\r\n */\n\n\nvar Atom = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\r\n   * The constructor of the class Atom.\r\n   *\r\n   * @param {String} element The one-letter code of the element.\r\n   * @param {String} [bondType='-'] The type of the bond associated with this atom.\r\n   */\n  function Atom(element) {\n    var bondType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';\n\n    _classCallCheck(this, Atom);\n\n    this.element = element.length === 1 ? element.toUpperCase() : element;\n    this.drawExplicit = false;\n    this.ringbonds = Array();\n    this.rings = Array();\n    this.bondType = bondType;\n    this.branchBond = null;\n    this.isBridge = false;\n    this.isBridgeNode = false;\n    this.originalRings = Array();\n    this.bridgedRing = null;\n    this.anchoredRings = Array();\n    this.bracket = null;\n    this.plane = 0;\n    this.attachedPseudoElements = {};\n    this.hasAttachedPseudoElements = false;\n    this.isDrawn = true;\n    this.isConnectedToRing = false;\n    this.neighbouringElements = Array();\n    this.isPartOfAromaticRing = element !== this.element;\n    this.bondCount = 0;\n    this.chirality = '';\n    this.isStereoCenter = false;\n    this.priority = 0;\n    this.mainChain = false;\n    this.hydrogenDirection = 'down';\n    this.subtreeDepth = 1;\n    this.hasHydrogen = false;\n  }\n  /**\r\n   * Adds a neighbouring element to this atom.\r\n   * \r\n   * @param {String} element A string representing an element.\r\n   */\n\n\n  _createClass(Atom, [{\n    key: \"addNeighbouringElement\",\n    value: function addNeighbouringElement(element) {\n      this.neighbouringElements.push(element);\n    }\n    /**\r\n     * Attaches a pseudo element (e.g. Ac) to the atom.\r\n     * @param {String} element The element identifier (e.g. Br, C, ...).\r\n     * @param {String} previousElement The element that is part of the main chain (not the terminals that are converted to the pseudo element or concatinated).\r\n     * @param {Number} [hydrogenCount=0] The number of hydrogens for the element.\r\n     * @param {Number} [charge=0] The charge for the element.\r\n     */\n\n  }, {\n    key: \"attachPseudoElement\",\n    value: function attachPseudoElement(element, previousElement) {\n      var hydrogenCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var charge = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n      if (hydrogenCount === null) {\n        hydrogenCount = 0;\n      }\n\n      if (charge === null) {\n        charge = 0;\n      }\n\n      var key = hydrogenCount + element + charge;\n\n      if (this.attachedPseudoElements[key]) {\n        this.attachedPseudoElements[key].count += 1;\n      } else {\n        this.attachedPseudoElements[key] = {\n          element: element,\n          count: 1,\n          hydrogenCount: hydrogenCount,\n          previousElement: previousElement,\n          charge: charge\n        };\n      }\n\n      this.hasAttachedPseudoElements = true;\n    }\n    /**\r\n     * Returns the attached pseudo elements sorted by hydrogen count (ascending).\r\n     *\r\n     * @returns {Object} The sorted attached pseudo elements.\r\n     */\n\n  }, {\n    key: \"getAttachedPseudoElements\",\n    value: function getAttachedPseudoElements() {\n      var ordered = {};\n      var that = this;\n      Object.keys(this.attachedPseudoElements).sort().forEach(function (key) {\n        ordered[key] = that.attachedPseudoElements[key];\n      });\n      return ordered;\n    }\n    /**\r\n     * Returns the number of attached pseudo elements.\r\n     *\r\n     * @returns {Number} The number of attached pseudo elements.\r\n     */\n\n  }, {\n    key: \"getAttachedPseudoElementsCount\",\n    value: function getAttachedPseudoElementsCount() {\n      return Object.keys(this.attachedPseudoElements).length;\n    }\n    /**\r\n     * Returns whether this atom is a heteroatom (not C and not H).\r\n     *\r\n     * @returns {Boolean} A boolean indicating whether this atom is a heteroatom.\r\n     */\n\n  }, {\n    key: \"isHeteroAtom\",\n    value: function isHeteroAtom() {\n      return this.element !== 'C' && this.element !== 'H';\n    }\n    /**\r\n     * Defines this atom as the anchor for a ring. When doing repositionings of the vertices and the vertex associated with this atom is moved, the center of this ring is moved as well.\r\n     *\r\n     * @param {Number} ringId A ring id.\r\n     */\n\n  }, {\n    key: \"addAnchoredRing\",\n    value: function addAnchoredRing(ringId) {\n      if (!ArrayHelper.contains(this.anchoredRings, {\n        value: ringId\n      })) {\n        this.anchoredRings.push(ringId);\n      }\n    }\n    /**\r\n     * Returns the number of ringbonds (breaks in rings to generate the MST of the smiles) within this atom is connected to.\r\n     *\r\n     * @returns {Number} The number of ringbonds this atom is connected to.\r\n     */\n\n  }, {\n    key: \"getRingbondCount\",\n    value: function getRingbondCount() {\n      return this.ringbonds.length;\n    }\n    /**\r\n     * Backs up the current rings.\r\n     */\n\n  }, {\n    key: \"backupRings\",\n    value: function backupRings() {\n      this.originalRings = Array(this.rings.length);\n\n      for (var i = 0; i < this.rings.length; i++) {\n        this.originalRings[i] = this.rings[i];\n      }\n    }\n    /**\r\n     * Restores the most recent backed up rings.\r\n     */\n\n  }, {\n    key: \"restoreRings\",\n    value: function restoreRings() {\n      this.rings = Array(this.originalRings.length);\n\n      for (var i = 0; i < this.originalRings.length; i++) {\n        this.rings[i] = this.originalRings[i];\n      }\n    }\n    /**\r\n     * Checks whether or not two atoms share a common ringbond id. A ringbond is a break in a ring created when generating the spanning tree of a structure.\r\n     *\r\n     * @param {Atom} atomA An atom.\r\n     * @param {Atom} atomB An atom.\r\n     * @returns {Boolean} A boolean indicating whether or not two atoms share a common ringbond.\r\n     */\n\n  }, {\n    key: \"haveCommonRingbond\",\n    value: function haveCommonRingbond(atomA, atomB) {\n      for (var i = 0; i < atomA.ringbonds.length; i++) {\n        for (var j = 0; j < atomB.ringbonds.length; j++) {\n          if (atomA.ringbonds[i].id == atomB.ringbonds[j].id) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n    /**\r\n     * Check whether or not the neighbouring elements of this atom equal the supplied array.\r\n     * \r\n     * @param {String[]} arr An array containing all the elements that are neighbouring this atom. E.g. ['C', 'O', 'O', 'N']\r\n     * @returns {Boolean} A boolean indicating whether or not the neighbours match the supplied array of elements.\r\n     */\n\n  }, {\n    key: \"neighbouringElementsEqual\",\n    value: function neighbouringElementsEqual(arr) {\n      if (arr.length !== this.neighbouringElements.length) {\n        return false;\n      }\n\n      arr.sort();\n      this.neighbouringElements.sort();\n\n      for (var i = 0; i < this.neighbouringElements.length; i++) {\n        if (arr[i] !== this.neighbouringElements[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    /**\r\n     * Get the atomic number of this atom.\r\n     * \r\n     * @returns {Number} The atomic number of this atom.\r\n     */\n\n  }, {\n    key: \"getAtomicNumber\",\n    value: function getAtomicNumber() {\n      return Atom.atomicNumbers[this.element];\n    }\n    /**\r\n     * Get the maximum number of bonds for this atom.\r\n     * \r\n     * @returns {Number} The maximum number of bonds of this atom.\r\n     */\n\n  }, {\n    key: \"getMaxBonds\",\n    value: function getMaxBonds() {\n      return Atom.maxBonds[this.element];\n    }\n    /**\r\n     * A map mapping element symbols to their maximum bonds.\r\n     */\n\n  }], [{\n    key: \"maxBonds\",\n    get: function get() {\n      return {\n        'H': 1,\n        'C': 4,\n        'N': 3,\n        'O': 2,\n        'P': 3,\n        'S': 2,\n        'B': 3,\n        'F': 1,\n        'I': 1,\n        'Cl': 1,\n        'Br': 1\n      };\n    }\n    /**\r\n     * A map mapping element symbols to the atomic number.\r\n     */\n\n  }, {\n    key: \"atomicNumbers\",\n    get: function get() {\n      return {\n        'H': 1,\n        'He': 2,\n        'Li': 3,\n        'Be': 4,\n        'B': 5,\n        'b': 5,\n        'C': 6,\n        'c': 6,\n        'N': 7,\n        'n': 7,\n        'O': 8,\n        'o': 8,\n        'F': 9,\n        'Ne': 10,\n        'Na': 11,\n        'Mg': 12,\n        'Al': 13,\n        'Si': 14,\n        'P': 15,\n        'p': 15,\n        'S': 16,\n        's': 16,\n        'Cl': 17,\n        'Ar': 18,\n        'K': 19,\n        'Ca': 20,\n        'Sc': 21,\n        'Ti': 22,\n        'V': 23,\n        'Cr': 24,\n        'Mn': 25,\n        'Fe': 26,\n        'Co': 27,\n        'Ni': 28,\n        'Cu': 29,\n        'Zn': 30,\n        'Ga': 31,\n        'Ge': 32,\n        'As': 33,\n        'Se': 34,\n        'Br': 35,\n        'Kr': 36,\n        'Rb': 37,\n        'Sr': 38,\n        'Y': 39,\n        'Zr': 40,\n        'Nb': 41,\n        'Mo': 42,\n        'Tc': 43,\n        'Ru': 44,\n        'Rh': 45,\n        'Pd': 46,\n        'Ag': 47,\n        'Cd': 48,\n        'In': 49,\n        'Sn': 50,\n        'Sb': 51,\n        'Te': 52,\n        'I': 53,\n        'Xe': 54,\n        'Cs': 55,\n        'Ba': 56,\n        'La': 57,\n        'Ce': 58,\n        'Pr': 59,\n        'Nd': 60,\n        'Pm': 61,\n        'Sm': 62,\n        'Eu': 63,\n        'Gd': 64,\n        'Tb': 65,\n        'Dy': 66,\n        'Ho': 67,\n        'Er': 68,\n        'Tm': 69,\n        'Yb': 70,\n        'Lu': 71,\n        'Hf': 72,\n        'Ta': 73,\n        'W': 74,\n        'Re': 75,\n        'Os': 76,\n        'Ir': 77,\n        'Pt': 78,\n        'Au': 79,\n        'Hg': 80,\n        'Tl': 81,\n        'Pb': 82,\n        'Bi': 83,\n        'Po': 84,\n        'At': 85,\n        'Rn': 86,\n        'Fr': 87,\n        'Ra': 88,\n        'Ac': 89,\n        'Th': 90,\n        'Pa': 91,\n        'U': 92,\n        'Np': 93,\n        'Pu': 94,\n        'Am': 95,\n        'Cm': 96,\n        'Bk': 97,\n        'Cf': 98,\n        'Es': 99,\n        'Fm': 100,\n        'Md': 101,\n        'No': 102,\n        'Lr': 103,\n        'Rf': 104,\n        'Db': 105,\n        'Sg': 106,\n        'Bh': 107,\n        'Hs': 108,\n        'Mt': 109,\n        'Ds': 110,\n        'Rg': 111,\n        'Cn': 112,\n        'Uut': 113,\n        'Uuq': 114,\n        'Uup': 115,\n        'Uuh': 116,\n        'Uus': 117,\n        'Uuo': 118\n      };\n    }\n    /**\r\n     * A map mapping element symbols to the atomic mass.\r\n     */\n\n  }, {\n    key: \"mass\",\n    get: function get() {\n      return {\n        'H': 1,\n        'He': 2,\n        'Li': 3,\n        'Be': 4,\n        'B': 5,\n        'b': 5,\n        'C': 6,\n        'c': 6,\n        'N': 7,\n        'n': 7,\n        'O': 8,\n        'o': 8,\n        'F': 9,\n        'Ne': 10,\n        'Na': 11,\n        'Mg': 12,\n        'Al': 13,\n        'Si': 14,\n        'P': 15,\n        'p': 15,\n        'S': 16,\n        's': 16,\n        'Cl': 17,\n        'Ar': 18,\n        'K': 19,\n        'Ca': 20,\n        'Sc': 21,\n        'Ti': 22,\n        'V': 23,\n        'Cr': 24,\n        'Mn': 25,\n        'Fe': 26,\n        'Co': 27,\n        'Ni': 28,\n        'Cu': 29,\n        'Zn': 30,\n        'Ga': 31,\n        'Ge': 32,\n        'As': 33,\n        'Se': 34,\n        'Br': 35,\n        'Kr': 36,\n        'Rb': 37,\n        'Sr': 38,\n        'Y': 39,\n        'Zr': 40,\n        'Nb': 41,\n        'Mo': 42,\n        'Tc': 43,\n        'Ru': 44,\n        'Rh': 45,\n        'Pd': 46,\n        'Ag': 47,\n        'Cd': 48,\n        'In': 49,\n        'Sn': 50,\n        'Sb': 51,\n        'Te': 52,\n        'I': 53,\n        'Xe': 54,\n        'Cs': 55,\n        'Ba': 56,\n        'La': 57,\n        'Ce': 58,\n        'Pr': 59,\n        'Nd': 60,\n        'Pm': 61,\n        'Sm': 62,\n        'Eu': 63,\n        'Gd': 64,\n        'Tb': 65,\n        'Dy': 66,\n        'Ho': 67,\n        'Er': 68,\n        'Tm': 69,\n        'Yb': 70,\n        'Lu': 71,\n        'Hf': 72,\n        'Ta': 73,\n        'W': 74,\n        'Re': 75,\n        'Os': 76,\n        'Ir': 77,\n        'Pt': 78,\n        'Au': 79,\n        'Hg': 80,\n        'Tl': 81,\n        'Pb': 82,\n        'Bi': 83,\n        'Po': 84,\n        'At': 85,\n        'Rn': 86,\n        'Fr': 87,\n        'Ra': 88,\n        'Ac': 89,\n        'Th': 90,\n        'Pa': 91,\n        'U': 92,\n        'Np': 93,\n        'Pu': 94,\n        'Am': 95,\n        'Cm': 96,\n        'Bk': 97,\n        'Cf': 98,\n        'Es': 99,\n        'Fm': 100,\n        'Md': 101,\n        'No': 102,\n        'Lr': 103,\n        'Rf': 104,\n        'Db': 105,\n        'Sg': 106,\n        'Bh': 107,\n        'Hs': 108,\n        'Mt': 109,\n        'Ds': 110,\n        'Rg': 111,\n        'Cn': 112,\n        'Uut': 113,\n        'Uuq': 114,\n        'Uup': 115,\n        'Uuh': 116,\n        'Uus': 117,\n        'Uuo': 118\n      };\n    }\n  }]);\n\n  return Atom;\n}();\n\nmodule.exports = Atom;","map":{"version":3,"sources":["/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/smiles-drawer/src/Atom.js"],"names":["ArrayHelper","require","Vertex","Ring","Atom","element","bondType","length","toUpperCase","drawExplicit","ringbonds","Array","rings","branchBond","isBridge","isBridgeNode","originalRings","bridgedRing","anchoredRings","bracket","plane","attachedPseudoElements","hasAttachedPseudoElements","isDrawn","isConnectedToRing","neighbouringElements","isPartOfAromaticRing","bondCount","chirality","isStereoCenter","priority","mainChain","hydrogenDirection","subtreeDepth","hasHydrogen","push","previousElement","hydrogenCount","charge","key","count","ordered","that","Object","keys","sort","forEach","ringId","contains","value","i","atomA","atomB","j","id","arr","atomicNumbers","maxBonds","module","exports"],"mappings":"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","sourcesContent":["//@ts-check\r\nconst ArrayHelper = require('./ArrayHelper')\r\nconst Vertex = require('./Vertex')\r\nconst Ring = require('./Ring')\r\n\r\n/** \r\n * A class representing an atom.\r\n * \r\n * @property {String} element The element symbol of this atom. Single-letter symbols are always uppercase. Examples: H, C, F, Br, Si, ...\r\n * @property {Boolean} drawExplicit A boolean indicating whether or not this atom is drawn explicitly (for example, a carbon atom). This overrides the default behaviour.\r\n * @property {Object[]} ringbonds An array containing the ringbond ids and bond types as specified in the original SMILE.\r\n * @property {String} branchBond The branch bond as defined in the SMILES.\r\n * @property {Number} ringbonds[].id The ringbond id as defined in the SMILES.\r\n * @property {String} ringbonds[].bondType The bond type of the ringbond as defined in the SMILES.\r\n * @property {Number[]} rings The ids of rings which contain this atom.\r\n * @property {String} bondType The bond type associated with this array. Examples: -, =, #, ...\r\n * @property {Boolean} isBridge A boolean indicating whether or not this atom is part of a bridge in a bridged ring (contained by the largest ring).\r\n * @property {Boolean} isBridgeNode A boolean indicating whether or not this atom is a bridge node (a member of the largest ring in a bridged ring which is connected to a bridge-atom).\r\n * @property {Number[]} originalRings Used to back up rings when they are replaced by a bridged ring.\r\n * @property {Number} bridgedRing The id of the bridged ring if the atom is part of a bridged ring.\r\n * @property {Number[]} anchoredRings The ids of the rings that are anchored to this atom. The centers of anchored rings are translated when this atom is translated.\r\n * @property {Object} bracket If this atom is defined as a bracket atom in the original SMILES, this object contains all the bracket information. Example: { hcount: {Number}, charge: ['--', '-', '+', '++'], isotope: {Number} }.\r\n * @property {Number} plane Specifies on which \"plane\" the atoms is in stereochemical deptictions (-1 back, 0 middle, 1 front).\r\n * @property {Object[]} attachedPseudoElements A map with containing information for pseudo elements or concatinated elements. The key is comprised of the element symbol and the hydrogen count.\r\n * @property {String} attachedPseudoElement[].element The element symbol.\r\n * @property {Number} attachedPseudoElement[].count The number of occurences that match the key.\r\n * @property {Number} attachedPseudoElement[].hyrogenCount The number of hydrogens attached to each atom matching the key.\r\n * @property {Boolean} hasAttachedPseudoElements A boolean indicating whether or not this attom will be drawn with an attached pseudo element or concatinated elements.\r\n * @property {Boolean} isDrawn A boolean indicating whether or not this atom is drawn. In contrast to drawExplicit, the bond is drawn neither.\r\n * @property {Boolean} isConnectedToRing A boolean indicating whether or not this atom is directly connected (but not a member of) a ring.\r\n * @property {String[]} neighbouringElements An array containing the element symbols of neighbouring atoms.\r\n * @property {Boolean} isPartOfAromaticRing A boolean indicating whether or not this atom is part of an explicitly defined aromatic ring. Example: c1ccccc1.\r\n * @property {Number} bondCount The number of bonds in which this atom is participating.\r\n * @property {String} chirality The chirality of this atom if it is a stereocenter (R or S).\r\n * @property {Number} priority The priority of this atom acording to the CIP rules, where 0 is the highest priority.\r\n * @property {Boolean} mainChain A boolean indicating whether or not this atom is part of the main chain (used for chirality).\r\n * @property {String} hydrogenDirection The direction of the hydrogen, either up or down. Only for stereocenters with and explicit hydrogen.\r\n * @property {Number} subtreeDepth The depth of the subtree coming from a stereocenter.\r\n */\r\nclass Atom {\r\n  /**\r\n   * The constructor of the class Atom.\r\n   *\r\n   * @param {String} element The one-letter code of the element.\r\n   * @param {String} [bondType='-'] The type of the bond associated with this atom.\r\n   */\r\n  constructor(element, bondType = '-') {\r\n    this.element = element.length === 1 ? element.toUpperCase() : element;\r\n    this.drawExplicit = false;\r\n    this.ringbonds = Array();\r\n    this.rings = Array();\r\n    this.bondType = bondType;\r\n    this.branchBond = null;\r\n    this.isBridge = false;\r\n    this.isBridgeNode = false;\r\n    this.originalRings = Array();\r\n    this.bridgedRing = null;\r\n    this.anchoredRings = Array();\r\n    this.bracket = null;\r\n    this.plane = 0;\r\n    this.attachedPseudoElements = {};\r\n    this.hasAttachedPseudoElements = false;\r\n    this.isDrawn = true;\r\n    this.isConnectedToRing = false;\r\n    this.neighbouringElements = Array();\r\n    this.isPartOfAromaticRing = element !== this.element;\r\n    this.bondCount = 0;\r\n    this.chirality = '';\r\n    this.isStereoCenter = false;\r\n    this.priority = 0;\r\n    this.mainChain = false;\r\n    this.hydrogenDirection = 'down';\r\n    this.subtreeDepth = 1;\r\n    this.hasHydrogen = false;\r\n  }\r\n\r\n  /**\r\n   * Adds a neighbouring element to this atom.\r\n   * \r\n   * @param {String} element A string representing an element.\r\n   */\r\n  addNeighbouringElement(element) {\r\n    this.neighbouringElements.push(element);\r\n  }\r\n\r\n  /**\r\n   * Attaches a pseudo element (e.g. Ac) to the atom.\r\n   * @param {String} element The element identifier (e.g. Br, C, ...).\r\n   * @param {String} previousElement The element that is part of the main chain (not the terminals that are converted to the pseudo element or concatinated).\r\n   * @param {Number} [hydrogenCount=0] The number of hydrogens for the element.\r\n   * @param {Number} [charge=0] The charge for the element.\r\n   */\r\n  attachPseudoElement(element, previousElement, hydrogenCount = 0, charge = 0) {\r\n    if (hydrogenCount === null) {\r\n      hydrogenCount = 0;\r\n    }\r\n\r\n    if (charge === null) {\r\n      charge = 0;\r\n    }\r\n\r\n    let key = hydrogenCount + element + charge;\r\n\r\n    if (this.attachedPseudoElements[key]) {\r\n      this.attachedPseudoElements[key].count += 1;\r\n    } else {\r\n      this.attachedPseudoElements[key] = {\r\n        element: element,\r\n        count: 1,\r\n        hydrogenCount: hydrogenCount,\r\n        previousElement: previousElement,\r\n        charge: charge\r\n      };\r\n    }\r\n\r\n    this.hasAttachedPseudoElements = true;\r\n  }\r\n\r\n  /**\r\n   * Returns the attached pseudo elements sorted by hydrogen count (ascending).\r\n   *\r\n   * @returns {Object} The sorted attached pseudo elements.\r\n   */\r\n  getAttachedPseudoElements() {\r\n    let ordered = {};\r\n    let that = this;\r\n\r\n    Object.keys(this.attachedPseudoElements).sort().forEach(function (key) {\r\n      ordered[key] = that.attachedPseudoElements[key];\r\n    });\r\n\r\n    return ordered;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of attached pseudo elements.\r\n   *\r\n   * @returns {Number} The number of attached pseudo elements.\r\n   */\r\n  getAttachedPseudoElementsCount() {\r\n    return Object.keys(this.attachedPseudoElements).length;\r\n  }\r\n\r\n  /**\r\n   * Returns whether this atom is a heteroatom (not C and not H).\r\n   *\r\n   * @returns {Boolean} A boolean indicating whether this atom is a heteroatom.\r\n   */\r\n  isHeteroAtom() {\r\n    return this.element !== 'C' && this.element !== 'H';\r\n  }\r\n\r\n  /**\r\n   * Defines this atom as the anchor for a ring. When doing repositionings of the vertices and the vertex associated with this atom is moved, the center of this ring is moved as well.\r\n   *\r\n   * @param {Number} ringId A ring id.\r\n   */\r\n  addAnchoredRing(ringId) {\r\n    if (!ArrayHelper.contains(this.anchoredRings, {\r\n        value: ringId\r\n      })) {\r\n      this.anchoredRings.push(ringId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the number of ringbonds (breaks in rings to generate the MST of the smiles) within this atom is connected to.\r\n   *\r\n   * @returns {Number} The number of ringbonds this atom is connected to.\r\n   */\r\n  getRingbondCount() {\r\n    return this.ringbonds.length;\r\n  }\r\n\r\n  /**\r\n   * Backs up the current rings.\r\n   */\r\n  backupRings() {\r\n    this.originalRings = Array(this.rings.length);\r\n\r\n    for (let i = 0; i < this.rings.length; i++) {\r\n      this.originalRings[i] = this.rings[i];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restores the most recent backed up rings.\r\n   */\r\n  restoreRings() {\r\n    this.rings = Array(this.originalRings.length);\r\n\r\n    for (let i = 0; i < this.originalRings.length; i++) {\r\n      this.rings[i] = this.originalRings[i];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks whether or not two atoms share a common ringbond id. A ringbond is a break in a ring created when generating the spanning tree of a structure.\r\n   *\r\n   * @param {Atom} atomA An atom.\r\n   * @param {Atom} atomB An atom.\r\n   * @returns {Boolean} A boolean indicating whether or not two atoms share a common ringbond.\r\n   */\r\n  haveCommonRingbond(atomA, atomB) {\r\n    for (let i = 0; i < atomA.ringbonds.length; i++) {\r\n      for (let j = 0; j < atomB.ringbonds.length; j++) {\r\n        if (atomA.ringbonds[i].id == atomB.ringbonds[j].id) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Check whether or not the neighbouring elements of this atom equal the supplied array.\r\n   * \r\n   * @param {String[]} arr An array containing all the elements that are neighbouring this atom. E.g. ['C', 'O', 'O', 'N']\r\n   * @returns {Boolean} A boolean indicating whether or not the neighbours match the supplied array of elements.\r\n   */\r\n  neighbouringElementsEqual(arr) {\r\n    if (arr.length !== this.neighbouringElements.length) {\r\n      return false;\r\n    }\r\n\r\n    arr.sort();\r\n    this.neighbouringElements.sort();\r\n\r\n    for (var i = 0; i < this.neighbouringElements.length; i++) {\r\n      if (arr[i] !== this.neighbouringElements[i]) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get the atomic number of this atom.\r\n   * \r\n   * @returns {Number} The atomic number of this atom.\r\n   */\r\n  getAtomicNumber() {\r\n    return Atom.atomicNumbers[this.element];\r\n  }\r\n\r\n  /**\r\n   * Get the maximum number of bonds for this atom.\r\n   * \r\n   * @returns {Number} The maximum number of bonds of this atom.\r\n   */\r\n  getMaxBonds() {\r\n    return Atom.maxBonds[this.element];\r\n  }\r\n\r\n  /**\r\n   * A map mapping element symbols to their maximum bonds.\r\n   */\r\n  static get maxBonds() {\r\n    return {\r\n      'H': 1,\r\n      'C': 4,\r\n      'N': 3,\r\n      'O': 2,\r\n      'P': 3,\r\n      'S': 2,\r\n      'B': 3,\r\n      'F': 1,\r\n      'I': 1,\r\n      'Cl': 1,\r\n      'Br': 1\r\n    };\r\n  }\r\n\r\n  /**\r\n   * A map mapping element symbols to the atomic number.\r\n   */\r\n  static get atomicNumbers() {\r\n    return {\r\n      'H': 1,\r\n      'He': 2,\r\n      'Li': 3,\r\n      'Be': 4,\r\n      'B': 5,\r\n      'b': 5,\r\n      'C': 6,\r\n      'c': 6,\r\n      'N': 7,\r\n      'n': 7,\r\n      'O': 8,\r\n      'o': 8,\r\n      'F': 9,\r\n      'Ne': 10,\r\n      'Na': 11,\r\n      'Mg': 12,\r\n      'Al': 13,\r\n      'Si': 14,\r\n      'P': 15,\r\n      'p': 15,\r\n      'S': 16,\r\n      's': 16,\r\n      'Cl': 17,\r\n      'Ar': 18,\r\n      'K': 19,\r\n      'Ca': 20,\r\n      'Sc': 21,\r\n      'Ti': 22,\r\n      'V': 23,\r\n      'Cr': 24,\r\n      'Mn': 25,\r\n      'Fe': 26,\r\n      'Co': 27,\r\n      'Ni': 28,\r\n      'Cu': 29,\r\n      'Zn': 30,\r\n      'Ga': 31,\r\n      'Ge': 32,\r\n      'As': 33,\r\n      'Se': 34,\r\n      'Br': 35,\r\n      'Kr': 36,\r\n      'Rb': 37,\r\n      'Sr': 38,\r\n      'Y': 39,\r\n      'Zr': 40,\r\n      'Nb': 41,\r\n      'Mo': 42,\r\n      'Tc': 43,\r\n      'Ru': 44,\r\n      'Rh': 45,\r\n      'Pd': 46,\r\n      'Ag': 47,\r\n      'Cd': 48,\r\n      'In': 49,\r\n      'Sn': 50,\r\n      'Sb': 51,\r\n      'Te': 52,\r\n      'I': 53,\r\n      'Xe': 54,\r\n      'Cs': 55,\r\n      'Ba': 56,\r\n      'La': 57,\r\n      'Ce': 58,\r\n      'Pr': 59,\r\n      'Nd': 60,\r\n      'Pm': 61,\r\n      'Sm': 62,\r\n      'Eu': 63,\r\n      'Gd': 64,\r\n      'Tb': 65,\r\n      'Dy': 66,\r\n      'Ho': 67,\r\n      'Er': 68,\r\n      'Tm': 69,\r\n      'Yb': 70,\r\n      'Lu': 71,\r\n      'Hf': 72,\r\n      'Ta': 73,\r\n      'W': 74,\r\n      'Re': 75,\r\n      'Os': 76,\r\n      'Ir': 77,\r\n      'Pt': 78,\r\n      'Au': 79,\r\n      'Hg': 80,\r\n      'Tl': 81,\r\n      'Pb': 82,\r\n      'Bi': 83,\r\n      'Po': 84,\r\n      'At': 85,\r\n      'Rn': 86,\r\n      'Fr': 87,\r\n      'Ra': 88,\r\n      'Ac': 89,\r\n      'Th': 90,\r\n      'Pa': 91,\r\n      'U': 92,\r\n      'Np': 93,\r\n      'Pu': 94,\r\n      'Am': 95,\r\n      'Cm': 96,\r\n      'Bk': 97,\r\n      'Cf': 98,\r\n      'Es': 99,\r\n      'Fm': 100,\r\n      'Md': 101,\r\n      'No': 102,\r\n      'Lr': 103,\r\n      'Rf': 104,\r\n      'Db': 105,\r\n      'Sg': 106,\r\n      'Bh': 107,\r\n      'Hs': 108,\r\n      'Mt': 109,\r\n      'Ds': 110,\r\n      'Rg': 111,\r\n      'Cn': 112,\r\n      'Uut': 113,\r\n      'Uuq': 114,\r\n      'Uup': 115,\r\n      'Uuh': 116,\r\n      'Uus': 117,\r\n      'Uuo': 118\r\n    };\r\n  }\r\n\r\n  /**\r\n   * A map mapping element symbols to the atomic mass.\r\n   */\r\n  static get mass() {\r\n    return {\r\n      'H': 1,\r\n      'He': 2,\r\n      'Li': 3,\r\n      'Be': 4,\r\n      'B': 5,\r\n      'b': 5,\r\n      'C': 6,\r\n      'c': 6,\r\n      'N': 7,\r\n      'n': 7,\r\n      'O': 8,\r\n      'o': 8,\r\n      'F': 9,\r\n      'Ne': 10,\r\n      'Na': 11,\r\n      'Mg': 12,\r\n      'Al': 13,\r\n      'Si': 14,\r\n      'P': 15,\r\n      'p': 15,\r\n      'S': 16,\r\n      's': 16,\r\n      'Cl': 17,\r\n      'Ar': 18,\r\n      'K': 19,\r\n      'Ca': 20,\r\n      'Sc': 21,\r\n      'Ti': 22,\r\n      'V': 23,\r\n      'Cr': 24,\r\n      'Mn': 25,\r\n      'Fe': 26,\r\n      'Co': 27,\r\n      'Ni': 28,\r\n      'Cu': 29,\r\n      'Zn': 30,\r\n      'Ga': 31,\r\n      'Ge': 32,\r\n      'As': 33,\r\n      'Se': 34,\r\n      'Br': 35,\r\n      'Kr': 36,\r\n      'Rb': 37,\r\n      'Sr': 38,\r\n      'Y': 39,\r\n      'Zr': 40,\r\n      'Nb': 41,\r\n      'Mo': 42,\r\n      'Tc': 43,\r\n      'Ru': 44,\r\n      'Rh': 45,\r\n      'Pd': 46,\r\n      'Ag': 47,\r\n      'Cd': 48,\r\n      'In': 49,\r\n      'Sn': 50,\r\n      'Sb': 51,\r\n      'Te': 52,\r\n      'I': 53,\r\n      'Xe': 54,\r\n      'Cs': 55,\r\n      'Ba': 56,\r\n      'La': 57,\r\n      'Ce': 58,\r\n      'Pr': 59,\r\n      'Nd': 60,\r\n      'Pm': 61,\r\n      'Sm': 62,\r\n      'Eu': 63,\r\n      'Gd': 64,\r\n      'Tb': 65,\r\n      'Dy': 66,\r\n      'Ho': 67,\r\n      'Er': 68,\r\n      'Tm': 69,\r\n      'Yb': 70,\r\n      'Lu': 71,\r\n      'Hf': 72,\r\n      'Ta': 73,\r\n      'W': 74,\r\n      'Re': 75,\r\n      'Os': 76,\r\n      'Ir': 77,\r\n      'Pt': 78,\r\n      'Au': 79,\r\n      'Hg': 80,\r\n      'Tl': 81,\r\n      'Pb': 82,\r\n      'Bi': 83,\r\n      'Po': 84,\r\n      'At': 85,\r\n      'Rn': 86,\r\n      'Fr': 87,\r\n      'Ra': 88,\r\n      'Ac': 89,\r\n      'Th': 90,\r\n      'Pa': 91,\r\n      'U': 92,\r\n      'Np': 93,\r\n      'Pu': 94,\r\n      'Am': 95,\r\n      'Cm': 96,\r\n      'Bk': 97,\r\n      'Cf': 98,\r\n      'Es': 99,\r\n      'Fm': 100,\r\n      'Md': 101,\r\n      'No': 102,\r\n      'Lr': 103,\r\n      'Rf': 104,\r\n      'Db': 105,\r\n      'Sg': 106,\r\n      'Bh': 107,\r\n      'Hs': 108,\r\n      'Mt': 109,\r\n      'Ds': 110,\r\n      'Rg': 111,\r\n      'Cn': 112,\r\n      'Uut': 113,\r\n      'Uuq': 114,\r\n      'Uup': 115,\r\n      'Uuh': 116,\r\n      'Uus': 117,\r\n      'Uuo': 118\r\n    };\r\n  }\r\n}\r\n\r\nmodule.exports = Atom;"]},"metadata":{},"sourceType":"script"}