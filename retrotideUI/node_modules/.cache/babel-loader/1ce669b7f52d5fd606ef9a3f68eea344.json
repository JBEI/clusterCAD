{"ast":null,"code":"var _classCallCheck = require(\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar ThemeManager = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function ThemeManager(colors, theme) {\n    _classCallCheck(this, ThemeManager);\n\n    this.colors = colors;\n    this.theme = this.colors[theme];\n  }\n  /**\r\n   * Returns the hex code of a color associated with a key from the current theme.\r\n   *\r\n   * @param {String} key The color key in the theme (e.g. C, N, BACKGROUND, ...).\r\n   * @returns {String} A color hex value.\r\n   */\n\n\n  _createClass(ThemeManager, [{\n    key: \"getColor\",\n    value: function getColor(key) {\n      if (key) {\n        key = key.toUpperCase();\n\n        if (key in this.theme) {\n          return this.theme[key];\n        }\n      }\n\n      return this.theme['C'];\n    }\n    /**\r\n     * Sets the theme to the specified string if it exists. If it does not, this\r\n     * does nothing.\r\n     *\r\n     * @param {String} theme the name of the theme to switch to\r\n     */\n\n  }, {\n    key: \"setTheme\",\n    value: function setTheme(theme) {\n      if (this.colors.hasOwnProperty(theme)) {\n        this.theme = this.colors[theme];\n      } // TODO: this probably should notify those who are watching this theme\n      // manager that the theme has changed so that colors can be changed\n      // on the fly\n\n    }\n  }]);\n\n  return ThemeManager;\n}();\n\nmodule.exports = ThemeManager;","map":{"version":3,"sources":["/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/smiles-drawer/src/ThemeManager.js"],"names":["ThemeManager","colors","theme","key","toUpperCase","hasOwnProperty","module","exports"],"mappings":";;;;IAAMA,Y;;;AACJ,wBAAYC,MAAZ,EAAoBC,KAApB,EAA2B;AAAA;;AACzB,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAa,KAAKD,MAAL,CAAYC,KAAZ,CAAb;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;;WACE,kBAASC,GAAT,EAAc;AACZ,UAAIA,GAAJ,EAAS;AACPA,QAAAA,GAAG,GAAGA,GAAG,CAACC,WAAJ,EAAN;;AAEA,YAAID,GAAG,IAAI,KAAKD,KAAhB,EAAuB;AACrB,iBAAO,KAAKA,KAAL,CAAWC,GAAX,CAAP;AACD;AACF;;AAED,aAAO,KAAKD,KAAL,CAAW,GAAX,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,kBAASA,KAAT,EAAgB;AACd,UAAI,KAAKD,MAAL,CAAYI,cAAZ,CAA2BH,KAA3B,CAAJ,EAAuC;AACrC,aAAKA,KAAL,GAAa,KAAKD,MAAL,CAAYC,KAAZ,CAAb;AACD,OAHa,CAKd;AACA;AACA;;AACD;;;;;;AAGHI,MAAM,CAACC,OAAP,GAAiBP,YAAjB","sourcesContent":["class ThemeManager {\r\n  constructor(colors, theme) {\r\n    this.colors = colors;\r\n    this.theme = this.colors[theme];\r\n  }\r\n\r\n  /**\r\n   * Returns the hex code of a color associated with a key from the current theme.\r\n   *\r\n   * @param {String} key The color key in the theme (e.g. C, N, BACKGROUND, ...).\r\n   * @returns {String} A color hex value.\r\n   */\r\n  getColor(key) {\r\n    if (key) {\r\n      key = key.toUpperCase();\r\n\r\n      if (key in this.theme) {\r\n        return this.theme[key];\r\n      }\r\n    }\r\n\r\n    return this.theme['C'];\r\n  }\r\n\r\n  /**\r\n   * Sets the theme to the specified string if it exists. If it does not, this\r\n   * does nothing.\r\n   *\r\n   * @param {String} theme the name of the theme to switch to\r\n   */\r\n  setTheme(theme) {\r\n    if (this.colors.hasOwnProperty(theme)) {\r\n      this.theme = this.colors[theme];\r\n    }\r\n\r\n    // TODO: this probably should notify those who are watching this theme\r\n    // manager that the theme has changed so that colors can be changed\r\n    // on the fly\r\n  }\r\n}\r\n\r\nmodule.exports = ThemeManager;"]},"metadata":{},"sourceType":"script"}