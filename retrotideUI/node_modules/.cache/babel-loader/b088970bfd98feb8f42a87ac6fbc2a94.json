{"ast":null,"code":"var _jsxFileName = \"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/src/components/SmilesDrawerWrapper.js\";\nimport React from 'react';\nimport Button from './Button';\nimport { connect } from 'react-redux';\nimport SmilesDrawer from 'smiles-drawer';\nimport { updateMolecule } from '../redux/actions/actions'; // this wrapper wraps together an input and connected canvas into one unit\n// in future we may want to break out the input to make things more versatile\n\nlet canvasOptions = {\n  height: 500,\n  width: 800\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateMolecule: molecule => dispatch(updateMolecule(molecule)),\n    dispatch\n  };\n};\n\nclass SmilesDrawerWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.submitMolecule = () => {\n      let molecule = this.state.smilesString; // dispatch update action with local state value\n\n      this.props.updateMolecule(molecule);\n    };\n\n    this.resetCanvas = () => {\n      this.setState({\n        smilesString: \"\",\n        errorMessage: \"\"\n      });\n      this.canvasRef.current.getContext('2d').clearRect(0, 0, 2000, 2000);\n      this.inputRef.current.value = \"\";\n    };\n\n    this.parseStringInput = () => {\n      let mol = this.inputRef.current.value; // we're double-parsing due to workaround\n\n      SmilesDrawer.parse(mol, tree => {\n        console.log(tree);\n        this.setState({\n          errorMessage: \"\",\n          smilesString: mol\n        }, () => {\n          SmilesDrawer.apply(canvasOptions); // callback compensates for async setState\n        });\n      }, err => {\n        console.log(err);\n        this.setState({\n          errorMessage: err.name + \" : \" + err.message\n        });\n        console.log(this.state.errorMessage);\n      });\n    };\n\n    this.state = {\n      errorMessage: \"\",\n      smilesString: \"\"\n    };\n    this.inputRef = /*#__PURE__*/React.createRef(); // drawer needs access to the input node\n\n    this.errorRef = /*#__PURE__*/React.createRef(); // notifications of invaid input appear here\n\n    this.canvasRef = /*#__PURE__*/React.createRef(); // drawer needs to know where to draw\n  } // put local state into global state\n\n\n  render() {\n    let disableSubmit = this.state.errorMessage.length > 0 || this.state.smilesString.length < 1;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"toolWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"smilesInput\",\n      ref: this.inputRef,\n      onChange: this.parseStringInput,\n      type: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.submitMolecule,\n      disabled: disableSubmit,\n      className: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, \"Submit Molecule\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.resetCanvas,\n      className: \"clear\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, \"Clear Canvas\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"errorField\",\n      ref: this.errorRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, this.state.errorMessage), \" \", /*#__PURE__*/React.createElement(\"canvas\", {\n      className: \"smilesCanvas\",\n      width: canvasOptions.width,\n      height: canvasOptions.height,\n      ref: this.canvasRef,\n      \"data-smiles\": this.state.smilesString,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"smilesCanvasAcknowledgment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, \" Smiles Drawer is used courtesy of Daniel Probst and Jean-Louis Reymond (\", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"http://dx.doi.org/10.1021/acs.jcim.7b00425\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 12\n      }\n    }, \"original paper\"), \")\"));\n  }\n\n}\n\nexport default connect(null, mapDispatchToProps)(SmilesDrawerWrapper);","map":{"version":3,"sources":["/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/src/components/SmilesDrawerWrapper.js"],"names":["React","Button","connect","SmilesDrawer","updateMolecule","canvasOptions","height","width","mapDispatchToProps","dispatch","molecule","SmilesDrawerWrapper","Component","constructor","props","submitMolecule","state","smilesString","resetCanvas","setState","errorMessage","canvasRef","current","getContext","clearRect","inputRef","value","parseStringInput","mol","parse","tree","console","log","apply","err","name","message","createRef","errorRef","render","disableSubmit","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Button from './Button';\nimport { connect } from 'react-redux';\nimport SmilesDrawer from 'smiles-drawer';\nimport { updateMolecule } from '../redux/actions/actions';\n\n// this wrapper wraps together an input and connected canvas into one unit\n// in future we may want to break out the input to make things more versatile\n\nlet canvasOptions = {\n  height: 500,\n  width: 800,\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateMolecule: molecule => dispatch(updateMolecule(molecule)),\n    dispatch,\n  }\n};\n\nclass SmilesDrawerWrapper extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      errorMessage: \"\",\n      smilesString: \"\"\n    }\n    this.inputRef = React.createRef(); // drawer needs access to the input node\n    this.errorRef = React.createRef(); // notifications of invaid input appear here\n    this.canvasRef = React.createRef(); // drawer needs to know where to draw\n  }\n\n  // put local state into global state\n  submitMolecule = () => {\n    let molecule = this.state.smilesString;\n    // dispatch update action with local state value\n    this.props.updateMolecule(molecule);\n  }\n\n  resetCanvas = () => {\n    this.setState({\n      smilesString: \"\",\n      errorMessage: \"\"\n    });\n    this.canvasRef.current.getContext('2d').clearRect(0,0,2000,2000);\n    this.inputRef.current.value = \"\";\n  }\n\n  parseStringInput = () => {\n    let mol = this.inputRef.current.value; // we're double-parsing due to workaround\n    SmilesDrawer.parse(mol,\n      (tree) => {\n        console.log(tree);\n        this.setState({\n          errorMessage: \"\",\n          smilesString: mol\n        }, () => {\n          SmilesDrawer.apply(canvasOptions); // callback compensates for async setState\n        });\n      },\n      (err) => {\n        console.log(err);\n        this.setState({\n          errorMessage: err.name + \" : \" + err.message\n        });\n        console.log(this.state.errorMessage);\n      }\n    );\n  }\n\n  render() {\n    let disableSubmit = (this.state.errorMessage.length > 0 || this.state.smilesString.length < 1);\n\n    return (\n      <div className='toolWrapper'>\n        <input className=\"smilesInput\" ref={this.inputRef} onChange={this.parseStringInput} type=\"text\" />\n        <Button onClick={this.submitMolecule} disabled={disableSubmit} className='submit'>Submit Molecule</Button>\n        <Button onClick={this.resetCanvas} className='clear'>Clear Canvas</Button>\n        <p className='errorField' ref={this.errorRef} >{this.state.errorMessage}</p> {/* any parsing errors will appear here */}\n        <canvas className=\"smilesCanvas\" width={canvasOptions.width} height={canvasOptions.height} ref={this.canvasRef} data-smiles={this.state.smilesString}></canvas>\n        <p className=\"smilesCanvasAcknowledgment\"> Smiles Drawer is used courtesy of Daniel Probst and Jean-Louis Reymond \n          (<a href=\"http://dx.doi.org/10.1021/acs.jcim.7b00425\" target=\"_blank\" rel=\"noopener noreferrer\">original paper</a>)\n        </p>\n      </div>\n    )\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(SmilesDrawerWrapper);"]},"metadata":{},"sourceType":"module"}