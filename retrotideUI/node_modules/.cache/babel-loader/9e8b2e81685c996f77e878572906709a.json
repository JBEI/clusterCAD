{"ast":null,"code":"var _classCallCheck = require(\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n//@ts-check\n\n/** \r\n * A class representing a 2D vector.\r\n * \r\n * @property {Number} x The x component of the vector.\r\n * @property {Number} y The y component of the vector.\r\n */\nvar Vector2 = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\r\n   * The constructor of the class Vector2.\r\n   *\r\n   * @param {(Number|Vector2)} x The initial x coordinate value or, if the single argument, a Vector2 object.\r\n   * @param {Number} y The initial y coordinate value.\r\n   */\n  function Vector2(x, y) {\n    _classCallCheck(this, Vector2);\n\n    if (arguments.length == 0) {\n      this.x = 0;\n      this.y = 0;\n    } else if (arguments.length == 1) {\n      this.x = x.x;\n      this.y = x.y;\n    } else {\n      this.x = x;\n      this.y = y;\n    }\n  }\n  /**\r\n   * Clones this vector and returns the clone.\r\n   *\r\n   * @returns {Vector2} The clone of this vector.\r\n   */\n\n\n  _createClass(Vector2, [{\n    key: \"clone\",\n    value: function clone() {\n      return new Vector2(this.x, this.y);\n    }\n    /**\r\n     * Returns a string representation of this vector.\r\n     *\r\n     * @returns {String} A string representation of this vector.\r\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return '(' + this.x + ',' + this.y + ')';\n    }\n    /**\r\n     * Add the x and y coordinate values of a vector to the x and y coordinate values of this vector.\r\n     *\r\n     * @param {Vector2} vec Another vector.\r\n     * @returns {Vector2} Returns itself.\r\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(vec) {\n      this.x += vec.x;\n      this.y += vec.y;\n      return this;\n    }\n    /**\r\n     * Subtract the x and y coordinate values of a vector from the x and y coordinate values of this vector.\r\n     *\r\n     * @param {Vector2} vec Another vector.\r\n     * @returns {Vector2} Returns itself.\r\n     */\n\n  }, {\n    key: \"subtract\",\n    value: function subtract(vec) {\n      this.x -= vec.x;\n      this.y -= vec.y;\n      return this;\n    }\n    /**\r\n     * Divide the x and y coordinate values of this vector by a scalar.\r\n     *\r\n     * @param {Number} scalar The scalar.\r\n     * @returns {Vector2} Returns itself.\r\n     */\n\n  }, {\n    key: \"divide\",\n    value: function divide(scalar) {\n      this.x /= scalar;\n      this.y /= scalar;\n      return this;\n    }\n    /**\r\n     * Multiply the x and y coordinate values of this vector by the values of another vector.\r\n     *\r\n     * @param {Vector2} v A vector.\r\n     * @returns {Vector2} Returns itself.\r\n     */\n\n  }, {\n    key: \"multiply\",\n    value: function multiply(v) {\n      this.x *= v.x;\n      this.y *= v.y;\n      return this;\n    }\n    /**\r\n     * Multiply the x and y coordinate values of this vector by a scalar.\r\n     *\r\n     * @param {Number} scalar The scalar.\r\n     * @returns {Vector2} Returns itself.\r\n     */\n\n  }, {\n    key: \"multiplyScalar\",\n    value: function multiplyScalar(scalar) {\n      this.x *= scalar;\n      this.y *= scalar;\n      return this;\n    }\n    /**\r\n     * Inverts this vector. Same as multiply(-1.0).\r\n     *\r\n     * @returns {Vector2} Returns itself.\r\n     */\n\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      this.x = -this.x;\n      this.y = -this.y;\n      return this;\n    }\n    /**\r\n     * Returns the angle of this vector in relation to the coordinate system.\r\n     *\r\n     * @returns {Number} The angle in radians.\r\n     */\n\n  }, {\n    key: \"angle\",\n    value: function angle() {\n      return Math.atan2(this.y, this.x);\n    }\n    /**\r\n     * Returns the euclidean distance between this vector and another vector.\r\n     *\r\n     * @param {Vector2} vec A vector.\r\n     * @returns {Number} The euclidean distance between the two vectors.\r\n     */\n\n  }, {\n    key: \"distance\",\n    value: function distance(vec) {\n      return Math.sqrt((vec.x - this.x) * (vec.x - this.x) + (vec.y - this.y) * (vec.y - this.y));\n    }\n    /**\r\n     * Returns the squared euclidean distance between this vector and another vector. When only the relative distances of a set of vectors are needed, this is is less expensive than using distance(vec).\r\n     *\r\n     * @param {Vector2} vec Another vector.\r\n     * @returns {Number} The squared euclidean distance of the two vectors.\r\n     */\n\n  }, {\n    key: \"distanceSq\",\n    value: function distanceSq(vec) {\n      return (vec.x - this.x) * (vec.x - this.x) + (vec.y - this.y) * (vec.y - this.y);\n    }\n    /**\r\n     * Checks whether or not this vector is in a clockwise or counter-clockwise rotational direction compared to another vector in relation to the coordinate system.\r\n     *\r\n     * @param {Vector2} vec Another vector.\r\n     * @returns {Number} Returns -1, 0 or 1 if the vector supplied as an argument is clockwise, neutral or counter-clockwise respectively to this vector in relation to the coordinate system.\r\n     */\n\n  }, {\n    key: \"clockwise\",\n    value: function clockwise(vec) {\n      var a = this.y * vec.x;\n      var b = this.x * vec.y;\n\n      if (a > b) {\n        return -1;\n      } else if (a === b) {\n        return 0;\n      }\n\n      return 1;\n    }\n    /**\r\n     * Checks whether or not this vector is in a clockwise or counter-clockwise rotational direction compared to another vector in relation to an arbitrary third vector.\r\n     *\r\n     * @param {Vector2} center The central vector.\r\n     * @param {Vector2} vec Another vector.\r\n     * @returns {Number} Returns -1, 0 or 1 if the vector supplied as an argument is clockwise, neutral or counter-clockwise respectively to this vector in relation to an arbitrary third vector.\r\n     */\n\n  }, {\n    key: \"relativeClockwise\",\n    value: function relativeClockwise(center, vec) {\n      var a = (this.y - center.y) * (vec.x - center.x);\n      var b = (this.x - center.x) * (vec.y - center.y);\n\n      if (a > b) {\n        return -1;\n      } else if (a === b) {\n        return 0;\n      }\n\n      return 1;\n    }\n    /**\r\n     * Rotates this vector by a given number of radians around the origin of the coordinate system.\r\n     *\r\n     * @param {Number} angle The angle in radians to rotate the vector.\r\n     * @returns {Vector2} Returns itself.\r\n     */\n\n  }, {\n    key: \"rotate\",\n    value: function rotate(angle) {\n      var tmp = new Vector2(0, 0);\n      var cosAngle = Math.cos(angle);\n      var sinAngle = Math.sin(angle);\n      tmp.x = this.x * cosAngle - this.y * sinAngle;\n      tmp.y = this.x * sinAngle + this.y * cosAngle;\n      this.x = tmp.x;\n      this.y = tmp.y;\n      return this;\n    }\n    /**\r\n     * Rotates this vector around another vector.\r\n     *\r\n     * @param {Number} angle The angle in radians to rotate the vector.\r\n     * @param {Vector2} vec The vector which is used as the rotational center.\r\n     * @returns {Vector2} Returns itself.\r\n     */\n\n  }, {\n    key: \"rotateAround\",\n    value: function rotateAround(angle, vec) {\n      var s = Math.sin(angle);\n      var c = Math.cos(angle);\n      this.x -= vec.x;\n      this.y -= vec.y;\n      var x = this.x * c - this.y * s;\n      var y = this.x * s + this.y * c;\n      this.x = x + vec.x;\n      this.y = y + vec.y;\n      return this;\n    }\n    /**\r\n     * Rotate a vector around a given center to the same angle as another vector (so that the two vectors and the center are in a line, with both vectors on one side of the center), keeps the distance from this vector to the center.\r\n     *\r\n     * @param {Vector2} vec The vector to rotate this vector to.\r\n     * @param {Vector2} center The rotational center.\r\n     * @param {Number} [offsetAngle=0.0] An additional amount of radians to rotate the vector.\r\n     * @returns {Vector2} Returns itself.\r\n     */\n\n  }, {\n    key: \"rotateTo\",\n    value: function rotateTo(vec, center) {\n      var offsetAngle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.0;\n      // Problem if this is first position\n      this.x += 0.001;\n      this.y -= 0.001;\n      var a = Vector2.subtract(this, center);\n      var b = Vector2.subtract(vec, center);\n      var angle = Vector2.angle(b, a);\n      this.rotateAround(angle + offsetAngle, center);\n      return this;\n    }\n    /**\r\n     * Rotates the vector away from a specified vector around a center.\r\n     * \r\n     * @param {Vector2} vec The vector this one is rotated away from.\r\n     * @param {Vector2} center The rotational center.\r\n     * @param {Number} angle The angle by which to rotate.\r\n     */\n\n  }, {\n    key: \"rotateAwayFrom\",\n    value: function rotateAwayFrom(vec, center, angle) {\n      this.rotateAround(angle, center);\n      var distSqA = this.distanceSq(vec);\n      this.rotateAround(-2.0 * angle, center);\n      var distSqB = this.distanceSq(vec); // If it was rotated towards the other vertex, rotate in other direction by same amount.\n\n      if (distSqB < distSqA) {\n        this.rotateAround(2.0 * angle, center);\n      }\n    }\n    /**\r\n     * Returns the angle in radians used to rotate this vector away from a given vector.\r\n     * \r\n     * @param {Vector2} vec The vector this one is rotated away from.\r\n     * @param {Vector2} center The rotational center.\r\n     * @param {Number} angle The angle by which to rotate.\r\n     * @returns {Number} The angle in radians.\r\n     */\n\n  }, {\n    key: \"getRotateAwayFromAngle\",\n    value: function getRotateAwayFromAngle(vec, center, angle) {\n      var tmp = this.clone();\n      tmp.rotateAround(angle, center);\n      var distSqA = tmp.distanceSq(vec);\n      tmp.rotateAround(-2.0 * angle, center);\n      var distSqB = tmp.distanceSq(vec);\n\n      if (distSqB < distSqA) {\n        return angle;\n      } else {\n        return -angle;\n      }\n    }\n    /**\r\n     * Returns the angle in radians used to rotate this vector towards a given vector.\r\n     * \r\n     * @param {Vector2} vec The vector this one is rotated towards to.\r\n     * @param {Vector2} center The rotational center.\r\n     * @param {Number} angle The angle by which to rotate.\r\n     * @returns {Number} The angle in radians.\r\n     */\n\n  }, {\n    key: \"getRotateTowardsAngle\",\n    value: function getRotateTowardsAngle(vec, center, angle) {\n      var tmp = this.clone();\n      tmp.rotateAround(angle, center);\n      var distSqA = tmp.distanceSq(vec);\n      tmp.rotateAround(-2.0 * angle, center);\n      var distSqB = tmp.distanceSq(vec);\n\n      if (distSqB > distSqA) {\n        return angle;\n      } else {\n        return -angle;\n      }\n    }\n    /**\r\n     * Gets the angles between this vector and another vector around a common center of rotation.\r\n     *\r\n     * @param {Vector2} vec Another vector.\r\n     * @param {Vector2} center The center of rotation.\r\n     * @returns {Number} The angle between this vector and another vector around a center of rotation in radians.\r\n     */\n\n  }, {\n    key: \"getRotateToAngle\",\n    value: function getRotateToAngle(vec, center) {\n      var a = Vector2.subtract(this, center);\n      var b = Vector2.subtract(vec, center);\n      var angle = Vector2.angle(b, a);\n      return Number.isNaN(angle) ? 0.0 : angle;\n    }\n    /**\r\n     * Checks whether a vector lies within a polygon spanned by a set of vectors.\r\n     *\r\n     * @param {Vector2[]} polygon An array of vectors spanning the polygon.\r\n     * @returns {Boolean} A boolean indicating whether or not this vector is within a polygon.\r\n     */\n\n  }, {\n    key: \"isInPolygon\",\n    value: function isInPolygon(polygon) {\n      var inside = false; // Its not always a given, that the polygon is convex (-> sugars)\n\n      for (var i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n        if (polygon[i].y > this.y != polygon[j].y > this.y && this.x < (polygon[j].x - polygon[i].x) * (this.y - polygon[i].y) / (polygon[j].y - polygon[i].y) + polygon[i].x) {\n          inside = !inside;\n        }\n      }\n\n      return inside;\n    }\n    /**\r\n     * Returns the length of this vector.\r\n     *\r\n     * @returns {Number} The length of this vector.\r\n     */\n\n  }, {\n    key: \"length\",\n    value: function length() {\n      return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n    /**\r\n     * Returns the square of the length of this vector.\r\n     *\r\n     * @returns {Number} The square of the length of this vector.\r\n     */\n\n  }, {\n    key: \"lengthSq\",\n    value: function lengthSq() {\n      return this.x * this.x + this.y * this.y;\n    }\n    /**\r\n     * Normalizes this vector.\r\n     *\r\n     * @returns {Vector2} Returns itself.\r\n     */\n\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      this.divide(this.length());\n      return this;\n    }\n    /**\r\n     * Returns a normalized copy of this vector.\r\n     *\r\n     * @returns {Vector2} A normalized copy of this vector.\r\n     */\n\n  }, {\n    key: \"normalized\",\n    value: function normalized() {\n      return Vector2.divideScalar(this, this.length());\n    }\n    /**\r\n     * Calculates which side of a line spanned by two vectors this vector is.\r\n     *\r\n     * @param {Vector2} vecA A vector.\r\n     * @param {Vector2} vecB A vector.\r\n     * @returns {Number} A number indicating the side of this vector, given a line spanned by two other vectors.\r\n     */\n\n  }, {\n    key: \"whichSide\",\n    value: function whichSide(vecA, vecB) {\n      return (this.x - vecA.x) * (vecB.y - vecA.y) - (this.y - vecA.y) * (vecB.x - vecA.x);\n    }\n    /**\r\n     * Checks whether or not this vector is on the same side of a line spanned by two vectors as another vector.\r\n     *\r\n     * @param {Vector2} vecA A vector spanning the line.\r\n     * @param {Vector2} vecB A vector spanning the line.\r\n     * @param {Vector2} vecC A vector to check whether or not it is on the same side as this vector.\r\n     * @returns {Boolean} Returns a boolean indicating whether or not this vector is on the same side as another vector.\r\n     */\n\n  }, {\n    key: \"sameSideAs\",\n    value: function sameSideAs(vecA, vecB, vecC) {\n      var d = this.whichSide(vecA, vecB);\n      var dRef = vecC.whichSide(vecA, vecB);\n      return d < 0 && dRef < 0 || d == 0 && dRef == 0 || d > 0 && dRef > 0;\n    }\n    /**\r\n     * Adds two vectors and returns the result as a new vector.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA A summand.\r\n     * @param {Vector2} vecB A summand.\r\n     * @returns {Vector2} Returns the sum of two vectors.\r\n     */\n\n  }], [{\n    key: \"add\",\n    value: function add(vecA, vecB) {\n      return new Vector2(vecA.x + vecB.x, vecA.y + vecB.y);\n    }\n    /**\r\n     * Subtracts one vector from another and returns the result as a new vector.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA The minuend.\r\n     * @param {Vector2} vecB The subtrahend.\r\n     * @returns {Vector2} Returns the difference of two vectors.\r\n     */\n\n  }, {\n    key: \"subtract\",\n    value: function subtract(vecA, vecB) {\n      return new Vector2(vecA.x - vecB.x, vecA.y - vecB.y);\n    }\n    /**\r\n     * Multiplies two vectors (value by value) and returns the result.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA A vector.\r\n     * @param {Vector2} vecB A vector.\r\n     * @returns {Vector2} Returns the product of two vectors.\r\n     */\n\n  }, {\n    key: \"multiply\",\n    value: function multiply(vecA, vecB) {\n      return new Vector2(vecA.x * vecB.x, vecA.y * vecB.y);\n    }\n    /**\r\n     * Multiplies two vectors (value by value) and returns the result.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vec A vector.\r\n     * @param {Number} scalar A scalar.\r\n     * @returns {Vector2} Returns the product of two vectors.\r\n     */\n\n  }, {\n    key: \"multiplyScalar\",\n    value: function multiplyScalar(vec, scalar) {\n      return new Vector2(vec.x, vec.y).multiplyScalar(scalar);\n    }\n    /**\r\n     * Returns the midpoint of a line spanned by two vectors.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA A vector spanning the line.\r\n     * @param {Vector2} vecB A vector spanning the line.\r\n     * @returns {Vector2} The midpoint of the line spanned by two vectors.\r\n     */\n\n  }, {\n    key: \"midpoint\",\n    value: function midpoint(vecA, vecB) {\n      return new Vector2((vecA.x + vecB.x) / 2, (vecA.y + vecB.y) / 2);\n    }\n    /**\r\n     * Returns the normals of a line spanned by two vectors.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA A vector spanning the line.\r\n     * @param {Vector2} vecB A vector spanning the line.\r\n     * @returns {Vector2[]} An array containing the two normals, each represented by a vector.\r\n     */\n\n  }, {\n    key: \"normals\",\n    value: function normals(vecA, vecB) {\n      var delta = Vector2.subtract(vecB, vecA);\n      return [new Vector2(-delta.y, delta.x), new Vector2(delta.y, -delta.x)];\n    }\n    /**\r\n     * Returns the unit (normalized normal) vectors of a line spanned by two vectors.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA A vector spanning the line.\r\n     * @param {Vector2} vecB A vector spanning the line.\r\n     * @returns {Vector2[]} An array containing the two unit vectors.\r\n     */\n\n  }, {\n    key: \"units\",\n    value: function units(vecA, vecB) {\n      var delta = Vector2.subtract(vecB, vecA);\n      return [new Vector2(-delta.y, delta.x).normalize(), new Vector2(delta.y, -delta.x).normalize()];\n    }\n    /**\r\n     * Divides a vector by another vector and returns the result as new vector.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA The dividend.\r\n     * @param {Vector2} vecB The divisor.\r\n     * @returns {Vector2} The fraction of the two vectors.\r\n     */\n\n  }, {\n    key: \"divide\",\n    value: function divide(vecA, vecB) {\n      return new Vector2(vecA.x / vecB.x, vecA.y / vecB.y);\n    }\n    /**\r\n     * Divides a vector by a scalar and returns the result as new vector.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA The dividend.\r\n     * @param {Number} s The scalar.\r\n     * @returns {Vector2} The fraction of the two vectors.\r\n     */\n\n  }, {\n    key: \"divideScalar\",\n    value: function divideScalar(vecA, s) {\n      return new Vector2(vecA.x / s, vecA.y / s);\n    }\n    /**\r\n     * Returns the dot product of two vectors.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA A vector.\r\n     * @param {Vector2} vecB A vector.\r\n     * @returns {Number} The dot product of two vectors.\r\n     */\n\n  }, {\n    key: \"dot\",\n    value: function dot(vecA, vecB) {\n      return vecA.x * vecB.x + vecA.y * vecB.y;\n    }\n    /**\r\n     * Returns the angle between two vectors.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA A vector.\r\n     * @param {Vector2} vecB A vector.\r\n     * @returns {Number} The angle between two vectors in radians.\r\n     */\n\n  }, {\n    key: \"angle\",\n    value: function angle(vecA, vecB) {\n      var dot = Vector2.dot(vecA, vecB);\n      return Math.acos(dot / (vecA.length() * vecB.length()));\n    }\n    /**\r\n     * Returns the angle between two vectors based on a third vector in between.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA A vector.\r\n     * @param {Vector2} vecB A (central) vector.\r\n     * @param {Vector2} vecC A vector.\r\n     * @returns {Number} The angle in radians.\r\n     */\n\n  }, {\n    key: \"threePointangle\",\n    value: function threePointangle(vecA, vecB, vecC) {\n      var ab = Vector2.subtract(vecB, vecA);\n      var bc = Vector2.subtract(vecC, vecB);\n      var abLength = vecA.distance(vecB);\n      var bcLength = vecB.distance(vecC);\n      return Math.acos(Vector2.dot(ab, bc) / (abLength * bcLength));\n    }\n    /**\r\n     * Returns the scalar projection of a vector on another vector.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA The vector to be projected.\r\n     * @param {Vector2} vecB The vector to be projection upon.\r\n     * @returns {Number} The scalar component.\r\n     */\n\n  }, {\n    key: \"scalarProjection\",\n    value: function scalarProjection(vecA, vecB) {\n      var unit = vecB.normalized();\n      return Vector2.dot(vecA, unit);\n    }\n    /**\r\n    * Returns the average vector (normalized) of the input vectors.\r\n    *\r\n    * @static\r\n    * @param {Array} vecs An array containing vectors.\r\n    * @returns {Vector2} The resulting vector (normalized).\r\n    */\n\n  }, {\n    key: \"averageDirection\",\n    value: function averageDirection(vecs) {\n      var avg = new Vector2(0.0, 0.0);\n\n      for (var i = 0; i < vecs.length; i++) {\n        var vec = vecs[i];\n        avg.add(vec);\n      }\n\n      return avg.normalize();\n    }\n  }]);\n\n  return Vector2;\n}();\n\nmodule.exports = Vector2;","map":{"version":3,"sources":["/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/smiles-drawer/src/Vector2.js"],"names":["Vector2","x","y","arguments","length","vec","scalar","v","Math","atan2","sqrt","a","b","center","angle","tmp","cosAngle","cos","sinAngle","sin","s","c","offsetAngle","subtract","rotateAround","distSqA","distanceSq","distSqB","clone","Number","isNaN","polygon","inside","i","j","divide","divideScalar","vecA","vecB","vecC","d","whichSide","dRef","multiplyScalar","delta","normalize","dot","acos","ab","bc","abLength","distance","bcLength","unit","normalized","vecs","avg","add","module","exports"],"mappings":"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","sourcesContent":["//@ts-check\r\n\r\n/** \r\n * A class representing a 2D vector.\r\n * \r\n * @property {Number} x The x component of the vector.\r\n * @property {Number} y The y component of the vector.\r\n */\r\nclass Vector2 {\r\n    /**\r\n     * The constructor of the class Vector2.\r\n     *\r\n     * @param {(Number|Vector2)} x The initial x coordinate value or, if the single argument, a Vector2 object.\r\n     * @param {Number} y The initial y coordinate value.\r\n     */\r\n    constructor(x, y) {\r\n        if (arguments.length == 0) {\r\n            this.x = 0;\r\n            this.y = 0;\r\n        } else if (arguments.length == 1) {\r\n            this.x = x.x;\r\n            this.y = x.y;\r\n        } else {\r\n            this.x = x;\r\n            this.y = y;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clones this vector and returns the clone.\r\n     *\r\n     * @returns {Vector2} The clone of this vector.\r\n     */\r\n    clone() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of this vector.\r\n     *\r\n     * @returns {String} A string representation of this vector.\r\n     */\r\n    toString() {\r\n        return '(' + this.x + ',' + this.y + ')';\r\n    }\r\n\r\n    /**\r\n     * Add the x and y coordinate values of a vector to the x and y coordinate values of this vector.\r\n     *\r\n     * @param {Vector2} vec Another vector.\r\n     * @returns {Vector2} Returns itself.\r\n     */\r\n    add(vec) {\r\n        this.x += vec.x;\r\n        this.y += vec.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Subtract the x and y coordinate values of a vector from the x and y coordinate values of this vector.\r\n     *\r\n     * @param {Vector2} vec Another vector.\r\n     * @returns {Vector2} Returns itself.\r\n     */\r\n    subtract(vec) {\r\n        this.x -= vec.x;\r\n        this.y -= vec.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divide the x and y coordinate values of this vector by a scalar.\r\n     *\r\n     * @param {Number} scalar The scalar.\r\n     * @returns {Vector2} Returns itself.\r\n     */\r\n    divide(scalar) {\r\n        this.x /= scalar;\r\n        this.y /= scalar;\r\n\r\n        return this;\r\n    }\r\n    \r\n    /**\r\n     * Multiply the x and y coordinate values of this vector by the values of another vector.\r\n     *\r\n     * @param {Vector2} v A vector.\r\n     * @returns {Vector2} Returns itself.\r\n     */\r\n    multiply(v) {\r\n        this.x *= v.x;\r\n        this.y *= v.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiply the x and y coordinate values of this vector by a scalar.\r\n     *\r\n     * @param {Number} scalar The scalar.\r\n     * @returns {Vector2} Returns itself.\r\n     */\r\n    multiplyScalar(scalar) {\r\n        this.x *= scalar;\r\n        this.y *= scalar;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Inverts this vector. Same as multiply(-1.0).\r\n     *\r\n     * @returns {Vector2} Returns itself.\r\n     */\r\n    invert() {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the angle of this vector in relation to the coordinate system.\r\n     *\r\n     * @returns {Number} The angle in radians.\r\n     */\r\n    angle() {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    /**\r\n     * Returns the euclidean distance between this vector and another vector.\r\n     *\r\n     * @param {Vector2} vec A vector.\r\n     * @returns {Number} The euclidean distance between the two vectors.\r\n     */\r\n    distance(vec) {\r\n        return Math.sqrt((vec.x - this.x) * (vec.x - this.x) + (vec.y - this.y) * (vec.y - this.y));\r\n    }\r\n\r\n    /**\r\n     * Returns the squared euclidean distance between this vector and another vector. When only the relative distances of a set of vectors are needed, this is is less expensive than using distance(vec).\r\n     *\r\n     * @param {Vector2} vec Another vector.\r\n     * @returns {Number} The squared euclidean distance of the two vectors.\r\n     */\r\n    distanceSq(vec) {\r\n        return (vec.x - this.x) * (vec.x - this.x) + (vec.y - this.y) * (vec.y - this.y);\r\n    }\r\n\r\n    /**\r\n     * Checks whether or not this vector is in a clockwise or counter-clockwise rotational direction compared to another vector in relation to the coordinate system.\r\n     *\r\n     * @param {Vector2} vec Another vector.\r\n     * @returns {Number} Returns -1, 0 or 1 if the vector supplied as an argument is clockwise, neutral or counter-clockwise respectively to this vector in relation to the coordinate system.\r\n     */\r\n    clockwise(vec) {\r\n        let a = this.y * vec.x;\r\n        let b = this.x * vec.y;\r\n        \r\n        if (a > b) {\r\n            return -1;\r\n        }\r\n        else if (a === b) {\r\n            return 0;\r\n        }\r\n\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * Checks whether or not this vector is in a clockwise or counter-clockwise rotational direction compared to another vector in relation to an arbitrary third vector.\r\n     *\r\n     * @param {Vector2} center The central vector.\r\n     * @param {Vector2} vec Another vector.\r\n     * @returns {Number} Returns -1, 0 or 1 if the vector supplied as an argument is clockwise, neutral or counter-clockwise respectively to this vector in relation to an arbitrary third vector.\r\n     */\r\n    relativeClockwise(center, vec) {\r\n        let a = (this.y - center.y) * (vec.x - center.x);\r\n        let b = (this.x - center.x) * (vec.y - center.y);\r\n        \r\n        if (a > b) {\r\n            return -1;\r\n        }\r\n        else if (a === b) {\r\n            return 0;\r\n        }\r\n\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * Rotates this vector by a given number of radians around the origin of the coordinate system.\r\n     *\r\n     * @param {Number} angle The angle in radians to rotate the vector.\r\n     * @returns {Vector2} Returns itself.\r\n     */\r\n    rotate(angle) {\r\n        let tmp = new Vector2(0, 0);\r\n        let cosAngle = Math.cos(angle);\r\n        let sinAngle = Math.sin(angle);\r\n\r\n        tmp.x = this.x * cosAngle - this.y * sinAngle;\r\n        tmp.y = this.x * sinAngle + this.y * cosAngle;\r\n        \r\n        this.x = tmp.x;\r\n        this.y = tmp.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotates this vector around another vector.\r\n     *\r\n     * @param {Number} angle The angle in radians to rotate the vector.\r\n     * @param {Vector2} vec The vector which is used as the rotational center.\r\n     * @returns {Vector2} Returns itself.\r\n     */\r\n    rotateAround(angle, vec) {\r\n        let s = Math.sin(angle);\r\n        let c = Math.cos(angle);\r\n\r\n        this.x -= vec.x;\r\n        this.y -= vec.y;\r\n\r\n        let x = this.x * c - this.y * s;\r\n        let y = this.x * s + this.y * c;\r\n\r\n        this.x = x + vec.x;\r\n        this.y = y + vec.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotate a vector around a given center to the same angle as another vector (so that the two vectors and the center are in a line, with both vectors on one side of the center), keeps the distance from this vector to the center.\r\n     *\r\n     * @param {Vector2} vec The vector to rotate this vector to.\r\n     * @param {Vector2} center The rotational center.\r\n     * @param {Number} [offsetAngle=0.0] An additional amount of radians to rotate the vector.\r\n     * @returns {Vector2} Returns itself.\r\n     */\r\n    rotateTo(vec, center, offsetAngle = 0.0) {\r\n        // Problem if this is first position\r\n        this.x += 0.001;\r\n        this.y -= 0.001;\r\n\r\n        let a = Vector2.subtract(this, center);\r\n        let b = Vector2.subtract(vec, center);\r\n        let angle = Vector2.angle(b, a);\r\n\r\n        this.rotateAround(angle + offsetAngle, center);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotates the vector away from a specified vector around a center.\r\n     * \r\n     * @param {Vector2} vec The vector this one is rotated away from.\r\n     * @param {Vector2} center The rotational center.\r\n     * @param {Number} angle The angle by which to rotate.\r\n     */\r\n    rotateAwayFrom(vec, center, angle) {\r\n        this.rotateAround(angle, center);\r\n        \r\n        let distSqA = this.distanceSq(vec);\r\n        \r\n        this.rotateAround(-2.0 * angle, center);\r\n\r\n        let distSqB = this.distanceSq(vec);\r\n\r\n        // If it was rotated towards the other vertex, rotate in other direction by same amount.\r\n        if (distSqB < distSqA) {\r\n            this.rotateAround(2.0 * angle, center);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the angle in radians used to rotate this vector away from a given vector.\r\n     * \r\n     * @param {Vector2} vec The vector this one is rotated away from.\r\n     * @param {Vector2} center The rotational center.\r\n     * @param {Number} angle The angle by which to rotate.\r\n     * @returns {Number} The angle in radians.\r\n     */\r\n    getRotateAwayFromAngle(vec, center, angle) {\r\n        let tmp = this.clone();\r\n\r\n        tmp.rotateAround(angle, center);\r\n        \r\n        let distSqA = tmp.distanceSq(vec);\r\n        \r\n        tmp.rotateAround(-2.0 * angle, center);\r\n\r\n        let distSqB = tmp.distanceSq(vec);\r\n\r\n        if (distSqB < distSqA) {\r\n            return angle;\r\n        } else {\r\n            return -angle;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the angle in radians used to rotate this vector towards a given vector.\r\n     * \r\n     * @param {Vector2} vec The vector this one is rotated towards to.\r\n     * @param {Vector2} center The rotational center.\r\n     * @param {Number} angle The angle by which to rotate.\r\n     * @returns {Number} The angle in radians.\r\n     */\r\n    getRotateTowardsAngle(vec, center, angle) {\r\n        let tmp = this.clone();\r\n\r\n        tmp.rotateAround(angle, center);\r\n        \r\n        let distSqA = tmp.distanceSq(vec);\r\n        \r\n        tmp.rotateAround(-2.0 * angle, center);\r\n\r\n        let distSqB = tmp.distanceSq(vec);\r\n\r\n        if (distSqB > distSqA) {\r\n            return angle;\r\n        } else {\r\n            return -angle;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the angles between this vector and another vector around a common center of rotation.\r\n     *\r\n     * @param {Vector2} vec Another vector.\r\n     * @param {Vector2} center The center of rotation.\r\n     * @returns {Number} The angle between this vector and another vector around a center of rotation in radians.\r\n     */\r\n    getRotateToAngle(vec, center) {\r\n        let a = Vector2.subtract(this, center);\r\n        let b = Vector2.subtract(vec, center);\r\n        let angle = Vector2.angle(b, a);\r\n        \r\n        return Number.isNaN(angle) ? 0.0 : angle;\r\n    }\r\n\r\n    /**\r\n     * Checks whether a vector lies within a polygon spanned by a set of vectors.\r\n     *\r\n     * @param {Vector2[]} polygon An array of vectors spanning the polygon.\r\n     * @returns {Boolean} A boolean indicating whether or not this vector is within a polygon.\r\n     */\r\n    isInPolygon(polygon) {\r\n        let inside = false;\r\n\r\n        // Its not always a given, that the polygon is convex (-> sugars)\r\n        for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\r\n            if (((polygon[i].y > this.y) != (polygon[j].y > this.y)) &&\r\n                (this.x < (polygon[j].x - polygon[i].x) * (this.y - polygon[i].y) /\r\n                (polygon[j].y - polygon[i].y) + polygon[i].x)) {\r\n                inside = !inside;\r\n            }\r\n        }\r\n\r\n\r\n        return inside;\r\n    }\r\n\r\n    /**\r\n     * Returns the length of this vector.\r\n     *\r\n     * @returns {Number} The length of this vector.\r\n     */\r\n    length() {\r\n        return Math.sqrt((this.x * this.x) + (this.y * this.y));\r\n    }\r\n\r\n    /**\r\n     * Returns the square of the length of this vector.\r\n     *\r\n     * @returns {Number} The square of the length of this vector.\r\n     */\r\n    lengthSq() {\r\n        return (this.x * this.x) + (this.y * this.y);\r\n    }\r\n\r\n    /**\r\n     * Normalizes this vector.\r\n     *\r\n     * @returns {Vector2} Returns itself.\r\n     */\r\n    normalize() {\r\n        this.divide(this.length());\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a normalized copy of this vector.\r\n     *\r\n     * @returns {Vector2} A normalized copy of this vector.\r\n     */\r\n    normalized() {\r\n        return Vector2.divideScalar(this, this.length());\r\n    }\r\n\r\n    /**\r\n     * Calculates which side of a line spanned by two vectors this vector is.\r\n     *\r\n     * @param {Vector2} vecA A vector.\r\n     * @param {Vector2} vecB A vector.\r\n     * @returns {Number} A number indicating the side of this vector, given a line spanned by two other vectors.\r\n     */\r\n    whichSide(vecA, vecB) {\r\n        return (this.x - vecA.x) * (vecB.y - vecA.y) - (this.y - vecA.y) * (vecB.x - vecA.x);\r\n    }\r\n\r\n    /**\r\n     * Checks whether or not this vector is on the same side of a line spanned by two vectors as another vector.\r\n     *\r\n     * @param {Vector2} vecA A vector spanning the line.\r\n     * @param {Vector2} vecB A vector spanning the line.\r\n     * @param {Vector2} vecC A vector to check whether or not it is on the same side as this vector.\r\n     * @returns {Boolean} Returns a boolean indicating whether or not this vector is on the same side as another vector.\r\n     */\r\n    sameSideAs(vecA, vecB, vecC) {\r\n        let d = this.whichSide(vecA, vecB);\r\n        let dRef = vecC.whichSide(vecA, vecB);\r\n\r\n        return d < 0 && dRef < 0 || d == 0 && dRef == 0 || d > 0 && dRef > 0;\r\n    }\r\n\r\n    /**\r\n     * Adds two vectors and returns the result as a new vector.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA A summand.\r\n     * @param {Vector2} vecB A summand.\r\n     * @returns {Vector2} Returns the sum of two vectors.\r\n     */\r\n    static add(vecA, vecB) {\r\n        return new Vector2(vecA.x + vecB.x, vecA.y + vecB.y);\r\n    }\r\n\r\n    /**\r\n     * Subtracts one vector from another and returns the result as a new vector.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA The minuend.\r\n     * @param {Vector2} vecB The subtrahend.\r\n     * @returns {Vector2} Returns the difference of two vectors.\r\n     */\r\n    static subtract(vecA, vecB) {\r\n        return new Vector2(vecA.x - vecB.x, vecA.y - vecB.y);\r\n    }\r\n\r\n    /**\r\n     * Multiplies two vectors (value by value) and returns the result.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA A vector.\r\n     * @param {Vector2} vecB A vector.\r\n     * @returns {Vector2} Returns the product of two vectors.\r\n     */\r\n    static multiply(vecA, vecB) {\r\n        return new Vector2(vecA.x * vecB.x, vecA.y * vecB.y);\r\n    }\r\n\r\n    /**\r\n     * Multiplies two vectors (value by value) and returns the result.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vec A vector.\r\n     * @param {Number} scalar A scalar.\r\n     * @returns {Vector2} Returns the product of two vectors.\r\n     */\r\n    static multiplyScalar(vec, scalar) {\r\n        return new Vector2(vec.x, vec.y).multiplyScalar(scalar);\r\n    }\r\n\r\n    /**\r\n     * Returns the midpoint of a line spanned by two vectors.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA A vector spanning the line.\r\n     * @param {Vector2} vecB A vector spanning the line.\r\n     * @returns {Vector2} The midpoint of the line spanned by two vectors.\r\n     */\r\n    static midpoint(vecA, vecB) {\r\n        return new Vector2((vecA.x + vecB.x) / 2, (vecA.y + vecB.y) / 2);\r\n    }\r\n\r\n    /**\r\n     * Returns the normals of a line spanned by two vectors.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA A vector spanning the line.\r\n     * @param {Vector2} vecB A vector spanning the line.\r\n     * @returns {Vector2[]} An array containing the two normals, each represented by a vector.\r\n     */\r\n    static normals(vecA, vecB) {\r\n        let delta = Vector2.subtract(vecB, vecA);\r\n\r\n        return [\r\n            new Vector2(-delta.y, delta.x),\r\n            new Vector2(delta.y, -delta.x)\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Returns the unit (normalized normal) vectors of a line spanned by two vectors.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA A vector spanning the line.\r\n     * @param {Vector2} vecB A vector spanning the line.\r\n     * @returns {Vector2[]} An array containing the two unit vectors.\r\n     */\r\n    static units(vecA, vecB) {\r\n        let delta = Vector2.subtract(vecB, vecA);\r\n\r\n        return [\r\n            (new Vector2(-delta.y, delta.x)).normalize(),\r\n            (new Vector2(delta.y, -delta.x)).normalize()\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Divides a vector by another vector and returns the result as new vector.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA The dividend.\r\n     * @param {Vector2} vecB The divisor.\r\n     * @returns {Vector2} The fraction of the two vectors.\r\n     */\r\n    static divide(vecA, vecB) {\r\n      return new Vector2(vecA.x / vecB.x, vecA.y / vecB.y);\r\n    }\r\n\r\n    /**\r\n     * Divides a vector by a scalar and returns the result as new vector.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA The dividend.\r\n     * @param {Number} s The scalar.\r\n     * @returns {Vector2} The fraction of the two vectors.\r\n     */\r\n    static divideScalar(vecA, s) {\r\n        return new Vector2(vecA.x / s, vecA.y / s);\r\n    }\r\n\r\n    /**\r\n     * Returns the dot product of two vectors.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA A vector.\r\n     * @param {Vector2} vecB A vector.\r\n     * @returns {Number} The dot product of two vectors.\r\n     */\r\n    static dot(vecA, vecB) {\r\n        return vecA.x * vecB.x + vecA.y * vecB.y;\r\n    }\r\n\r\n    /**\r\n     * Returns the angle between two vectors.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA A vector.\r\n     * @param {Vector2} vecB A vector.\r\n     * @returns {Number} The angle between two vectors in radians.\r\n     */\r\n    static angle(vecA, vecB) {\r\n        let dot = Vector2.dot(vecA, vecB);\r\n\r\n        return Math.acos(dot / (vecA.length() * vecB.length()));\r\n    }\r\n\r\n    /**\r\n     * Returns the angle between two vectors based on a third vector in between.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA A vector.\r\n     * @param {Vector2} vecB A (central) vector.\r\n     * @param {Vector2} vecC A vector.\r\n     * @returns {Number} The angle in radians.\r\n     */\r\n    static threePointangle(vecA, vecB, vecC) {\r\n        let ab = Vector2.subtract(vecB, vecA);\r\n        let bc = Vector2.subtract(vecC, vecB);\r\n        let abLength = vecA.distance(vecB);\r\n        let bcLength = vecB.distance(vecC);\r\n\r\n        return Math.acos(Vector2.dot(ab, bc) / (abLength * bcLength));\r\n    }\r\n    \r\n    /**\r\n     * Returns the scalar projection of a vector on another vector.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA The vector to be projected.\r\n     * @param {Vector2} vecB The vector to be projection upon.\r\n     * @returns {Number} The scalar component.\r\n     */\r\n    static scalarProjection(vecA, vecB) {\r\n        let unit = vecB.normalized();\r\n        \r\n        return Vector2.dot(vecA, unit);\r\n    }\r\n\r\n     /**\r\n     * Returns the average vector (normalized) of the input vectors.\r\n     *\r\n     * @static\r\n     * @param {Array} vecs An array containing vectors.\r\n     * @returns {Vector2} The resulting vector (normalized).\r\n     */\r\n    static averageDirection(vecs) {\r\n        let avg = new Vector2(0.0, 0.0);\r\n\r\n        for (var i = 0; i < vecs.length; i++) {\r\n          let vec = vecs[i];\r\n          avg.add(vec);\r\n        }\r\n\r\n        return avg.normalize();\r\n    }\r\n}\r\n\r\nmodule.exports = Vector2;"]},"metadata":{},"sourceType":"script"}