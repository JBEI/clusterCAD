{"ast":null,"code":"var _classCallCheck = require(\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n//@ts-check\nvar Vector2 = require('./Vector2');\n/** \r\n * A class representing a line.\r\n * \r\n * @property {Vector2} from The Vector2 defining the start of the line.\r\n * @property {Vector2} to The Vector2 defining the end of the line.\r\n * @property {String} elementFrom The element symbol associated with the start of the line.\r\n * @property {String} elementTo The element symbol associated with the end of the line.\r\n * @property {Boolean} chiralFrom A boolean indicating whether or not the source atom is a chiral center.\r\n * @property {Boolean} chiralTo A boolean indicating whether or tno the target atom is a chiral center.\r\n */\n\n\nvar Line = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\r\n   * The constructor for the class Line.\r\n   *\r\n   * @param {Vector2} [from=new Vector2(0, 0)] A vector marking the beginning of the line.\r\n   * @param {Vector2} [to=new Vector2(0, 0)] A vector marking the end of the line.\r\n   * @param {string} [elementFrom=null] A one-letter representation of the element associated with the vector marking the beginning of the line.\r\n   * @param {string} [elementTo=null] A one-letter representation of the element associated with the vector marking the end of the line.\r\n   * @param {Boolean} [chiralFrom=false] Whether or not the from atom is a chiral center.\r\n   * @param {Boolean} [chiralTo=false] Whether or not the to atom is a chiral center.\r\n   */\n  function Line() {\n    var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector2(0, 0);\n    var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector2(0, 0);\n    var elementFrom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var elementTo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    var chiralFrom = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    var chiralTo = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n    _classCallCheck(this, Line);\n\n    this.from = from;\n    this.to = to;\n    this.elementFrom = elementFrom;\n    this.elementTo = elementTo;\n    this.chiralFrom = chiralFrom;\n    this.chiralTo = chiralTo;\n  }\n  /**\r\n   * Clones this line and returns the clone.\r\n   *\r\n   * @returns {Line} A clone of this line.\r\n   */\n\n\n  _createClass(Line, [{\n    key: \"clone\",\n    value: function clone() {\n      return new Line(this.from.clone(), this.to.clone(), this.elementFrom, this.elementTo);\n    }\n    /**\r\n     * Returns the length of this line.\r\n     *\r\n     * @returns {Number} The length of this line.\r\n     */\n\n  }, {\n    key: \"getLength\",\n    value: function getLength() {\n      return Math.sqrt(Math.pow(this.to.x - this.from.x, 2) + Math.pow(this.to.y - this.from.y, 2));\n    }\n    /**\r\n     * Returns the angle of the line in relation to the coordinate system (the x-axis).\r\n     *\r\n     * @returns {Number} The angle in radians.\r\n     */\n\n  }, {\n    key: \"getAngle\",\n    value: function getAngle() {\n      // Get the angle between the line and the x-axis\n      var diff = Vector2.subtract(this.getRightVector(), this.getLeftVector());\n      return diff.angle();\n    }\n    /**\r\n     * Returns the right vector (the vector with the larger x value).\r\n     *\r\n     * @returns {Vector2} The right vector.\r\n     */\n\n  }, {\n    key: \"getRightVector\",\n    value: function getRightVector() {\n      // Return the vector with the larger x value (the right one)\n      if (this.from.x < this.to.x) {\n        return this.to;\n      } else {\n        return this.from;\n      }\n    }\n    /**\r\n     * Returns the left vector (the vector with the smaller x value).\r\n     *\r\n     * @returns {Vector2} The left vector.\r\n     */\n\n  }, {\n    key: \"getLeftVector\",\n    value: function getLeftVector() {\n      // Return the vector with the smaller x value (the left one)\n      if (this.from.x < this.to.x) {\n        return this.from;\n      } else {\n        return this.to;\n      }\n    }\n    /**\r\n     * Returns the element associated with the right vector (the vector with the larger x value).\r\n     *\r\n     * @returns {String} The element associated with the right vector.\r\n     */\n\n  }, {\n    key: \"getRightElement\",\n    value: function getRightElement() {\n      if (this.from.x < this.to.x) {\n        return this.elementTo;\n      } else {\n        return this.elementFrom;\n      }\n    }\n    /**\r\n     * Returns the element associated with the left vector (the vector with the smaller x value).\r\n     *\r\n     * @returns {String} The element associated with the left vector.\r\n     */\n\n  }, {\n    key: \"getLeftElement\",\n    value: function getLeftElement() {\n      if (this.from.x < this.to.x) {\n        return this.elementFrom;\n      } else {\n        return this.elementTo;\n      }\n    }\n    /**\r\n     * Returns whether or not the atom associated with the right vector (the vector with the larger x value) is a chiral center.\r\n     *\r\n     * @returns {Boolean} Whether or not the atom associated with the right vector is a chiral center.\r\n     */\n\n  }, {\n    key: \"getRightChiral\",\n    value: function getRightChiral() {\n      if (this.from.x < this.to.x) {\n        return this.chiralTo;\n      } else {\n        return this.chiralFrom;\n      }\n    }\n    /**\r\n     * Returns whether or not the atom associated with the left vector (the vector with the smaller x value) is a chiral center.\r\n     *\r\n     * @returns {Boolean} Whether or not the atom  associated with the left vector is a chiral center.\r\n     */\n\n  }, {\n    key: \"getLeftChiral\",\n    value: function getLeftChiral() {\n      if (this.from.x < this.to.x) {\n        return this.chiralFrom;\n      } else {\n        return this.chiralTo;\n      }\n    }\n    /**\r\n     * Set the value of the right vector.\r\n     *\r\n     * @param {Number} x The x value.\r\n     * @param {Number} y The y value.\r\n     * @returns {Line} This line.\r\n     */\n\n  }, {\n    key: \"setRightVector\",\n    value: function setRightVector(x, y) {\n      if (this.from.x < this.to.x) {\n        this.to.x = x;\n        this.to.y = y;\n      } else {\n        this.from.x = x;\n        this.from.y = y;\n      }\n\n      return this;\n    }\n    /**\r\n     * Set the value of the left vector.\r\n     *\r\n     * @param {Number} x The x value.\r\n     * @param {Number} y The y value.\r\n     * @returns {Line} This line.\r\n     */\n\n  }, {\n    key: \"setLeftVector\",\n    value: function setLeftVector(x, y) {\n      if (this.from.x < this.to.x) {\n        this.from.x = x;\n        this.from.y = y;\n      } else {\n        this.to.x = x;\n        this.to.y = y;\n      }\n\n      return this;\n    }\n    /**\r\n     * Rotates this line to be aligned with the x-axis. The center of rotation is the left vector.\r\n     *\r\n     * @returns {Line} This line.\r\n     */\n\n  }, {\n    key: \"rotateToXAxis\",\n    value: function rotateToXAxis() {\n      var left = this.getLeftVector();\n      this.setRightVector(left.x + this.getLength(), left.y);\n      return this;\n    }\n    /**\r\n     * Rotate the line by a given value (in radians). The center of rotation is the left vector.\r\n     *\r\n     * @param {Number} theta The angle (in radians) to rotate the line.\r\n     * @returns {Line} This line.\r\n     */\n\n  }, {\n    key: \"rotate\",\n    value: function rotate(theta) {\n      var l = this.getLeftVector();\n      var r = this.getRightVector();\n      var sinTheta = Math.sin(theta);\n      var cosTheta = Math.cos(theta);\n      var x = cosTheta * (r.x - l.x) - sinTheta * (r.y - l.y) + l.x;\n      var y = sinTheta * (r.x - l.x) - cosTheta * (r.y - l.y) + l.y;\n      this.setRightVector(x, y);\n      return this;\n    }\n    /**\r\n     * Shortens this line from the \"from\" direction by a given value (in pixels).\r\n     *\r\n     * @param {Number} by The length in pixels to shorten the vector by.\r\n     * @returns {Line} This line.\r\n     */\n\n  }, {\n    key: \"shortenFrom\",\n    value: function shortenFrom(by) {\n      var f = Vector2.subtract(this.to, this.from);\n      f.normalize();\n      f.multiplyScalar(by);\n      this.from.add(f);\n      return this;\n    }\n    /**\r\n     * Shortens this line from the \"to\" direction by a given value (in pixels).\r\n     *\r\n     * @param {Number} by The length in pixels to shorten the vector by.\r\n     * @returns {Line} This line.\r\n     */\n\n  }, {\n    key: \"shortenTo\",\n    value: function shortenTo(by) {\n      var f = Vector2.subtract(this.from, this.to);\n      f.normalize();\n      f.multiplyScalar(by);\n      this.to.add(f);\n      return this;\n    }\n    /**\r\n     * Shorten the right side.\r\n     *\r\n     * @param {Number} by The length in pixels to shorten the vector by.\r\n     * @returns {Line} Returns itself.\r\n     */\n\n  }, {\n    key: \"shortenRight\",\n    value: function shortenRight(by) {\n      if (this.from.x < this.to.x) {\n        this.shortenTo(by);\n      } else {\n        this.shortenFrom(by);\n      }\n\n      return this;\n    }\n    /**\r\n     * Shorten the left side.\r\n     * \r\n     * @param {Number} by The length in pixels to shorten the vector by.\r\n     * @returns {Line} Returns itself.\r\n     */\n\n  }, {\n    key: \"shortenLeft\",\n    value: function shortenLeft(by) {\n      if (this.from.x < this.to.x) {\n        this.shortenFrom(by);\n      } else {\n        this.shortenTo(by);\n      }\n\n      return this;\n    }\n    /**\r\n     * Shortens this line from both directions by a given value (in pixels).\r\n     *\r\n     * @param {Number} by The length in pixels to shorten the vector by.\r\n     * @returns {Line} This line.\r\n     */\n\n  }, {\n    key: \"shorten\",\n    value: function shorten(by) {\n      var f = Vector2.subtract(this.from, this.to);\n      f.normalize();\n      f.multiplyScalar(by / 2.0);\n      this.to.add(f);\n      this.from.subtract(f);\n      return this;\n    }\n  }]);\n\n  return Line;\n}();\n\nmodule.exports = Line;","map":{"version":3,"sources":["/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/smiles-drawer/src/Line.js"],"names":["Vector2","require","Line","from","to","elementFrom","elementTo","chiralFrom","chiralTo","clone","Math","sqrt","pow","x","y","diff","subtract","getRightVector","getLeftVector","angle","left","setRightVector","getLength","theta","l","r","sinTheta","sin","cosTheta","cos","by","f","normalize","multiplyScalar","add","shortenTo","shortenFrom","module","exports"],"mappings":"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","sourcesContent":["//@ts-check\r\nconst Vector2 = require('./Vector2')\r\n\r\n/** \r\n * A class representing a line.\r\n * \r\n * @property {Vector2} from The Vector2 defining the start of the line.\r\n * @property {Vector2} to The Vector2 defining the end of the line.\r\n * @property {String} elementFrom The element symbol associated with the start of the line.\r\n * @property {String} elementTo The element symbol associated with the end of the line.\r\n * @property {Boolean} chiralFrom A boolean indicating whether or not the source atom is a chiral center.\r\n * @property {Boolean} chiralTo A boolean indicating whether or tno the target atom is a chiral center.\r\n */\r\nclass Line {\r\n    /**\r\n     * The constructor for the class Line.\r\n     *\r\n     * @param {Vector2} [from=new Vector2(0, 0)] A vector marking the beginning of the line.\r\n     * @param {Vector2} [to=new Vector2(0, 0)] A vector marking the end of the line.\r\n     * @param {string} [elementFrom=null] A one-letter representation of the element associated with the vector marking the beginning of the line.\r\n     * @param {string} [elementTo=null] A one-letter representation of the element associated with the vector marking the end of the line.\r\n     * @param {Boolean} [chiralFrom=false] Whether or not the from atom is a chiral center.\r\n     * @param {Boolean} [chiralTo=false] Whether or not the to atom is a chiral center.\r\n     */\r\n    constructor(from = new Vector2(0,0), to = new Vector2(0, 0), elementFrom = null, elementTo = null, chiralFrom = false, chiralTo = false) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.elementFrom = elementFrom;\r\n        this.elementTo = elementTo;\r\n        this.chiralFrom = chiralFrom;\r\n        this.chiralTo = chiralTo;\r\n    }\r\n\r\n    /**\r\n     * Clones this line and returns the clone.\r\n     *\r\n     * @returns {Line} A clone of this line.\r\n     */\r\n    clone() {\r\n        return new Line(this.from.clone(), this.to.clone(), this.elementFrom, this.elementTo);\r\n    }\r\n\r\n    /**\r\n     * Returns the length of this line.\r\n     *\r\n     * @returns {Number} The length of this line.\r\n     */\r\n    getLength() {\r\n        return Math.sqrt(Math.pow(this.to.x - this.from.x, 2) + \r\n                         Math.pow(this.to.y - this.from.y, 2));\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns the angle of the line in relation to the coordinate system (the x-axis).\r\n     *\r\n     * @returns {Number} The angle in radians.\r\n     */\r\n    getAngle() {\r\n        // Get the angle between the line and the x-axis\r\n        let diff = Vector2.subtract(this.getRightVector(), this.getLeftVector());\r\n        return diff.angle();\r\n    }\r\n\r\n    /**\r\n     * Returns the right vector (the vector with the larger x value).\r\n     *\r\n     * @returns {Vector2} The right vector.\r\n     */\r\n    getRightVector() {\r\n        // Return the vector with the larger x value (the right one)\r\n        if (this.from.x < this.to.x) {\r\n            return this.to;\r\n        } else {\r\n            return this.from;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Returns the left vector (the vector with the smaller x value).\r\n     *\r\n     * @returns {Vector2} The left vector.\r\n     */\r\n    getLeftVector() {\r\n        // Return the vector with the smaller x value (the left one)\r\n        if (this.from.x < this.to.x) {\r\n            return this.from;\r\n        } else {\r\n            return this.to;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the element associated with the right vector (the vector with the larger x value).\r\n     *\r\n     * @returns {String} The element associated with the right vector.\r\n     */\r\n    getRightElement() {\r\n        if (this.from.x < this.to.x) {\r\n            return this.elementTo;\r\n        } else {\r\n            return this.elementFrom;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the element associated with the left vector (the vector with the smaller x value).\r\n     *\r\n     * @returns {String} The element associated with the left vector.\r\n     */\r\n    getLeftElement() {\r\n        if (this.from.x < this.to.x) {\r\n            return this.elementFrom;\r\n        } else {\r\n            return this.elementTo;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the atom associated with the right vector (the vector with the larger x value) is a chiral center.\r\n     *\r\n     * @returns {Boolean} Whether or not the atom associated with the right vector is a chiral center.\r\n     */\r\n    getRightChiral() {\r\n        if (this.from.x < this.to.x) {\r\n            return this.chiralTo;\r\n        } else {\r\n            return this.chiralFrom;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the atom associated with the left vector (the vector with the smaller x value) is a chiral center.\r\n     *\r\n     * @returns {Boolean} Whether or not the atom  associated with the left vector is a chiral center.\r\n     */\r\n    getLeftChiral() {\r\n        if (this.from.x < this.to.x) {\r\n            return this.chiralFrom;\r\n        } else {\r\n            return this.chiralTo;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the value of the right vector.\r\n     *\r\n     * @param {Number} x The x value.\r\n     * @param {Number} y The y value.\r\n     * @returns {Line} This line.\r\n     */\r\n    setRightVector(x, y) {\r\n        if (this.from.x < this.to.x) {\r\n            this.to.x = x;\r\n            this.to.y = y;\r\n        } else {\r\n            this.from.x = x;\r\n            this.from.y = y;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the value of the left vector.\r\n     *\r\n     * @param {Number} x The x value.\r\n     * @param {Number} y The y value.\r\n     * @returns {Line} This line.\r\n     */\r\n    setLeftVector(x, y) {\r\n        if (this.from.x < this.to.x) {\r\n            this.from.x = x;\r\n            this.from.y = y;\r\n        } else {\r\n            this.to.x = x;\r\n            this.to.y = y;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotates this line to be aligned with the x-axis. The center of rotation is the left vector.\r\n     *\r\n     * @returns {Line} This line.\r\n     */\r\n    rotateToXAxis() {\r\n        let left = this.getLeftVector();\r\n        \r\n        this.setRightVector(left.x + this.getLength(), left.y);\r\n        \r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotate the line by a given value (in radians). The center of rotation is the left vector.\r\n     *\r\n     * @param {Number} theta The angle (in radians) to rotate the line.\r\n     * @returns {Line} This line.\r\n     */\r\n    rotate(theta) {\r\n        let l = this.getLeftVector();\r\n        let r = this.getRightVector();\r\n        let sinTheta = Math.sin(theta);\r\n        let cosTheta = Math.cos(theta);\r\n\r\n        let x = cosTheta * (r.x - l.x) - sinTheta * (r.y - l.y) + l.x;\r\n        let y = sinTheta * (r.x - l.x) - cosTheta * (r.y - l.y) + l.y;\r\n        \r\n        this.setRightVector(x, y);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Shortens this line from the \"from\" direction by a given value (in pixels).\r\n     *\r\n     * @param {Number} by The length in pixels to shorten the vector by.\r\n     * @returns {Line} This line.\r\n     */\r\n    shortenFrom(by) {\r\n        let f = Vector2.subtract(this.to, this.from);\r\n        \r\n        f.normalize();\r\n        f.multiplyScalar(by);\r\n        \r\n        this.from.add(f);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Shortens this line from the \"to\" direction by a given value (in pixels).\r\n     *\r\n     * @param {Number} by The length in pixels to shorten the vector by.\r\n     * @returns {Line} This line.\r\n     */\r\n    shortenTo(by) {\r\n        let f = Vector2.subtract(this.from, this.to);\r\n        \r\n        f.normalize();\r\n        f.multiplyScalar(by);\r\n        \r\n        this.to.add(f);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Shorten the right side.\r\n     *\r\n     * @param {Number} by The length in pixels to shorten the vector by.\r\n     * @returns {Line} Returns itself.\r\n     */\r\n    shortenRight(by) {\r\n        if (this.from.x < this.to.x) {\r\n            this.shortenTo(by);\r\n        } else {\r\n            this.shortenFrom(by);\r\n        }\r\n\r\n        return this;\r\n    }\r\n    \r\n    /**\r\n     * Shorten the left side.\r\n     * \r\n     * @param {Number} by The length in pixels to shorten the vector by.\r\n     * @returns {Line} Returns itself.\r\n     */\r\n    shortenLeft(by) {\r\n        if (this.from.x < this.to.x) {\r\n            this.shortenFrom(by);\r\n        } else {\r\n            this.shortenTo(by);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Shortens this line from both directions by a given value (in pixels).\r\n     *\r\n     * @param {Number} by The length in pixels to shorten the vector by.\r\n     * @returns {Line} This line.\r\n     */\r\n    shorten(by) {\r\n        let f = Vector2.subtract(this.from, this.to);\r\n        \r\n        f.normalize();\r\n        f.multiplyScalar(by / 2.0);\r\n        \r\n        this.to.add(f);\r\n        this.from.subtract(f);\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = Line;"]},"metadata":{},"sourceType":"script"}