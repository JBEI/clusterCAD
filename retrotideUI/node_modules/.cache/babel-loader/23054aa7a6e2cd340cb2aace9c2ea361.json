{"ast":null,"code":"//@ts-check\nconst MathHelper = require('./MathHelper');\n\nconst Vector2 = require('./Vector2');\n\nconst Line = require('./Line');\n\nconst Vertex = require('./Vertex');\n\nconst Ring = require('./Ring');\n\nconst {\n  getChargeText\n} = require('./UtilityFunctions');\n/** \r\n * A class wrapping a canvas element.\r\n * \r\n * @property {HTMLElement} canvas The HTML element for the canvas associated with this CanvasWrapper instance.\r\n * @property {CanvasRenderingContext2D} ctx The CanvasRenderingContext2D of the canvas associated with this CanvasWrapper instance.\r\n * @property {Object} colors The colors object as defined in the SmilesDrawer options.\r\n * @property {Object} opts The SmilesDrawer options.\r\n * @property {Number} drawingWidth The width of the canvas.\r\n * @property {Number} drawingHeight The height of the canvas.\r\n * @property {Number} offsetX The horizontal offset required for centering the drawing.\r\n * @property {Number} offsetY The vertical offset required for centering the drawing.\r\n * @property {Number} fontLarge The large font size in pt.\r\n * @property {Number} fontSmall The small font size in pt.\r\n */\n\n\nclass CanvasWrapper {\n  /**\r\n   * The constructor for the class CanvasWrapper.\r\n   *\r\n   * @param {(String|HTMLElement)} target The canvas id or the canvas HTMLElement.\r\n   * @param {ThemeManager} themeManager Theme manager for setting proper colors.\r\n   * @param {Object} options The smiles drawer options object.\r\n   */\n  constructor(target, themeManager, options) {\n    if (typeof target === 'string' || target instanceof String) {\n      this.canvas = document.getElementById(target);\n    } else {\n      this.canvas = target;\n    }\n\n    this.ctx = this.canvas.getContext('2d');\n    this.themeManager = themeManager;\n    this.opts = options;\n    this.drawingWidth = 0.0;\n    this.drawingHeight = 0.0;\n    this.offsetX = 0.0;\n    this.offsetY = 0.0;\n    this.fontLarge = this.opts.fontSizeLarge + 'pt Helvetica, Arial, sans-serif';\n    this.fontSmall = this.opts.fontSizeSmall + 'pt Helvetica, Arial, sans-serif';\n    this.updateSize(this.opts.width, this.opts.height);\n    this.ctx.font = this.fontLarge;\n    this.hydrogenWidth = this.ctx.measureText('H').width;\n    this.halfHydrogenWidth = this.hydrogenWidth / 2.0;\n    this.halfBondThickness = this.opts.bondThickness / 2.0; // TODO: Find out why clear was here.\n    // this.clear();\n  }\n  /**\r\n   * Update the width and height of the canvas\r\n   * \r\n   * @param {Number} width \r\n   * @param {Number} height \r\n   */\n\n\n  updateSize(width, height) {\n    this.devicePixelRatio = window.devicePixelRatio || 1;\n    this.backingStoreRatio = this.ctx.webkitBackingStorePixelRatio || this.ctx.mozBackingStorePixelRatio || this.ctx.msBackingStorePixelRatio || this.ctx.oBackingStorePixelRatio || this.ctx.backingStorePixelRatio || 1;\n    this.ratio = this.devicePixelRatio / this.backingStoreRatio;\n\n    if (this.ratio !== 1) {\n      this.canvas.width = width * this.ratio;\n      this.canvas.height = height * this.ratio;\n      this.canvas.style.width = width + 'px';\n      this.canvas.style.height = height + 'px';\n      this.ctx.setTransform(this.ratio, 0, 0, this.ratio, 0, 0);\n    } else {\n      this.canvas.width = width * this.ratio;\n      this.canvas.height = height * this.ratio;\n    }\n  }\n  /**\r\n   * Sets a provided theme.\r\n   *\r\n   * @param {Object} theme A theme from the smiles drawer options.\r\n   */\n\n\n  setTheme(theme) {\n    this.colors = theme;\n  }\n  /**\r\n   * Scale the canvas based on vertex positions.\r\n   *\r\n   * @param {Vertex[]} vertices An array of vertices containing the vertices associated with the current molecule.\r\n   */\n\n\n  scale(vertices) {\n    // Figure out the final size of the image\n    let maxX = -Number.MAX_VALUE;\n    let maxY = -Number.MAX_VALUE;\n    let minX = Number.MAX_VALUE;\n    let minY = Number.MAX_VALUE;\n\n    for (var i = 0; i < vertices.length; i++) {\n      if (!vertices[i].value.isDrawn) {\n        continue;\n      }\n\n      let p = vertices[i].position;\n      if (maxX < p.x) maxX = p.x;\n      if (maxY < p.y) maxY = p.y;\n      if (minX > p.x) minX = p.x;\n      if (minY > p.y) minY = p.y;\n    } // Add padding\n\n\n    var padding = this.opts.padding;\n    maxX += padding;\n    maxY += padding;\n    minX -= padding;\n    minY -= padding;\n    this.drawingWidth = maxX - minX;\n    this.drawingHeight = maxY - minY;\n    var scaleX = this.canvas.offsetWidth / this.drawingWidth;\n    var scaleY = this.canvas.offsetHeight / this.drawingHeight;\n    var scale = scaleX < scaleY ? scaleX : scaleY;\n    this.ctx.scale(scale, scale);\n    this.offsetX = -minX;\n    this.offsetY = -minY; // Center\n\n    if (scaleX < scaleY) {\n      this.offsetY += this.canvas.offsetHeight / (2.0 * scale) - this.drawingHeight / 2.0;\n    } else {\n      this.offsetX += this.canvas.offsetWidth / (2.0 * scale) - this.drawingWidth / 2.0;\n    }\n  }\n  /**\r\n   * Resets the transform of the canvas.\r\n   */\n\n\n  reset() {\n    this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n  }\n  /**\r\n   * Returns the hex code of a color associated with a key from the current theme.\r\n   *\r\n   * @param {String} key The color key in the theme (e.g. C, N, BACKGROUND, ...).\r\n   * @returns {String} A color hex value.\r\n   */\n\n\n  getColor(key) {\n    key = key.toUpperCase();\n\n    if (key in this.colors) {\n      return this.colors[key];\n    }\n\n    return this.colors['C'];\n  }\n  /**\r\n   * Draws a circle to a canvas context.\r\n   * @param {Number} x The x coordinate of the circles center.\r\n   * @param {Number} y The y coordinate of the circles center.\r\n   * @param {Number} radius The radius of the circle\r\n   * @param {String} color A hex encoded color.\r\n   * @param {Boolean} [fill=true] Whether to fill or stroke the circle.\r\n   * @param {Boolean} [debug=false] Draw in debug mode.\r\n   * @param {String} [debugText=''] A debug message.\r\n   */\n\n\n  drawCircle(x, y, radius, color, fill = true, debug = false, debugText = '') {\n    let ctx = this.ctx;\n    let offsetX = this.offsetX;\n    let offsetY = this.offsetY;\n    ctx.save();\n    ctx.lineWidth = 1.5;\n    ctx.beginPath();\n    ctx.arc(x + offsetX, y + offsetY, radius, 0, MathHelper.twoPI, true);\n    ctx.closePath();\n\n    if (debug) {\n      if (fill) {\n        ctx.fillStyle = '#f00';\n        ctx.fill();\n      } else {\n        ctx.strokeStyle = '#f00';\n        ctx.stroke();\n      }\n\n      this.drawDebugText(x, y, debugText);\n    } else {\n      if (fill) {\n        ctx.fillStyle = color;\n        ctx.fill();\n      } else {\n        ctx.strokeStyle = color;\n        ctx.stroke();\n      }\n    }\n\n    ctx.restore();\n  }\n  /**\r\n   * Draw a line to a canvas.\r\n   *\r\n   * @param {Line} line A line.\r\n   * @param {Boolean} [dashed=false] Whether or not the line is dashed.\r\n   * @param {Number} [alpha=1.0] The alpha value of the color.\r\n   */\n\n\n  drawLine(line, dashed = false, alpha = 1.0) {\n    let ctx = this.ctx;\n    let offsetX = this.offsetX;\n    let offsetY = this.offsetY; // Add a shadow behind the line\n\n    let shortLine = line.clone().shorten(4.0);\n    let l = shortLine.getLeftVector().clone();\n    let r = shortLine.getRightVector().clone();\n    l.x += offsetX;\n    l.y += offsetY;\n    r.x += offsetX;\n    r.y += offsetY; // Draw the \"shadow\"\n\n    if (!dashed) {\n      ctx.save();\n      ctx.globalCompositeOperation = 'destination-out';\n      ctx.beginPath();\n      ctx.moveTo(l.x, l.y);\n      ctx.lineTo(r.x, r.y);\n      ctx.lineCap = 'round';\n      ctx.lineWidth = this.opts.bondThickness + 1.2;\n      ctx.strokeStyle = this.themeManager.getColor('BACKGROUND');\n      ctx.stroke();\n      ctx.globalCompositeOperation = 'source-over';\n      ctx.restore();\n    }\n\n    l = line.getLeftVector().clone();\n    r = line.getRightVector().clone();\n    l.x += offsetX;\n    l.y += offsetY;\n    r.x += offsetX;\n    r.y += offsetY;\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(l.x, l.y);\n    ctx.lineTo(r.x, r.y);\n    ctx.lineCap = 'round';\n    ctx.lineWidth = this.opts.bondThickness;\n    let gradient = this.ctx.createLinearGradient(l.x, l.y, r.x, r.y);\n    gradient.addColorStop(0.4, this.themeManager.getColor(line.getLeftElement()) || this.themeManager.getColor('C'));\n    gradient.addColorStop(0.6, this.themeManager.getColor(line.getRightElement()) || this.themeManager.getColor('C'));\n\n    if (dashed) {\n      ctx.setLineDash([1, 1.5]);\n      ctx.lineWidth = this.opts.bondThickness / 1.5;\n    }\n\n    if (alpha < 1.0) {\n      ctx.globalAlpha = alpha;\n    }\n\n    ctx.strokeStyle = gradient;\n    ctx.stroke();\n    ctx.restore();\n  }\n  /**\r\n   * Draw a wedge on the canvas.\r\n   *\r\n   * @param {Line} line A line.\r\n   * @param {Number} width The wedge width.\r\n   */\n\n\n  drawWedge(line, width = 1.0) {\n    if (isNaN(line.from.x) || isNaN(line.from.y) || isNaN(line.to.x) || isNaN(line.to.y)) {\n      return;\n    }\n\n    let ctx = this.ctx;\n    let offsetX = this.offsetX;\n    let offsetY = this.offsetY; // Add a shadow behind the line\n\n    let shortLine = line.clone().shorten(5.0);\n    let l = shortLine.getLeftVector().clone();\n    let r = shortLine.getRightVector().clone();\n    l.x += offsetX;\n    l.y += offsetY;\n    r.x += offsetX;\n    r.y += offsetY;\n    l = line.getLeftVector().clone();\n    r = line.getRightVector().clone();\n    l.x += offsetX;\n    l.y += offsetY;\n    r.x += offsetX;\n    r.y += offsetY;\n    ctx.save();\n    let normals = Vector2.normals(l, r);\n    normals[0].normalize();\n    normals[1].normalize();\n    let isRightChiralCenter = line.getRightChiral();\n    let start = l;\n    let end = r;\n\n    if (isRightChiralCenter) {\n      start = r;\n      end = l;\n    }\n\n    let t = Vector2.add(start, Vector2.multiplyScalar(normals[0], this.halfBondThickness));\n    let u = Vector2.add(end, Vector2.multiplyScalar(normals[0], 1.5 + this.halfBondThickness));\n    let v = Vector2.add(end, Vector2.multiplyScalar(normals[1], 1.5 + this.halfBondThickness));\n    let w = Vector2.add(start, Vector2.multiplyScalar(normals[1], this.halfBondThickness));\n    ctx.beginPath();\n    ctx.moveTo(t.x, t.y);\n    ctx.lineTo(u.x, u.y);\n    ctx.lineTo(v.x, v.y);\n    ctx.lineTo(w.x, w.y);\n    let gradient = this.ctx.createRadialGradient(r.x, r.y, this.opts.bondLength, r.x, r.y, 0);\n    gradient.addColorStop(0.4, this.themeManager.getColor(line.getLeftElement()) || this.themeManager.getColor('C'));\n    gradient.addColorStop(0.6, this.themeManager.getColor(line.getRightElement()) || this.themeManager.getColor('C'));\n    ctx.fillStyle = gradient;\n    ctx.fill();\n    ctx.restore();\n  }\n  /**\r\n   * Draw a dashed wedge on the canvas.\r\n   *\r\n   * @param {Line} line A line.\r\n   */\n\n\n  drawDashedWedge(line) {\n    if (isNaN(line.from.x) || isNaN(line.from.y) || isNaN(line.to.x) || isNaN(line.to.y)) {\n      return;\n    }\n\n    let ctx = this.ctx;\n    let offsetX = this.offsetX;\n    let offsetY = this.offsetY;\n    let l = line.getLeftVector().clone();\n    let r = line.getRightVector().clone();\n    l.x += offsetX;\n    l.y += offsetY;\n    r.x += offsetX;\n    r.y += offsetY;\n    ctx.save();\n    let normals = Vector2.normals(l, r);\n    normals[0].normalize();\n    normals[1].normalize();\n    let isRightChiralCenter = line.getRightChiral();\n    let start;\n    let end;\n    let sStart;\n    let sEnd;\n    let shortLine = line.clone();\n\n    if (isRightChiralCenter) {\n      start = r;\n      end = l;\n      shortLine.shortenRight(1.0);\n      sStart = shortLine.getRightVector().clone();\n      sEnd = shortLine.getLeftVector().clone();\n    } else {\n      start = l;\n      end = r;\n      shortLine.shortenLeft(1.0);\n      sStart = shortLine.getLeftVector().clone();\n      sEnd = shortLine.getRightVector().clone();\n    }\n\n    sStart.x += offsetX;\n    sStart.y += offsetY;\n    sEnd.x += offsetX;\n    sEnd.y += offsetY;\n    let dir = Vector2.subtract(end, start).normalize();\n    ctx.strokeStyle = this.themeManager.getColor('C');\n    ctx.lineCap = 'round';\n    ctx.lineWidth = this.opts.bondThickness;\n    ctx.beginPath();\n    let length = line.getLength();\n    let step = 1.25 / (length / (this.opts.bondThickness * 3.0));\n    let changed = false;\n\n    for (var t = 0.0; t < 1.0; t += step) {\n      let to = Vector2.multiplyScalar(dir, t * length);\n      let startDash = Vector2.add(start, to);\n      let width = 1.5 * t;\n      let dashOffset = Vector2.multiplyScalar(normals[0], width);\n\n      if (!changed && t > 0.5) {\n        ctx.stroke();\n        ctx.beginPath();\n        ctx.strokeStyle = this.themeManager.getColor(line.getRightElement()) || this.themeManager.getColor('C');\n        changed = true;\n      }\n\n      startDash.subtract(dashOffset);\n      ctx.moveTo(startDash.x, startDash.y);\n      startDash.add(Vector2.multiplyScalar(dashOffset, 2.0));\n      ctx.lineTo(startDash.x, startDash.y);\n    }\n\n    ctx.stroke();\n    ctx.restore();\n  }\n  /**\r\n   * Draws a debug text message at a given position\r\n   *\r\n   * @param {Number} x The x coordinate.\r\n   * @param {Number} y The y coordinate.\r\n   * @param {String} text The debug text.\r\n   */\n\n\n  drawDebugText(x, y, text) {\n    let ctx = this.ctx;\n    ctx.save();\n    ctx.font = '5px Droid Sans, sans-serif';\n    ctx.textAlign = 'start';\n    ctx.textBaseline = 'top';\n    ctx.fillStyle = '#ff0000';\n    ctx.fillText(text, x + this.offsetX, y + this.offsetY);\n    ctx.restore();\n  }\n  /**\r\n   * Draw a ball to the canvas.\r\n   *\r\n   * @param {Number} x The x position of the text.\r\n   * @param {Number} y The y position of the text.\r\n   * @param {String} elementName The name of the element (single-letter).\r\n   */\n\n\n  drawBall(x, y, elementName) {\n    let ctx = this.ctx;\n    ctx.save();\n    ctx.beginPath();\n    ctx.arc(x + this.offsetX, y + this.offsetY, this.opts.bondLength / 4.5, 0, MathHelper.twoPI, false);\n    ctx.fillStyle = this.themeManager.getColor(elementName);\n    ctx.fill();\n    ctx.restore();\n  }\n  /**\r\n   * Draw a point to the canvas.\r\n   *\r\n   * @param {Number} x The x position of the point.\r\n   * @param {Number} y The y position of the point.\r\n   * @param {String} elementName The name of the element (single-letter).\r\n   */\n\n\n  drawPoint(x, y, elementName) {\n    let ctx = this.ctx;\n    let offsetX = this.offsetX;\n    let offsetY = this.offsetY;\n    ctx.save();\n    ctx.globalCompositeOperation = 'destination-out';\n    ctx.beginPath();\n    ctx.arc(x + offsetX, y + offsetY, 1.5, 0, MathHelper.twoPI, true);\n    ctx.closePath();\n    ctx.fill();\n    ctx.globalCompositeOperation = 'source-over';\n    ctx.beginPath();\n    ctx.arc(x + this.offsetX, y + this.offsetY, 0.75, 0, MathHelper.twoPI, false);\n    ctx.fillStyle = this.themeManager.getColor(elementName);\n    ctx.fill();\n    ctx.restore();\n  }\n  /**\r\n   * Draw a text to the canvas.\r\n   *\r\n   * @param {Number} x The x position of the text.\r\n   * @param {Number} y The y position of the text.\r\n   * @param {String} elementName The name of the element (single-letter).\r\n   * @param {Number} hydrogens The number of hydrogen atoms.\r\n   * @param {String} direction The direction of the text in relation to the associated vertex.\r\n   * @param {Boolean} isTerminal A boolean indicating whether or not the vertex is terminal.\r\n   * @param {Number} charge The charge of the atom.\r\n   * @param {Number} isotope The isotope number.\r\n   * @param {Object} attachedPseudoElement A map with containing information for pseudo elements or concatinated elements. The key is comprised of the element symbol and the hydrogen count.\r\n   * @param {String} attachedPseudoElement.element The element symbol.\r\n   * @param {Number} attachedPseudoElement.count The number of occurences that match the key.\r\n   * @param {Number} attachedPseudoElement.hyrogenCount The number of hydrogens attached to each atom matching the key.\r\n   */\n\n\n  drawText(x, y, elementName, hydrogens, direction, isTerminal, charge, isotope, attachedPseudoElement = {}) {\n    let ctx = this.ctx;\n    let offsetX = this.offsetX;\n    let offsetY = this.offsetY;\n    ctx.save();\n    ctx.textAlign = 'start';\n    ctx.textBaseline = 'alphabetic';\n    let pseudoElementHandled = false; // Charge\n\n    let chargeText = '';\n    let chargeWidth = 0;\n\n    if (charge) {\n      chargeText = getChargeText(charge);\n      ctx.font = this.fontSmall;\n      chargeWidth = ctx.measureText(chargeText).width;\n    }\n\n    let isotopeText = '0';\n    let isotopeWidth = 0;\n\n    if (isotope > 0) {\n      isotopeText = isotope.toString();\n      ctx.font = this.fontSmall;\n      isotopeWidth = ctx.measureText(isotopeText).width;\n    } // TODO: Better handle exceptions\n    // Exception for nitro (draw nitro as NO2 instead of N+O-O)\n\n\n    if (charge === 1 && elementName === 'N' && attachedPseudoElement.hasOwnProperty('0O') && attachedPseudoElement.hasOwnProperty('0O-1')) {\n      attachedPseudoElement = {\n        '0O': {\n          element: 'O',\n          count: 2,\n          hydrogenCount: 0,\n          previousElement: 'C',\n          charge: ''\n        }\n      };\n      charge = 0;\n    }\n\n    ctx.font = this.fontLarge;\n    ctx.fillStyle = this.themeManager.getColor('BACKGROUND');\n    let dim = ctx.measureText(elementName);\n    dim.totalWidth = dim.width + chargeWidth;\n    dim.height = parseInt(this.fontLarge, 10);\n    let r = dim.width > this.opts.fontSizeLarge ? dim.width : this.opts.fontSizeLarge;\n    r /= 1.5;\n    ctx.globalCompositeOperation = 'destination-out';\n    ctx.beginPath();\n    ctx.arc(x + offsetX, y + offsetY, r, 0, MathHelper.twoPI, true);\n    ctx.closePath();\n    ctx.fill();\n    ctx.globalCompositeOperation = 'source-over';\n    let cursorPos = -dim.width / 2.0;\n    let cursorPosLeft = -dim.width / 2.0;\n    ctx.fillStyle = this.themeManager.getColor(elementName);\n    ctx.fillText(elementName, x + offsetX + cursorPos, y + this.opts.halfFontSizeLarge + offsetY);\n    cursorPos += dim.width;\n\n    if (charge) {\n      ctx.font = this.fontSmall;\n      ctx.fillText(chargeText, x + offsetX + cursorPos, y - this.opts.fifthFontSizeSmall + offsetY);\n      cursorPos += chargeWidth;\n    }\n\n    if (isotope > 0) {\n      ctx.font = this.fontSmall;\n      ctx.fillText(isotopeText, x + offsetX + cursorPosLeft - isotopeWidth, y - this.opts.fifthFontSizeSmall + offsetY);\n      cursorPosLeft -= isotopeWidth;\n    }\n\n    ctx.font = this.fontLarge;\n    let hydrogenWidth = 0;\n    let hydrogenCountWidth = 0;\n\n    if (hydrogens === 1) {\n      let hx = x + offsetX;\n      let hy = y + offsetY + this.opts.halfFontSizeLarge;\n      hydrogenWidth = this.hydrogenWidth;\n      cursorPosLeft -= hydrogenWidth;\n\n      if (direction === 'left') {\n        hx += cursorPosLeft;\n      } else if (direction === 'right') {\n        hx += cursorPos;\n      } else if (direction === 'up' && isTerminal) {\n        hx += cursorPos;\n      } else if (direction === 'down' && isTerminal) {\n        hx += cursorPos;\n      } else if (direction === 'up' && !isTerminal) {\n        hy -= this.opts.fontSizeLarge + this.opts.quarterFontSizeLarge;\n        hx -= this.halfHydrogenWidth;\n      } else if (direction === 'down' && !isTerminal) {\n        hy += this.opts.fontSizeLarge + this.opts.quarterFontSizeLarge;\n        hx -= this.halfHydrogenWidth;\n      }\n\n      ctx.fillText('H', hx, hy);\n      cursorPos += hydrogenWidth;\n    } else if (hydrogens > 1) {\n      let hx = x + offsetX;\n      let hy = y + offsetY + this.opts.halfFontSizeLarge;\n      hydrogenWidth = this.hydrogenWidth;\n      ctx.font = this.fontSmall;\n      hydrogenCountWidth = ctx.measureText(hydrogens).width;\n      cursorPosLeft -= hydrogenWidth + hydrogenCountWidth;\n\n      if (direction === 'left') {\n        hx += cursorPosLeft;\n      } else if (direction === 'right') {\n        hx += cursorPos;\n      } else if (direction === 'up' && isTerminal) {\n        hx += cursorPos;\n      } else if (direction === 'down' && isTerminal) {\n        hx += cursorPos;\n      } else if (direction === 'up' && !isTerminal) {\n        hy -= this.opts.fontSizeLarge + this.opts.quarterFontSizeLarge;\n        hx -= this.halfHydrogenWidth;\n      } else if (direction === 'down' && !isTerminal) {\n        hy += this.opts.fontSizeLarge + this.opts.quarterFontSizeLarge;\n        hx -= this.halfHydrogenWidth;\n      }\n\n      ctx.font = this.fontLarge;\n      ctx.fillText('H', hx, hy);\n      ctx.font = this.fontSmall;\n      ctx.fillText(hydrogens, hx + this.halfHydrogenWidth + hydrogenCountWidth, hy + this.opts.fifthFontSizeSmall);\n      cursorPos += hydrogenWidth + this.halfHydrogenWidth + hydrogenCountWidth;\n    }\n\n    if (pseudoElementHandled) {\n      ctx.restore();\n      return;\n    }\n\n    for (let key in attachedPseudoElement) {\n      if (!attachedPseudoElement.hasOwnProperty(key)) {\n        continue;\n      }\n\n      let openParenthesisWidth = 0;\n      let closeParenthesisWidth = 0;\n      let element = attachedPseudoElement[key].element;\n      let elementCount = attachedPseudoElement[key].count;\n      let hydrogenCount = attachedPseudoElement[key].hydrogenCount;\n      let elementCharge = attachedPseudoElement[key].charge;\n      ctx.font = this.fontLarge;\n\n      if (elementCount > 1 && hydrogenCount > 0) {\n        openParenthesisWidth = ctx.measureText('(').width;\n        closeParenthesisWidth = ctx.measureText(')').width;\n      }\n\n      let elementWidth = ctx.measureText(element).width;\n      let elementCountWidth = 0;\n      let elementChargeText = '';\n      let elementChargeWidth = 0;\n      hydrogenWidth = 0;\n\n      if (hydrogenCount > 0) {\n        hydrogenWidth = this.hydrogenWidth;\n      }\n\n      ctx.font = this.fontSmall;\n\n      if (elementCount > 1) {\n        elementCountWidth = ctx.measureText(elementCount).width;\n      }\n\n      if (elementCharge !== 0) {\n        elementChargeText = getChargeText(elementCharge);\n        elementChargeWidth = ctx.measureText(elementChargeText).width;\n      }\n\n      hydrogenCountWidth = 0;\n\n      if (hydrogenCount > 1) {\n        hydrogenCountWidth = ctx.measureText(hydrogenCount).width;\n      }\n\n      ctx.font = this.fontLarge;\n      let hx = x + offsetX;\n      let hy = y + offsetY + this.opts.halfFontSizeLarge;\n      ctx.fillStyle = this.themeManager.getColor(element);\n\n      if (elementCount > 0) {\n        cursorPosLeft -= elementCountWidth;\n      }\n\n      if (elementCount > 1 && hydrogenCount > 0) {\n        if (direction === 'left') {\n          cursorPosLeft -= closeParenthesisWidth;\n          ctx.fillText(')', hx + cursorPosLeft, hy);\n        } else {\n          ctx.fillText('(', hx + cursorPos, hy);\n          cursorPos += openParenthesisWidth;\n        }\n      }\n\n      if (direction === 'left') {\n        cursorPosLeft -= elementWidth;\n        ctx.fillText(element, hx + cursorPosLeft, hy);\n      } else {\n        ctx.fillText(element, hx + cursorPos, hy);\n        cursorPos += elementWidth;\n      }\n\n      if (hydrogenCount > 0) {\n        if (direction === 'left') {\n          cursorPosLeft -= hydrogenWidth + hydrogenCountWidth;\n          ctx.fillText('H', hx + cursorPosLeft, hy);\n\n          if (hydrogenCount > 1) {\n            ctx.font = this.fontSmall;\n            ctx.fillText(hydrogenCount, hx + cursorPosLeft + hydrogenWidth, hy + this.opts.fifthFontSizeSmall);\n          }\n        } else {\n          ctx.fillText('H', hx + cursorPos, hy);\n          cursorPos += hydrogenWidth;\n\n          if (hydrogenCount > 1) {\n            ctx.font = this.fontSmall;\n            ctx.fillText(hydrogenCount, hx + cursorPos, hy + this.opts.fifthFontSizeSmall);\n            cursorPos += hydrogenCountWidth;\n          }\n        }\n      }\n\n      ctx.font = this.fontLarge;\n\n      if (elementCount > 1 && hydrogenCount > 0) {\n        if (direction === 'left') {\n          cursorPosLeft -= openParenthesisWidth;\n          ctx.fillText('(', hx + cursorPosLeft, hy);\n        } else {\n          ctx.fillText(')', hx + cursorPos, hy);\n          cursorPos += closeParenthesisWidth;\n        }\n      }\n\n      ctx.font = this.fontSmall;\n\n      if (elementCount > 1) {\n        if (direction === 'left') {\n          ctx.fillText(elementCount, hx + cursorPosLeft + openParenthesisWidth + closeParenthesisWidth + hydrogenWidth + hydrogenCountWidth + elementWidth, hy + this.opts.fifthFontSizeSmall);\n        } else {\n          ctx.fillText(elementCount, hx + cursorPos, hy + this.opts.fifthFontSizeSmall);\n          cursorPos += elementCountWidth;\n        }\n      }\n\n      if (elementCharge !== 0) {\n        if (direction === 'left') {\n          ctx.fillText(elementChargeText, hx + cursorPosLeft + openParenthesisWidth + closeParenthesisWidth + hydrogenWidth + hydrogenCountWidth + elementWidth, y - this.opts.fifthFontSizeSmall + offsetY);\n        } else {\n          ctx.fillText(elementChargeText, hx + cursorPos, y - this.opts.fifthFontSizeSmall + offsetY);\n          cursorPos += elementChargeWidth;\n        }\n      }\n    }\n\n    ctx.restore();\n  }\n  /**\r\n   * Translate the integer indicating the charge to the appropriate text.\r\n   * @param {Number} charge The integer indicating the charge.\r\n   * @returns {String} A string representing a charge.\r\n   */\n\n\n  getChargeText(charge) {\n    if (charge === 1) {\n      return '+';\n    } else if (charge === 2) {\n      return '2+';\n    } else if (charge === -1) {\n      return '-';\n    } else if (charge === -2) {\n      return '2-';\n    } else {\n      return '';\n    }\n  }\n  /**\r\n   * Draws a dubug dot at a given coordinate and adds text.\r\n   *\r\n   * @param {Number} x The x coordinate.\r\n   * @param {Number} y The y coordindate.\r\n   * @param {String} [debugText=''] A string.\r\n   * @param {String} [color='#f00'] A color in hex form.\r\n   */\n\n\n  drawDebugPoint(x, y, debugText = '', color = '#f00') {\n    this.drawCircle(x, y, 2, color, true, true, debugText);\n  }\n  /**\r\n   * Draws a ring inside a provided ring, indicating aromaticity.\r\n   *\r\n   * @param {Ring} ring A ring.\r\n   */\n\n\n  drawAromaticityRing(ring) {\n    let ctx = this.ctx;\n    let radius = MathHelper.apothemFromSideLength(this.opts.bondLength, ring.getSize());\n    ctx.save();\n    ctx.strokeStyle = this.themeManager.getColor('C');\n    ctx.lineWidth = this.opts.bondThickness;\n    ctx.beginPath();\n    ctx.arc(ring.center.x + this.offsetX, ring.center.y + this.offsetY, radius - this.opts.bondSpacing, 0, Math.PI * 2, true);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n  }\n  /**\r\n   * Clear the canvas.\r\n   *\r\n   */\n\n\n  clear() {\n    this.ctx.clearRect(0, 0, this.canvas.offsetWidth, this.canvas.offsetHeight);\n  }\n\n}\n\nmodule.exports = CanvasWrapper;","map":{"version":3,"sources":["/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/smiles-drawer/src/CanvasWrapper.js"],"names":["MathHelper","require","Vector2","Line","Vertex","Ring","getChargeText","CanvasWrapper","constructor","target","themeManager","options","String","canvas","document","getElementById","ctx","getContext","opts","drawingWidth","drawingHeight","offsetX","offsetY","fontLarge","fontSizeLarge","fontSmall","fontSizeSmall","updateSize","width","height","font","hydrogenWidth","measureText","halfHydrogenWidth","halfBondThickness","bondThickness","devicePixelRatio","window","backingStoreRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","ratio","style","setTransform","setTheme","theme","colors","scale","vertices","maxX","Number","MAX_VALUE","maxY","minX","minY","i","length","value","isDrawn","p","position","x","y","padding","scaleX","offsetWidth","scaleY","offsetHeight","reset","getColor","key","toUpperCase","drawCircle","radius","color","fill","debug","debugText","save","lineWidth","beginPath","arc","twoPI","closePath","fillStyle","strokeStyle","stroke","drawDebugText","restore","drawLine","line","dashed","alpha","shortLine","clone","shorten","l","getLeftVector","r","getRightVector","globalCompositeOperation","moveTo","lineTo","lineCap","gradient","createLinearGradient","addColorStop","getLeftElement","getRightElement","setLineDash","globalAlpha","drawWedge","isNaN","from","to","normals","normalize","isRightChiralCenter","getRightChiral","start","end","t","add","multiplyScalar","u","v","w","createRadialGradient","bondLength","drawDashedWedge","sStart","sEnd","shortenRight","shortenLeft","dir","subtract","getLength","step","changed","startDash","dashOffset","text","textAlign","textBaseline","fillText","drawBall","elementName","drawPoint","drawText","hydrogens","direction","isTerminal","charge","isotope","attachedPseudoElement","pseudoElementHandled","chargeText","chargeWidth","isotopeText","isotopeWidth","toString","hasOwnProperty","element","count","hydrogenCount","previousElement","dim","totalWidth","parseInt","cursorPos","cursorPosLeft","halfFontSizeLarge","fifthFontSizeSmall","hydrogenCountWidth","hx","hy","quarterFontSizeLarge","openParenthesisWidth","closeParenthesisWidth","elementCount","elementCharge","elementWidth","elementCountWidth","elementChargeText","elementChargeWidth","drawDebugPoint","drawAromaticityRing","ring","apothemFromSideLength","getSize","center","bondSpacing","Math","PI","clear","clearRect","module","exports"],"mappings":"AAAA;AACA,MAAMA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAA1B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,QAAD,CAApB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMI,IAAI,GAAGJ,OAAO,CAAC,QAAD,CAApB;;AACA,MAAM;AAAEK,EAAAA;AAAF,IAAoBL,OAAO,CAAC,oBAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMM,aAAN,CAAoB;AAChB;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,MAAD,EAASC,YAAT,EAAuBC,OAAvB,EAAgC;AACvC,QAAI,OAAOF,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,YAAYG,MAApD,EAA4D;AACxD,WAAKC,MAAL,GAAcC,QAAQ,CAACC,cAAT,CAAwBN,MAAxB,CAAd;AACH,KAFD,MAEO;AACH,WAAKI,MAAL,GAAcJ,MAAd;AACH;;AAED,SAAKO,GAAL,GAAW,KAAKH,MAAL,CAAYI,UAAZ,CAAuB,IAAvB,CAAX;AACA,SAAKP,YAAL,GAAoBA,YAApB;AACA,SAAKQ,IAAL,GAAYP,OAAZ;AACA,SAAKQ,YAAL,GAAoB,GAApB;AACA,SAAKC,aAAL,GAAqB,GAArB;AACA,SAAKC,OAAL,GAAe,GAAf;AACA,SAAKC,OAAL,GAAe,GAAf;AAEA,SAAKC,SAAL,GAAiB,KAAKL,IAAL,CAAUM,aAAV,GAA0B,iCAA3C;AACA,SAAKC,SAAL,GAAiB,KAAKP,IAAL,CAAUQ,aAAV,GAA0B,iCAA3C;AAEA,SAAKC,UAAL,CAAgB,KAAKT,IAAL,CAAUU,KAA1B,EAAiC,KAAKV,IAAL,CAAUW,MAA3C;AAEA,SAAKb,GAAL,CAASc,IAAT,GAAgB,KAAKP,SAArB;AACA,SAAKQ,aAAL,GAAqB,KAAKf,GAAL,CAASgB,WAAT,CAAqB,GAArB,EAA0BJ,KAA/C;AACA,SAAKK,iBAAL,GAAyB,KAAKF,aAAL,GAAqB,GAA9C;AACA,SAAKG,iBAAL,GAAyB,KAAKhB,IAAL,CAAUiB,aAAV,GAA0B,GAAnD,CAvBuC,CAyBvC;AACA;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIR,EAAAA,UAAU,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACtB,SAAKO,gBAAL,GAAwBC,MAAM,CAACD,gBAAP,IAA2B,CAAnD;AACA,SAAKE,iBAAL,GAAyB,KAAKtB,GAAL,CAASuB,4BAAT,IAAyC,KAAKvB,GAAL,CAASwB,yBAAlD,IACrB,KAAKxB,GAAL,CAASyB,wBADY,IACgB,KAAKzB,GAAL,CAAS0B,uBADzB,IAErB,KAAK1B,GAAL,CAAS2B,sBAFY,IAEc,CAFvC;AAGA,SAAKC,KAAL,GAAa,KAAKR,gBAAL,GAAwB,KAAKE,iBAA1C;;AAEA,QAAI,KAAKM,KAAL,KAAe,CAAnB,EAAsB;AAClB,WAAK/B,MAAL,CAAYe,KAAZ,GAAoBA,KAAK,GAAG,KAAKgB,KAAjC;AACA,WAAK/B,MAAL,CAAYgB,MAAZ,GAAqBA,MAAM,GAAG,KAAKe,KAAnC;AACA,WAAK/B,MAAL,CAAYgC,KAAZ,CAAkBjB,KAAlB,GAA0BA,KAAK,GAAG,IAAlC;AACA,WAAKf,MAAL,CAAYgC,KAAZ,CAAkBhB,MAAlB,GAA2BA,MAAM,GAAG,IAApC;AACA,WAAKb,GAAL,CAAS8B,YAAT,CAAsB,KAAKF,KAA3B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,KAAKA,KAA7C,EAAoD,CAApD,EAAuD,CAAvD;AACH,KAND,MAMO;AACH,WAAK/B,MAAL,CAAYe,KAAZ,GAAoBA,KAAK,GAAG,KAAKgB,KAAjC;AACA,WAAK/B,MAAL,CAAYgB,MAAZ,GAAqBA,MAAM,GAAG,KAAKe,KAAnC;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;;;AACIG,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACZ,SAAKC,MAAL,GAAcD,KAAd;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIE,EAAAA,KAAK,CAACC,QAAD,EAAW;AACZ;AACA,QAAIC,IAAI,GAAG,CAACC,MAAM,CAACC,SAAnB;AACA,QAAIC,IAAI,GAAG,CAACF,MAAM,CAACC,SAAnB;AACA,QAAIE,IAAI,GAAGH,MAAM,CAACC,SAAlB;AACA,QAAIG,IAAI,GAAGJ,MAAM,CAACC,SAAlB;;AAEA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,QAAQ,CAACQ,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,UAAI,CAACP,QAAQ,CAACO,CAAD,CAAR,CAAYE,KAAZ,CAAkBC,OAAvB,EAAgC;AAC5B;AACH;;AAED,UAAIC,CAAC,GAAGX,QAAQ,CAACO,CAAD,CAAR,CAAYK,QAApB;AAEA,UAAIX,IAAI,GAAGU,CAAC,CAACE,CAAb,EAAgBZ,IAAI,GAAGU,CAAC,CAACE,CAAT;AAChB,UAAIT,IAAI,GAAGO,CAAC,CAACG,CAAb,EAAgBV,IAAI,GAAGO,CAAC,CAACG,CAAT;AAChB,UAAIT,IAAI,GAAGM,CAAC,CAACE,CAAb,EAAgBR,IAAI,GAAGM,CAAC,CAACE,CAAT;AAChB,UAAIP,IAAI,GAAGK,CAAC,CAACG,CAAb,EAAgBR,IAAI,GAAGK,CAAC,CAACG,CAAT;AACnB,KAlBW,CAoBZ;;;AACA,QAAIC,OAAO,GAAG,KAAKhD,IAAL,CAAUgD,OAAxB;AACAd,IAAAA,IAAI,IAAIc,OAAR;AACAX,IAAAA,IAAI,IAAIW,OAAR;AACAV,IAAAA,IAAI,IAAIU,OAAR;AACAT,IAAAA,IAAI,IAAIS,OAAR;AAEA,SAAK/C,YAAL,GAAoBiC,IAAI,GAAGI,IAA3B;AACA,SAAKpC,aAAL,GAAqBmC,IAAI,GAAGE,IAA5B;AAEA,QAAIU,MAAM,GAAG,KAAKtD,MAAL,CAAYuD,WAAZ,GAA0B,KAAKjD,YAA5C;AACA,QAAIkD,MAAM,GAAG,KAAKxD,MAAL,CAAYyD,YAAZ,GAA2B,KAAKlD,aAA7C;AAEA,QAAI8B,KAAK,GAAIiB,MAAM,GAAGE,MAAV,GAAoBF,MAApB,GAA6BE,MAAzC;AAEA,SAAKrD,GAAL,CAASkC,KAAT,CAAeA,KAAf,EAAsBA,KAAtB;AAEA,SAAK7B,OAAL,GAAe,CAACmC,IAAhB;AACA,SAAKlC,OAAL,GAAe,CAACmC,IAAhB,CAtCY,CAwCZ;;AACA,QAAIU,MAAM,GAAGE,MAAb,EAAqB;AACjB,WAAK/C,OAAL,IAAgB,KAAKT,MAAL,CAAYyD,YAAZ,IAA4B,MAAMpB,KAAlC,IAA2C,KAAK9B,aAAL,GAAqB,GAAhF;AACH,KAFD,MAEO;AACH,WAAKC,OAAL,IAAgB,KAAKR,MAAL,CAAYuD,WAAZ,IAA2B,MAAMlB,KAAjC,IAA0C,KAAK/B,YAAL,GAAoB,GAA9E;AACH;AACJ;AAED;AACJ;AACA;;;AACIoD,EAAAA,KAAK,GAAG;AACJ,SAAKvD,GAAL,CAAS8B,YAAT,CAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACI0B,EAAAA,QAAQ,CAACC,GAAD,EAAM;AACVA,IAAAA,GAAG,GAAGA,GAAG,CAACC,WAAJ,EAAN;;AAEA,QAAID,GAAG,IAAI,KAAKxB,MAAhB,EAAwB;AACpB,aAAO,KAAKA,MAAL,CAAYwB,GAAZ,CAAP;AACH;;AAED,WAAO,KAAKxB,MAAL,CAAY,GAAZ,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI0B,EAAAA,UAAU,CAACX,CAAD,EAAIC,CAAJ,EAAOW,MAAP,EAAeC,KAAf,EAAsBC,IAAI,GAAG,IAA7B,EAAmCC,KAAK,GAAG,KAA3C,EAAkDC,SAAS,GAAG,EAA9D,EAAkE;AACxE,QAAIhE,GAAG,GAAG,KAAKA,GAAf;AACA,QAAIK,OAAO,GAAG,KAAKA,OAAnB;AACA,QAAIC,OAAO,GAAG,KAAKA,OAAnB;AAEAN,IAAAA,GAAG,CAACiE,IAAJ;AACAjE,IAAAA,GAAG,CAACkE,SAAJ,GAAgB,GAAhB;AACAlE,IAAAA,GAAG,CAACmE,SAAJ;AACAnE,IAAAA,GAAG,CAACoE,GAAJ,CAAQpB,CAAC,GAAG3C,OAAZ,EAAqB4C,CAAC,GAAG3C,OAAzB,EAAkCsD,MAAlC,EAA0C,CAA1C,EAA6C5E,UAAU,CAACqF,KAAxD,EAA+D,IAA/D;AACArE,IAAAA,GAAG,CAACsE,SAAJ;;AAEA,QAAIP,KAAJ,EAAW;AACP,UAAID,IAAJ,EAAU;AACN9D,QAAAA,GAAG,CAACuE,SAAJ,GAAgB,MAAhB;AACAvE,QAAAA,GAAG,CAAC8D,IAAJ;AACH,OAHD,MAGO;AACH9D,QAAAA,GAAG,CAACwE,WAAJ,GAAkB,MAAlB;AACAxE,QAAAA,GAAG,CAACyE,MAAJ;AACH;;AAED,WAAKC,aAAL,CAAmB1B,CAAnB,EAAsBC,CAAtB,EAAyBe,SAAzB;AACH,KAVD,MAUO;AACH,UAAIF,IAAJ,EAAU;AACN9D,QAAAA,GAAG,CAACuE,SAAJ,GAAgBV,KAAhB;AACA7D,QAAAA,GAAG,CAAC8D,IAAJ;AACH,OAHD,MAGO;AACH9D,QAAAA,GAAG,CAACwE,WAAJ,GAAkBX,KAAlB;AACA7D,QAAAA,GAAG,CAACyE,MAAJ;AACH;AACJ;;AAEDzE,IAAAA,GAAG,CAAC2E,OAAJ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,QAAQ,CAACC,IAAD,EAAOC,MAAM,GAAG,KAAhB,EAAuBC,KAAK,GAAG,GAA/B,EAAoC;AACxC,QAAI/E,GAAG,GAAG,KAAKA,GAAf;AACA,QAAIK,OAAO,GAAG,KAAKA,OAAnB;AACA,QAAIC,OAAO,GAAG,KAAKA,OAAnB,CAHwC,CAKxC;;AACA,QAAI0E,SAAS,GAAGH,IAAI,CAACI,KAAL,GAAaC,OAAb,CAAqB,GAArB,CAAhB;AAEA,QAAIC,CAAC,GAAGH,SAAS,CAACI,aAAV,GAA0BH,KAA1B,EAAR;AACA,QAAII,CAAC,GAAGL,SAAS,CAACM,cAAV,GAA2BL,KAA3B,EAAR;AAEAE,IAAAA,CAAC,CAACnC,CAAF,IAAO3C,OAAP;AACA8E,IAAAA,CAAC,CAAClC,CAAF,IAAO3C,OAAP;AAEA+E,IAAAA,CAAC,CAACrC,CAAF,IAAO3C,OAAP;AACAgF,IAAAA,CAAC,CAACpC,CAAF,IAAO3C,OAAP,CAfwC,CAiBxC;;AACA,QAAI,CAACwE,MAAL,EAAa;AACT9E,MAAAA,GAAG,CAACiE,IAAJ;AACAjE,MAAAA,GAAG,CAACuF,wBAAJ,GAA+B,iBAA/B;AACAvF,MAAAA,GAAG,CAACmE,SAAJ;AACAnE,MAAAA,GAAG,CAACwF,MAAJ,CAAWL,CAAC,CAACnC,CAAb,EAAgBmC,CAAC,CAAClC,CAAlB;AACAjD,MAAAA,GAAG,CAACyF,MAAJ,CAAWJ,CAAC,CAACrC,CAAb,EAAgBqC,CAAC,CAACpC,CAAlB;AACAjD,MAAAA,GAAG,CAAC0F,OAAJ,GAAc,OAAd;AACA1F,MAAAA,GAAG,CAACkE,SAAJ,GAAgB,KAAKhE,IAAL,CAAUiB,aAAV,GAA0B,GAA1C;AACAnB,MAAAA,GAAG,CAACwE,WAAJ,GAAkB,KAAK9E,YAAL,CAAkB8D,QAAlB,CAA2B,YAA3B,CAAlB;AACAxD,MAAAA,GAAG,CAACyE,MAAJ;AACAzE,MAAAA,GAAG,CAACuF,wBAAJ,GAA+B,aAA/B;AACAvF,MAAAA,GAAG,CAAC2E,OAAJ;AACH;;AAEDQ,IAAAA,CAAC,GAAGN,IAAI,CAACO,aAAL,GAAqBH,KAArB,EAAJ;AACAI,IAAAA,CAAC,GAAGR,IAAI,CAACS,cAAL,GAAsBL,KAAtB,EAAJ;AAEAE,IAAAA,CAAC,CAACnC,CAAF,IAAO3C,OAAP;AACA8E,IAAAA,CAAC,CAAClC,CAAF,IAAO3C,OAAP;AAEA+E,IAAAA,CAAC,CAACrC,CAAF,IAAO3C,OAAP;AACAgF,IAAAA,CAAC,CAACpC,CAAF,IAAO3C,OAAP;AAEAN,IAAAA,GAAG,CAACiE,IAAJ;AACAjE,IAAAA,GAAG,CAACmE,SAAJ;AACAnE,IAAAA,GAAG,CAACwF,MAAJ,CAAWL,CAAC,CAACnC,CAAb,EAAgBmC,CAAC,CAAClC,CAAlB;AACAjD,IAAAA,GAAG,CAACyF,MAAJ,CAAWJ,CAAC,CAACrC,CAAb,EAAgBqC,CAAC,CAACpC,CAAlB;AACAjD,IAAAA,GAAG,CAAC0F,OAAJ,GAAc,OAAd;AACA1F,IAAAA,GAAG,CAACkE,SAAJ,GAAgB,KAAKhE,IAAL,CAAUiB,aAA1B;AAEA,QAAIwE,QAAQ,GAAG,KAAK3F,GAAL,CAAS4F,oBAAT,CAA8BT,CAAC,CAACnC,CAAhC,EAAmCmC,CAAC,CAAClC,CAArC,EAAwCoC,CAAC,CAACrC,CAA1C,EAA6CqC,CAAC,CAACpC,CAA/C,CAAf;AACA0C,IAAAA,QAAQ,CAACE,YAAT,CAAsB,GAAtB,EAA2B,KAAKnG,YAAL,CAAkB8D,QAAlB,CAA2BqB,IAAI,CAACiB,cAAL,EAA3B,KACvB,KAAKpG,YAAL,CAAkB8D,QAAlB,CAA2B,GAA3B,CADJ;AAEAmC,IAAAA,QAAQ,CAACE,YAAT,CAAsB,GAAtB,EAA2B,KAAKnG,YAAL,CAAkB8D,QAAlB,CAA2BqB,IAAI,CAACkB,eAAL,EAA3B,KACvB,KAAKrG,YAAL,CAAkB8D,QAAlB,CAA2B,GAA3B,CADJ;;AAGA,QAAIsB,MAAJ,EAAY;AACR9E,MAAAA,GAAG,CAACgG,WAAJ,CAAgB,CAAC,CAAD,EAAI,GAAJ,CAAhB;AACAhG,MAAAA,GAAG,CAACkE,SAAJ,GAAgB,KAAKhE,IAAL,CAAUiB,aAAV,GAA0B,GAA1C;AACH;;AAED,QAAI4D,KAAK,GAAG,GAAZ,EAAiB;AACb/E,MAAAA,GAAG,CAACiG,WAAJ,GAAkBlB,KAAlB;AACH;;AAED/E,IAAAA,GAAG,CAACwE,WAAJ,GAAkBmB,QAAlB;AAEA3F,IAAAA,GAAG,CAACyE,MAAJ;AACAzE,IAAAA,GAAG,CAAC2E,OAAJ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIuB,EAAAA,SAAS,CAACrB,IAAD,EAAOjE,KAAK,GAAG,GAAf,EAAoB;AACzB,QAAIuF,KAAK,CAACtB,IAAI,CAACuB,IAAL,CAAUpD,CAAX,CAAL,IAAsBmD,KAAK,CAACtB,IAAI,CAACuB,IAAL,CAAUnD,CAAX,CAA3B,IACAkD,KAAK,CAACtB,IAAI,CAACwB,EAAL,CAAQrD,CAAT,CADL,IACoBmD,KAAK,CAACtB,IAAI,CAACwB,EAAL,CAAQpD,CAAT,CAD7B,EAC0C;AACtC;AACH;;AAED,QAAIjD,GAAG,GAAG,KAAKA,GAAf;AACA,QAAIK,OAAO,GAAG,KAAKA,OAAnB;AACA,QAAIC,OAAO,GAAG,KAAKA,OAAnB,CARyB,CAUzB;;AACA,QAAI0E,SAAS,GAAGH,IAAI,CAACI,KAAL,GAAaC,OAAb,CAAqB,GAArB,CAAhB;AAEA,QAAIC,CAAC,GAAGH,SAAS,CAACI,aAAV,GAA0BH,KAA1B,EAAR;AACA,QAAII,CAAC,GAAGL,SAAS,CAACM,cAAV,GAA2BL,KAA3B,EAAR;AAEAE,IAAAA,CAAC,CAACnC,CAAF,IAAO3C,OAAP;AACA8E,IAAAA,CAAC,CAAClC,CAAF,IAAO3C,OAAP;AAEA+E,IAAAA,CAAC,CAACrC,CAAF,IAAO3C,OAAP;AACAgF,IAAAA,CAAC,CAACpC,CAAF,IAAO3C,OAAP;AAEA6E,IAAAA,CAAC,GAAGN,IAAI,CAACO,aAAL,GAAqBH,KAArB,EAAJ;AACAI,IAAAA,CAAC,GAAGR,IAAI,CAACS,cAAL,GAAsBL,KAAtB,EAAJ;AAEAE,IAAAA,CAAC,CAACnC,CAAF,IAAO3C,OAAP;AACA8E,IAAAA,CAAC,CAAClC,CAAF,IAAO3C,OAAP;AAEA+E,IAAAA,CAAC,CAACrC,CAAF,IAAO3C,OAAP;AACAgF,IAAAA,CAAC,CAACpC,CAAF,IAAO3C,OAAP;AAEAN,IAAAA,GAAG,CAACiE,IAAJ;AAEA,QAAIqC,OAAO,GAAGpH,OAAO,CAACoH,OAAR,CAAgBnB,CAAhB,EAAmBE,CAAnB,CAAd;AAEAiB,IAAAA,OAAO,CAAC,CAAD,CAAP,CAAWC,SAAX;AACAD,IAAAA,OAAO,CAAC,CAAD,CAAP,CAAWC,SAAX;AAEA,QAAIC,mBAAmB,GAAG3B,IAAI,CAAC4B,cAAL,EAA1B;AAEA,QAAIC,KAAK,GAAGvB,CAAZ;AACA,QAAIwB,GAAG,GAAGtB,CAAV;;AAEA,QAAImB,mBAAJ,EAAyB;AACrBE,MAAAA,KAAK,GAAGrB,CAAR;AACAsB,MAAAA,GAAG,GAAGxB,CAAN;AACH;;AAED,QAAIyB,CAAC,GAAG1H,OAAO,CAAC2H,GAAR,CAAYH,KAAZ,EAAmBxH,OAAO,CAAC4H,cAAR,CAAuBR,OAAO,CAAC,CAAD,CAA9B,EAAmC,KAAKpF,iBAAxC,CAAnB,CAAR;AACA,QAAI6F,CAAC,GAAG7H,OAAO,CAAC2H,GAAR,CAAYF,GAAZ,EAAiBzH,OAAO,CAAC4H,cAAR,CAAuBR,OAAO,CAAC,CAAD,CAA9B,EAAmC,MAAM,KAAKpF,iBAA9C,CAAjB,CAAR;AACA,QAAI8F,CAAC,GAAG9H,OAAO,CAAC2H,GAAR,CAAYF,GAAZ,EAAiBzH,OAAO,CAAC4H,cAAR,CAAuBR,OAAO,CAAC,CAAD,CAA9B,EAAmC,MAAM,KAAKpF,iBAA9C,CAAjB,CAAR;AACA,QAAI+F,CAAC,GAAG/H,OAAO,CAAC2H,GAAR,CAAYH,KAAZ,EAAmBxH,OAAO,CAAC4H,cAAR,CAAuBR,OAAO,CAAC,CAAD,CAA9B,EAAmC,KAAKpF,iBAAxC,CAAnB,CAAR;AAEAlB,IAAAA,GAAG,CAACmE,SAAJ;AACAnE,IAAAA,GAAG,CAACwF,MAAJ,CAAWoB,CAAC,CAAC5D,CAAb,EAAgB4D,CAAC,CAAC3D,CAAlB;AACAjD,IAAAA,GAAG,CAACyF,MAAJ,CAAWsB,CAAC,CAAC/D,CAAb,EAAgB+D,CAAC,CAAC9D,CAAlB;AACAjD,IAAAA,GAAG,CAACyF,MAAJ,CAAWuB,CAAC,CAAChE,CAAb,EAAgBgE,CAAC,CAAC/D,CAAlB;AACAjD,IAAAA,GAAG,CAACyF,MAAJ,CAAWwB,CAAC,CAACjE,CAAb,EAAgBiE,CAAC,CAAChE,CAAlB;AAEA,QAAI0C,QAAQ,GAAG,KAAK3F,GAAL,CAASkH,oBAAT,CAA8B7B,CAAC,CAACrC,CAAhC,EAAmCqC,CAAC,CAACpC,CAArC,EAAwC,KAAK/C,IAAL,CAAUiH,UAAlD,EAA8D9B,CAAC,CAACrC,CAAhE,EAAmEqC,CAAC,CAACpC,CAArE,EAAwE,CAAxE,CAAf;AACA0C,IAAAA,QAAQ,CAACE,YAAT,CAAsB,GAAtB,EAA2B,KAAKnG,YAAL,CAAkB8D,QAAlB,CAA2BqB,IAAI,CAACiB,cAAL,EAA3B,KACvB,KAAKpG,YAAL,CAAkB8D,QAAlB,CAA2B,GAA3B,CADJ;AAEAmC,IAAAA,QAAQ,CAACE,YAAT,CAAsB,GAAtB,EAA2B,KAAKnG,YAAL,CAAkB8D,QAAlB,CAA2BqB,IAAI,CAACkB,eAAL,EAA3B,KACvB,KAAKrG,YAAL,CAAkB8D,QAAlB,CAA2B,GAA3B,CADJ;AAGAxD,IAAAA,GAAG,CAACuE,SAAJ,GAAgBoB,QAAhB;AAEA3F,IAAAA,GAAG,CAAC8D,IAAJ;AACA9D,IAAAA,GAAG,CAAC2E,OAAJ;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIyC,EAAAA,eAAe,CAACvC,IAAD,EAAO;AAClB,QAAIsB,KAAK,CAACtB,IAAI,CAACuB,IAAL,CAAUpD,CAAX,CAAL,IAAsBmD,KAAK,CAACtB,IAAI,CAACuB,IAAL,CAAUnD,CAAX,CAA3B,IACAkD,KAAK,CAACtB,IAAI,CAACwB,EAAL,CAAQrD,CAAT,CADL,IACoBmD,KAAK,CAACtB,IAAI,CAACwB,EAAL,CAAQpD,CAAT,CAD7B,EAC0C;AACtC;AACH;;AAED,QAAIjD,GAAG,GAAG,KAAKA,GAAf;AACA,QAAIK,OAAO,GAAG,KAAKA,OAAnB;AACA,QAAIC,OAAO,GAAG,KAAKA,OAAnB;AAEA,QAAI6E,CAAC,GAAGN,IAAI,CAACO,aAAL,GAAqBH,KAArB,EAAR;AACA,QAAII,CAAC,GAAGR,IAAI,CAACS,cAAL,GAAsBL,KAAtB,EAAR;AAEAE,IAAAA,CAAC,CAACnC,CAAF,IAAO3C,OAAP;AACA8E,IAAAA,CAAC,CAAClC,CAAF,IAAO3C,OAAP;AAEA+E,IAAAA,CAAC,CAACrC,CAAF,IAAO3C,OAAP;AACAgF,IAAAA,CAAC,CAACpC,CAAF,IAAO3C,OAAP;AAEAN,IAAAA,GAAG,CAACiE,IAAJ;AAEA,QAAIqC,OAAO,GAAGpH,OAAO,CAACoH,OAAR,CAAgBnB,CAAhB,EAAmBE,CAAnB,CAAd;AAEAiB,IAAAA,OAAO,CAAC,CAAD,CAAP,CAAWC,SAAX;AACAD,IAAAA,OAAO,CAAC,CAAD,CAAP,CAAWC,SAAX;AAGA,QAAIC,mBAAmB,GAAG3B,IAAI,CAAC4B,cAAL,EAA1B;AAEA,QAAIC,KAAJ;AACA,QAAIC,GAAJ;AACA,QAAIU,MAAJ;AACA,QAAIC,IAAJ;AAEA,QAAItC,SAAS,GAAGH,IAAI,CAACI,KAAL,EAAhB;;AAEA,QAAIuB,mBAAJ,EAAyB;AACrBE,MAAAA,KAAK,GAAGrB,CAAR;AACAsB,MAAAA,GAAG,GAAGxB,CAAN;AAEAH,MAAAA,SAAS,CAACuC,YAAV,CAAuB,GAAvB;AAEAF,MAAAA,MAAM,GAAGrC,SAAS,CAACM,cAAV,GAA2BL,KAA3B,EAAT;AACAqC,MAAAA,IAAI,GAAGtC,SAAS,CAACI,aAAV,GAA0BH,KAA1B,EAAP;AACH,KARD,MAQO;AACHyB,MAAAA,KAAK,GAAGvB,CAAR;AACAwB,MAAAA,GAAG,GAAGtB,CAAN;AAEAL,MAAAA,SAAS,CAACwC,WAAV,CAAsB,GAAtB;AAEAH,MAAAA,MAAM,GAAGrC,SAAS,CAACI,aAAV,GAA0BH,KAA1B,EAAT;AACAqC,MAAAA,IAAI,GAAGtC,SAAS,CAACM,cAAV,GAA2BL,KAA3B,EAAP;AACH;;AAEDoC,IAAAA,MAAM,CAACrE,CAAP,IAAY3C,OAAZ;AACAgH,IAAAA,MAAM,CAACpE,CAAP,IAAY3C,OAAZ;AACAgH,IAAAA,IAAI,CAACtE,CAAL,IAAU3C,OAAV;AACAiH,IAAAA,IAAI,CAACrE,CAAL,IAAU3C,OAAV;AAEA,QAAImH,GAAG,GAAGvI,OAAO,CAACwI,QAAR,CAAiBf,GAAjB,EAAsBD,KAAtB,EAA6BH,SAA7B,EAAV;AACAvG,IAAAA,GAAG,CAACwE,WAAJ,GAAkB,KAAK9E,YAAL,CAAkB8D,QAAlB,CAA2B,GAA3B,CAAlB;AACAxD,IAAAA,GAAG,CAAC0F,OAAJ,GAAc,OAAd;AACA1F,IAAAA,GAAG,CAACkE,SAAJ,GAAgB,KAAKhE,IAAL,CAAUiB,aAA1B;AACAnB,IAAAA,GAAG,CAACmE,SAAJ;AACA,QAAIxB,MAAM,GAAGkC,IAAI,CAAC8C,SAAL,EAAb;AACA,QAAIC,IAAI,GAAG,QAAQjF,MAAM,IAAI,KAAKzC,IAAL,CAAUiB,aAAV,GAA0B,GAA9B,CAAd,CAAX;AAEA,QAAI0G,OAAO,GAAG,KAAd;;AACA,SAAK,IAAIjB,CAAC,GAAG,GAAb,EAAkBA,CAAC,GAAG,GAAtB,EAA2BA,CAAC,IAAIgB,IAAhC,EAAsC;AAClC,UAAIvB,EAAE,GAAGnH,OAAO,CAAC4H,cAAR,CAAuBW,GAAvB,EAA4Bb,CAAC,GAAGjE,MAAhC,CAAT;AACA,UAAImF,SAAS,GAAG5I,OAAO,CAAC2H,GAAR,CAAYH,KAAZ,EAAmBL,EAAnB,CAAhB;AACA,UAAIzF,KAAK,GAAG,MAAMgG,CAAlB;AACA,UAAImB,UAAU,GAAG7I,OAAO,CAAC4H,cAAR,CAAuBR,OAAO,CAAC,CAAD,CAA9B,EAAmC1F,KAAnC,CAAjB;;AAEA,UAAI,CAACiH,OAAD,IAAYjB,CAAC,GAAG,GAApB,EAAyB;AACvB5G,QAAAA,GAAG,CAACyE,MAAJ;AACAzE,QAAAA,GAAG,CAACmE,SAAJ;AACAnE,QAAAA,GAAG,CAACwE,WAAJ,GAAkB,KAAK9E,YAAL,CAAkB8D,QAAlB,CAA2BqB,IAAI,CAACkB,eAAL,EAA3B,KAAsD,KAAKrG,YAAL,CAAkB8D,QAAlB,CAA2B,GAA3B,CAAxE;AACEqE,QAAAA,OAAO,GAAG,IAAV;AACH;;AAEDC,MAAAA,SAAS,CAACJ,QAAV,CAAmBK,UAAnB;AACA/H,MAAAA,GAAG,CAACwF,MAAJ,CAAWsC,SAAS,CAAC9E,CAArB,EAAwB8E,SAAS,CAAC7E,CAAlC;AACA6E,MAAAA,SAAS,CAACjB,GAAV,CAAc3H,OAAO,CAAC4H,cAAR,CAAuBiB,UAAvB,EAAmC,GAAnC,CAAd;AACA/H,MAAAA,GAAG,CAACyF,MAAJ,CAAWqC,SAAS,CAAC9E,CAArB,EAAwB8E,SAAS,CAAC7E,CAAlC;AACH;;AAEDjD,IAAAA,GAAG,CAACyE,MAAJ;AACAzE,IAAAA,GAAG,CAAC2E,OAAJ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACID,EAAAA,aAAa,CAAC1B,CAAD,EAAIC,CAAJ,EAAO+E,IAAP,EAAa;AACtB,QAAIhI,GAAG,GAAG,KAAKA,GAAf;AAEAA,IAAAA,GAAG,CAACiE,IAAJ;AACAjE,IAAAA,GAAG,CAACc,IAAJ,GAAW,4BAAX;AACAd,IAAAA,GAAG,CAACiI,SAAJ,GAAgB,OAAhB;AACAjI,IAAAA,GAAG,CAACkI,YAAJ,GAAmB,KAAnB;AACAlI,IAAAA,GAAG,CAACuE,SAAJ,GAAgB,SAAhB;AACAvE,IAAAA,GAAG,CAACmI,QAAJ,CAAaH,IAAb,EAAmBhF,CAAC,GAAG,KAAK3C,OAA5B,EAAqC4C,CAAC,GAAG,KAAK3C,OAA9C;AACAN,IAAAA,GAAG,CAAC2E,OAAJ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIyD,EAAAA,QAAQ,CAACpF,CAAD,EAAIC,CAAJ,EAAOoF,WAAP,EAAoB;AACxB,QAAIrI,GAAG,GAAG,KAAKA,GAAf;AAEAA,IAAAA,GAAG,CAACiE,IAAJ;AACAjE,IAAAA,GAAG,CAACmE,SAAJ;AACAnE,IAAAA,GAAG,CAACoE,GAAJ,CAAQpB,CAAC,GAAG,KAAK3C,OAAjB,EAA0B4C,CAAC,GAAG,KAAK3C,OAAnC,EAA4C,KAAKJ,IAAL,CAAUiH,UAAV,GAAuB,GAAnE,EAAwE,CAAxE,EAA2EnI,UAAU,CAACqF,KAAtF,EAA6F,KAA7F;AACArE,IAAAA,GAAG,CAACuE,SAAJ,GAAgB,KAAK7E,YAAL,CAAkB8D,QAAlB,CAA2B6E,WAA3B,CAAhB;AACArI,IAAAA,GAAG,CAAC8D,IAAJ;AACA9D,IAAAA,GAAG,CAAC2E,OAAJ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACI2D,EAAAA,SAAS,CAACtF,CAAD,EAAIC,CAAJ,EAAOoF,WAAP,EAAoB;AACzB,QAAIrI,GAAG,GAAG,KAAKA,GAAf;AACA,QAAIK,OAAO,GAAG,KAAKA,OAAnB;AACA,QAAIC,OAAO,GAAG,KAAKA,OAAnB;AAEAN,IAAAA,GAAG,CAACiE,IAAJ;AACAjE,IAAAA,GAAG,CAACuF,wBAAJ,GAA+B,iBAA/B;AACAvF,IAAAA,GAAG,CAACmE,SAAJ;AACAnE,IAAAA,GAAG,CAACoE,GAAJ,CAAQpB,CAAC,GAAG3C,OAAZ,EAAqB4C,CAAC,GAAG3C,OAAzB,EAAkC,GAAlC,EAAuC,CAAvC,EAA0CtB,UAAU,CAACqF,KAArD,EAA4D,IAA5D;AACArE,IAAAA,GAAG,CAACsE,SAAJ;AACAtE,IAAAA,GAAG,CAAC8D,IAAJ;AACA9D,IAAAA,GAAG,CAACuF,wBAAJ,GAA+B,aAA/B;AAEAvF,IAAAA,GAAG,CAACmE,SAAJ;AACAnE,IAAAA,GAAG,CAACoE,GAAJ,CAAQpB,CAAC,GAAG,KAAK3C,OAAjB,EAA0B4C,CAAC,GAAG,KAAK3C,OAAnC,EAA4C,IAA5C,EAAkD,CAAlD,EAAqDtB,UAAU,CAACqF,KAAhE,EAAuE,KAAvE;AACArE,IAAAA,GAAG,CAACuE,SAAJ,GAAgB,KAAK7E,YAAL,CAAkB8D,QAAlB,CAA2B6E,WAA3B,CAAhB;AACArI,IAAAA,GAAG,CAAC8D,IAAJ;AACA9D,IAAAA,GAAG,CAAC2E,OAAJ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI4D,EAAAA,QAAQ,CAACvF,CAAD,EAAIC,CAAJ,EAAOoF,WAAP,EAAoBG,SAApB,EAA+BC,SAA/B,EAA0CC,UAA1C,EAAsDC,MAAtD,EAA8DC,OAA9D,EAAuEC,qBAAqB,GAAG,EAA/F,EAAmG;AACvG,QAAI7I,GAAG,GAAG,KAAKA,GAAf;AACA,QAAIK,OAAO,GAAG,KAAKA,OAAnB;AACA,QAAIC,OAAO,GAAG,KAAKA,OAAnB;AAEAN,IAAAA,GAAG,CAACiE,IAAJ;AAEAjE,IAAAA,GAAG,CAACiI,SAAJ,GAAgB,OAAhB;AACAjI,IAAAA,GAAG,CAACkI,YAAJ,GAAmB,YAAnB;AAEA,QAAIY,oBAAoB,GAAG,KAA3B,CAVuG,CAYvG;;AACA,QAAIC,UAAU,GAAG,EAAjB;AACA,QAAIC,WAAW,GAAG,CAAlB;;AAEA,QAAIL,MAAJ,EAAY;AACRI,MAAAA,UAAU,GAAGzJ,aAAa,CAACqJ,MAAD,CAA1B;AAEA3I,MAAAA,GAAG,CAACc,IAAJ,GAAW,KAAKL,SAAhB;AACAuI,MAAAA,WAAW,GAAGhJ,GAAG,CAACgB,WAAJ,CAAgB+H,UAAhB,EAA4BnI,KAA1C;AACH;;AAED,QAAIqI,WAAW,GAAG,GAAlB;AACA,QAAIC,YAAY,GAAG,CAAnB;;AAEA,QAAIN,OAAO,GAAG,CAAd,EAAiB;AACbK,MAAAA,WAAW,GAAGL,OAAO,CAACO,QAAR,EAAd;AACAnJ,MAAAA,GAAG,CAACc,IAAJ,GAAW,KAAKL,SAAhB;AACAyI,MAAAA,YAAY,GAAGlJ,GAAG,CAACgB,WAAJ,CAAgBiI,WAAhB,EAA6BrI,KAA5C;AACH,KA9BsG,CAiCvG;AACA;;;AACA,QAAI+H,MAAM,KAAK,CAAX,IAAgBN,WAAW,KAAK,GAAhC,IAAuCQ,qBAAqB,CAACO,cAAtB,CAAqC,IAArC,CAAvC,IACAP,qBAAqB,CAACO,cAAtB,CAAqC,MAArC,CADJ,EACkD;AAC9CP,MAAAA,qBAAqB,GAAG;AAAE,cAAM;AAAEQ,UAAAA,OAAO,EAAE,GAAX;AAAgBC,UAAAA,KAAK,EAAE,CAAvB;AAA0BC,UAAAA,aAAa,EAAE,CAAzC;AAA4CC,UAAAA,eAAe,EAAE,GAA7D;AAAkEb,UAAAA,MAAM,EAAE;AAA1E;AAAR,OAAxB;AACAA,MAAAA,MAAM,GAAG,CAAT;AACH;;AAGD3I,IAAAA,GAAG,CAACc,IAAJ,GAAW,KAAKP,SAAhB;AACAP,IAAAA,GAAG,CAACuE,SAAJ,GAAgB,KAAK7E,YAAL,CAAkB8D,QAAlB,CAA2B,YAA3B,CAAhB;AAEA,QAAIiG,GAAG,GAAGzJ,GAAG,CAACgB,WAAJ,CAAgBqH,WAAhB,CAAV;AAEAoB,IAAAA,GAAG,CAACC,UAAJ,GAAiBD,GAAG,CAAC7I,KAAJ,GAAYoI,WAA7B;AACAS,IAAAA,GAAG,CAAC5I,MAAJ,GAAa8I,QAAQ,CAAC,KAAKpJ,SAAN,EAAiB,EAAjB,CAArB;AAEA,QAAI8E,CAAC,GAAIoE,GAAG,CAAC7I,KAAJ,GAAY,KAAKV,IAAL,CAAUM,aAAvB,GAAwCiJ,GAAG,CAAC7I,KAA5C,GAAoD,KAAKV,IAAL,CAAUM,aAAtE;AACA6E,IAAAA,CAAC,IAAI,GAAL;AAEArF,IAAAA,GAAG,CAACuF,wBAAJ,GAA+B,iBAA/B;AACAvF,IAAAA,GAAG,CAACmE,SAAJ;AACAnE,IAAAA,GAAG,CAACoE,GAAJ,CAAQpB,CAAC,GAAG3C,OAAZ,EAAqB4C,CAAC,GAAG3C,OAAzB,EAAkC+E,CAAlC,EAAqC,CAArC,EAAwCrG,UAAU,CAACqF,KAAnD,EAA0D,IAA1D;AACArE,IAAAA,GAAG,CAACsE,SAAJ;AACAtE,IAAAA,GAAG,CAAC8D,IAAJ;AACA9D,IAAAA,GAAG,CAACuF,wBAAJ,GAA+B,aAA/B;AAEA,QAAIqE,SAAS,GAAG,CAACH,GAAG,CAAC7I,KAAL,GAAa,GAA7B;AACA,QAAIiJ,aAAa,GAAG,CAACJ,GAAG,CAAC7I,KAAL,GAAa,GAAjC;AAEAZ,IAAAA,GAAG,CAACuE,SAAJ,GAAgB,KAAK7E,YAAL,CAAkB8D,QAAlB,CAA2B6E,WAA3B,CAAhB;AACArI,IAAAA,GAAG,CAACmI,QAAJ,CAAaE,WAAb,EAA0BrF,CAAC,GAAG3C,OAAJ,GAAcuJ,SAAxC,EAAmD3G,CAAC,GAAG,KAAK/C,IAAL,CAAU4J,iBAAd,GAAkCxJ,OAArF;AACAsJ,IAAAA,SAAS,IAAIH,GAAG,CAAC7I,KAAjB;;AAEA,QAAI+H,MAAJ,EAAY;AACR3I,MAAAA,GAAG,CAACc,IAAJ,GAAW,KAAKL,SAAhB;AACAT,MAAAA,GAAG,CAACmI,QAAJ,CAAaY,UAAb,EAAyB/F,CAAC,GAAG3C,OAAJ,GAAcuJ,SAAvC,EAAkD3G,CAAC,GAAG,KAAK/C,IAAL,CAAU6J,kBAAd,GAAmCzJ,OAArF;AACAsJ,MAAAA,SAAS,IAAIZ,WAAb;AACH;;AAED,QAAIJ,OAAO,GAAG,CAAd,EAAiB;AACb5I,MAAAA,GAAG,CAACc,IAAJ,GAAW,KAAKL,SAAhB;AACAT,MAAAA,GAAG,CAACmI,QAAJ,CAAac,WAAb,EAA0BjG,CAAC,GAAG3C,OAAJ,GAAcwJ,aAAd,GAA8BX,YAAxD,EAAsEjG,CAAC,GAAG,KAAK/C,IAAL,CAAU6J,kBAAd,GAAmCzJ,OAAzG;AACAuJ,MAAAA,aAAa,IAAIX,YAAjB;AACH;;AAEDlJ,IAAAA,GAAG,CAACc,IAAJ,GAAW,KAAKP,SAAhB;AAEA,QAAIQ,aAAa,GAAG,CAApB;AACA,QAAIiJ,kBAAkB,GAAG,CAAzB;;AAEA,QAAIxB,SAAS,KAAK,CAAlB,EAAqB;AACjB,UAAIyB,EAAE,GAAGjH,CAAC,GAAG3C,OAAb;AACA,UAAI6J,EAAE,GAAGjH,CAAC,GAAG3C,OAAJ,GAAc,KAAKJ,IAAL,CAAU4J,iBAAjC;AAEA/I,MAAAA,aAAa,GAAG,KAAKA,aAArB;AACA8I,MAAAA,aAAa,IAAI9I,aAAjB;;AAEA,UAAI0H,SAAS,KAAK,MAAlB,EAA0B;AACtBwB,QAAAA,EAAE,IAAIJ,aAAN;AACH,OAFD,MAEO,IAAIpB,SAAS,KAAK,OAAlB,EAA2B;AAC9BwB,QAAAA,EAAE,IAAIL,SAAN;AACH,OAFM,MAEA,IAAInB,SAAS,KAAK,IAAd,IAAsBC,UAA1B,EAAsC;AACzCuB,QAAAA,EAAE,IAAIL,SAAN;AACH,OAFM,MAEA,IAAInB,SAAS,KAAK,MAAd,IAAwBC,UAA5B,EAAwC;AAC3CuB,QAAAA,EAAE,IAAIL,SAAN;AACH,OAFM,MAEA,IAAInB,SAAS,KAAK,IAAd,IAAsB,CAACC,UAA3B,EAAuC;AAC1CwB,QAAAA,EAAE,IAAI,KAAKhK,IAAL,CAAUM,aAAV,GAA0B,KAAKN,IAAL,CAAUiK,oBAA1C;AACAF,QAAAA,EAAE,IAAI,KAAKhJ,iBAAX;AACH,OAHM,MAGA,IAAIwH,SAAS,KAAK,MAAd,IAAwB,CAACC,UAA7B,EAAyC;AAC5CwB,QAAAA,EAAE,IAAI,KAAKhK,IAAL,CAAUM,aAAV,GAA0B,KAAKN,IAAL,CAAUiK,oBAA1C;AACAF,QAAAA,EAAE,IAAI,KAAKhJ,iBAAX;AACH;;AAEDjB,MAAAA,GAAG,CAACmI,QAAJ,CAAa,GAAb,EAAkB8B,EAAlB,EAAsBC,EAAtB;AAEAN,MAAAA,SAAS,IAAI7I,aAAb;AACH,KA1BD,MA0BO,IAAIyH,SAAS,GAAG,CAAhB,EAAmB;AACtB,UAAIyB,EAAE,GAAGjH,CAAC,GAAG3C,OAAb;AACA,UAAI6J,EAAE,GAAGjH,CAAC,GAAG3C,OAAJ,GAAc,KAAKJ,IAAL,CAAU4J,iBAAjC;AAEA/I,MAAAA,aAAa,GAAG,KAAKA,aAArB;AACAf,MAAAA,GAAG,CAACc,IAAJ,GAAW,KAAKL,SAAhB;AACAuJ,MAAAA,kBAAkB,GAAGhK,GAAG,CAACgB,WAAJ,CAAgBwH,SAAhB,EAA2B5H,KAAhD;AACAiJ,MAAAA,aAAa,IAAI9I,aAAa,GAAGiJ,kBAAjC;;AAEA,UAAIvB,SAAS,KAAK,MAAlB,EAA0B;AACtBwB,QAAAA,EAAE,IAAIJ,aAAN;AACH,OAFD,MAEO,IAAIpB,SAAS,KAAK,OAAlB,EAA2B;AAC9BwB,QAAAA,EAAE,IAAIL,SAAN;AACH,OAFM,MAEA,IAAInB,SAAS,KAAK,IAAd,IAAsBC,UAA1B,EAAsC;AACzCuB,QAAAA,EAAE,IAAIL,SAAN;AACH,OAFM,MAEA,IAAInB,SAAS,KAAK,MAAd,IAAwBC,UAA5B,EAAwC;AAC3CuB,QAAAA,EAAE,IAAIL,SAAN;AACH,OAFM,MAEA,IAAInB,SAAS,KAAK,IAAd,IAAsB,CAACC,UAA3B,EAAuC;AAC1CwB,QAAAA,EAAE,IAAI,KAAKhK,IAAL,CAAUM,aAAV,GAA0B,KAAKN,IAAL,CAAUiK,oBAA1C;AACAF,QAAAA,EAAE,IAAI,KAAKhJ,iBAAX;AACH,OAHM,MAGA,IAAIwH,SAAS,KAAK,MAAd,IAAwB,CAACC,UAA7B,EAAyC;AAC5CwB,QAAAA,EAAE,IAAI,KAAKhK,IAAL,CAAUM,aAAV,GAA0B,KAAKN,IAAL,CAAUiK,oBAA1C;AACAF,QAAAA,EAAE,IAAI,KAAKhJ,iBAAX;AACH;;AAEDjB,MAAAA,GAAG,CAACc,IAAJ,GAAW,KAAKP,SAAhB;AACAP,MAAAA,GAAG,CAACmI,QAAJ,CAAa,GAAb,EAAkB8B,EAAlB,EAAsBC,EAAtB;AAEAlK,MAAAA,GAAG,CAACc,IAAJ,GAAW,KAAKL,SAAhB;AACAT,MAAAA,GAAG,CAACmI,QAAJ,CAAaK,SAAb,EAAwByB,EAAE,GAAG,KAAKhJ,iBAAV,GAA8B+I,kBAAtD,EAA0EE,EAAE,GAAG,KAAKhK,IAAL,CAAU6J,kBAAzF;AAEAH,MAAAA,SAAS,IAAI7I,aAAa,GAAG,KAAKE,iBAArB,GAAyC+I,kBAAtD;AACH;;AAED,QAAIlB,oBAAJ,EAA0B;AACtB9I,MAAAA,GAAG,CAAC2E,OAAJ;AACA;AACH;;AAED,SAAK,IAAIlB,GAAT,IAAgBoF,qBAAhB,EAAuC;AACnC,UAAI,CAACA,qBAAqB,CAACO,cAAtB,CAAqC3F,GAArC,CAAL,EAAgD;AAC5C;AACH;;AAED,UAAI2G,oBAAoB,GAAG,CAA3B;AACA,UAAIC,qBAAqB,GAAG,CAA5B;AAEA,UAAIhB,OAAO,GAAGR,qBAAqB,CAACpF,GAAD,CAArB,CAA2B4F,OAAzC;AACA,UAAIiB,YAAY,GAAGzB,qBAAqB,CAACpF,GAAD,CAArB,CAA2B6F,KAA9C;AACA,UAAIC,aAAa,GAAGV,qBAAqB,CAACpF,GAAD,CAArB,CAA2B8F,aAA/C;AACA,UAAIgB,aAAa,GAAG1B,qBAAqB,CAACpF,GAAD,CAArB,CAA2BkF,MAA/C;AAEA3I,MAAAA,GAAG,CAACc,IAAJ,GAAW,KAAKP,SAAhB;;AAEA,UAAI+J,YAAY,GAAG,CAAf,IAAoBf,aAAa,GAAG,CAAxC,EAA2C;AACvCa,QAAAA,oBAAoB,GAAGpK,GAAG,CAACgB,WAAJ,CAAgB,GAAhB,EAAqBJ,KAA5C;AACAyJ,QAAAA,qBAAqB,GAAGrK,GAAG,CAACgB,WAAJ,CAAgB,GAAhB,EAAqBJ,KAA7C;AACH;;AAED,UAAI4J,YAAY,GAAGxK,GAAG,CAACgB,WAAJ,CAAgBqI,OAAhB,EAAyBzI,KAA5C;AACA,UAAI6J,iBAAiB,GAAG,CAAxB;AAEA,UAAIC,iBAAiB,GAAG,EAAxB;AACA,UAAIC,kBAAkB,GAAG,CAAzB;AAEA5J,MAAAA,aAAa,GAAG,CAAhB;;AAEA,UAAIwI,aAAa,GAAG,CAApB,EAAuB;AACnBxI,QAAAA,aAAa,GAAG,KAAKA,aAArB;AACH;;AAEDf,MAAAA,GAAG,CAACc,IAAJ,GAAW,KAAKL,SAAhB;;AAEA,UAAI6J,YAAY,GAAG,CAAnB,EAAsB;AAClBG,QAAAA,iBAAiB,GAAGzK,GAAG,CAACgB,WAAJ,CAAgBsJ,YAAhB,EAA8B1J,KAAlD;AACH;;AAED,UAAI2J,aAAa,KAAK,CAAtB,EAAyB;AACrBG,QAAAA,iBAAiB,GAAGpL,aAAa,CAACiL,aAAD,CAAjC;AACAI,QAAAA,kBAAkB,GAAG3K,GAAG,CAACgB,WAAJ,CAAgB0J,iBAAhB,EAAmC9J,KAAxD;AACH;;AAEDoJ,MAAAA,kBAAkB,GAAG,CAArB;;AAEA,UAAIT,aAAa,GAAG,CAApB,EAAuB;AACnBS,QAAAA,kBAAkB,GAAGhK,GAAG,CAACgB,WAAJ,CAAgBuI,aAAhB,EAA+B3I,KAApD;AACH;;AAEDZ,MAAAA,GAAG,CAACc,IAAJ,GAAW,KAAKP,SAAhB;AAEA,UAAI0J,EAAE,GAAGjH,CAAC,GAAG3C,OAAb;AACA,UAAI6J,EAAE,GAAGjH,CAAC,GAAG3C,OAAJ,GAAc,KAAKJ,IAAL,CAAU4J,iBAAjC;AAEA9J,MAAAA,GAAG,CAACuE,SAAJ,GAAgB,KAAK7E,YAAL,CAAkB8D,QAAlB,CAA2B6F,OAA3B,CAAhB;;AAEA,UAAIiB,YAAY,GAAG,CAAnB,EAAsB;AAClBT,QAAAA,aAAa,IAAIY,iBAAjB;AACH;;AAED,UAAIH,YAAY,GAAG,CAAf,IAAoBf,aAAa,GAAG,CAAxC,EAA2C;AACvC,YAAId,SAAS,KAAK,MAAlB,EAA0B;AACtBoB,UAAAA,aAAa,IAAIQ,qBAAjB;AACArK,UAAAA,GAAG,CAACmI,QAAJ,CAAa,GAAb,EAAkB8B,EAAE,GAAGJ,aAAvB,EAAsCK,EAAtC;AACH,SAHD,MAGO;AACHlK,UAAAA,GAAG,CAACmI,QAAJ,CAAa,GAAb,EAAkB8B,EAAE,GAAGL,SAAvB,EAAkCM,EAAlC;AACAN,UAAAA,SAAS,IAAIQ,oBAAb;AACH;AACJ;;AAED,UAAI3B,SAAS,KAAK,MAAlB,EAA0B;AACtBoB,QAAAA,aAAa,IAAIW,YAAjB;AACAxK,QAAAA,GAAG,CAACmI,QAAJ,CAAakB,OAAb,EAAsBY,EAAE,GAAGJ,aAA3B,EAA0CK,EAA1C;AACH,OAHD,MAGO;AACHlK,QAAAA,GAAG,CAACmI,QAAJ,CAAakB,OAAb,EAAsBY,EAAE,GAAGL,SAA3B,EAAsCM,EAAtC;AACAN,QAAAA,SAAS,IAAIY,YAAb;AACH;;AAED,UAAIjB,aAAa,GAAG,CAApB,EAAuB;AACnB,YAAId,SAAS,KAAK,MAAlB,EAA0B;AACtBoB,UAAAA,aAAa,IAAI9I,aAAa,GAAGiJ,kBAAjC;AACAhK,UAAAA,GAAG,CAACmI,QAAJ,CAAa,GAAb,EAAkB8B,EAAE,GAAGJ,aAAvB,EAAsCK,EAAtC;;AAEA,cAAIX,aAAa,GAAG,CAApB,EAAuB;AACnBvJ,YAAAA,GAAG,CAACc,IAAJ,GAAW,KAAKL,SAAhB;AACAT,YAAAA,GAAG,CAACmI,QAAJ,CAAaoB,aAAb,EAA4BU,EAAE,GAAGJ,aAAL,GAAqB9I,aAAjD,EAAgEmJ,EAAE,GAAG,KAAKhK,IAAL,CAAU6J,kBAA/E;AACH;AACJ,SARD,MAQO;AACH/J,UAAAA,GAAG,CAACmI,QAAJ,CAAa,GAAb,EAAkB8B,EAAE,GAAGL,SAAvB,EAAkCM,EAAlC;AACAN,UAAAA,SAAS,IAAI7I,aAAb;;AAEA,cAAIwI,aAAa,GAAG,CAApB,EAAuB;AACnBvJ,YAAAA,GAAG,CAACc,IAAJ,GAAW,KAAKL,SAAhB;AACAT,YAAAA,GAAG,CAACmI,QAAJ,CAAaoB,aAAb,EAA4BU,EAAE,GAAGL,SAAjC,EAA4CM,EAAE,GAAG,KAAKhK,IAAL,CAAU6J,kBAA3D;AACAH,YAAAA,SAAS,IAAII,kBAAb;AACH;AACJ;AACJ;;AAEDhK,MAAAA,GAAG,CAACc,IAAJ,GAAW,KAAKP,SAAhB;;AAEA,UAAI+J,YAAY,GAAG,CAAf,IAAoBf,aAAa,GAAG,CAAxC,EAA2C;AACvC,YAAId,SAAS,KAAK,MAAlB,EAA0B;AACtBoB,UAAAA,aAAa,IAAIO,oBAAjB;AACApK,UAAAA,GAAG,CAACmI,QAAJ,CAAa,GAAb,EAAkB8B,EAAE,GAAGJ,aAAvB,EAAsCK,EAAtC;AACH,SAHD,MAGO;AACHlK,UAAAA,GAAG,CAACmI,QAAJ,CAAa,GAAb,EAAkB8B,EAAE,GAAGL,SAAvB,EAAkCM,EAAlC;AACAN,UAAAA,SAAS,IAAIS,qBAAb;AACH;AACJ;;AAEDrK,MAAAA,GAAG,CAACc,IAAJ,GAAW,KAAKL,SAAhB;;AAEA,UAAI6J,YAAY,GAAG,CAAnB,EAAsB;AAClB,YAAI7B,SAAS,KAAK,MAAlB,EAA0B;AACtBzI,UAAAA,GAAG,CAACmI,QAAJ,CAAamC,YAAb,EAA2BL,EAAE,GAAGJ,aAAL,GACvBO,oBADuB,GACAC,qBADA,GACwBtJ,aADxB,GAEvBiJ,kBAFuB,GAEFQ,YAFzB,EAEuCN,EAAE,GAAG,KAAKhK,IAAL,CAAU6J,kBAFtD;AAGH,SAJD,MAIO;AACH/J,UAAAA,GAAG,CAACmI,QAAJ,CAAamC,YAAb,EAA2BL,EAAE,GAAGL,SAAhC,EAA2CM,EAAE,GAAG,KAAKhK,IAAL,CAAU6J,kBAA1D;AACAH,UAAAA,SAAS,IAAIa,iBAAb;AACH;AACJ;;AAED,UAAIF,aAAa,KAAK,CAAtB,EAAyB;AACrB,YAAI9B,SAAS,KAAK,MAAlB,EAA0B;AACtBzI,UAAAA,GAAG,CAACmI,QAAJ,CAAauC,iBAAb,EAAgCT,EAAE,GAAGJ,aAAL,GAC5BO,oBAD4B,GACLC,qBADK,GACmBtJ,aADnB,GAE5BiJ,kBAF4B,GAEPQ,YAFzB,EAEuCvH,CAAC,GAAG,KAAK/C,IAAL,CAAU6J,kBAAd,GAAmCzJ,OAF1E;AAGH,SAJD,MAIO;AACHN,UAAAA,GAAG,CAACmI,QAAJ,CAAauC,iBAAb,EAAgCT,EAAE,GAAGL,SAArC,EAAgD3G,CAAC,GAAG,KAAK/C,IAAL,CAAU6J,kBAAd,GAAmCzJ,OAAnF;AACAsJ,UAAAA,SAAS,IAAIe,kBAAb;AACH;AACJ;AACJ;;AAED3K,IAAAA,GAAG,CAAC2E,OAAJ;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIrF,EAAAA,aAAa,CAACqJ,MAAD,EAAS;AAClB,QAAIA,MAAM,KAAK,CAAf,EAAkB;AACd,aAAO,GAAP;AACH,KAFD,MAEO,IAAIA,MAAM,KAAK,CAAf,EAAkB;AACrB,aAAO,IAAP;AACH,KAFM,MAEA,IAAIA,MAAM,KAAK,CAAC,CAAhB,EAAmB;AACtB,aAAO,GAAP;AACH,KAFM,MAEA,IAAIA,MAAM,KAAK,CAAC,CAAhB,EAAmB;AACtB,aAAO,IAAP;AACH,KAFM,MAEA;AACH,aAAO,EAAP;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIiC,EAAAA,cAAc,CAAC5H,CAAD,EAAIC,CAAJ,EAAOe,SAAS,GAAG,EAAnB,EAAuBH,KAAK,GAAG,MAA/B,EAAuC;AACjD,SAAKF,UAAL,CAAgBX,CAAhB,EAAmBC,CAAnB,EAAsB,CAAtB,EAAyBY,KAAzB,EAAgC,IAAhC,EAAsC,IAAtC,EAA4CG,SAA5C;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACI6G,EAAAA,mBAAmB,CAACC,IAAD,EAAO;AACtB,QAAI9K,GAAG,GAAG,KAAKA,GAAf;AACA,QAAI4D,MAAM,GAAG5E,UAAU,CAAC+L,qBAAX,CAAiC,KAAK7K,IAAL,CAAUiH,UAA3C,EAAuD2D,IAAI,CAACE,OAAL,EAAvD,CAAb;AAEAhL,IAAAA,GAAG,CAACiE,IAAJ;AACAjE,IAAAA,GAAG,CAACwE,WAAJ,GAAkB,KAAK9E,YAAL,CAAkB8D,QAAlB,CAA2B,GAA3B,CAAlB;AACAxD,IAAAA,GAAG,CAACkE,SAAJ,GAAgB,KAAKhE,IAAL,CAAUiB,aAA1B;AACAnB,IAAAA,GAAG,CAACmE,SAAJ;AACAnE,IAAAA,GAAG,CAACoE,GAAJ,CAAQ0G,IAAI,CAACG,MAAL,CAAYjI,CAAZ,GAAgB,KAAK3C,OAA7B,EAAsCyK,IAAI,CAACG,MAAL,CAAYhI,CAAZ,GAAgB,KAAK3C,OAA3D,EACIsD,MAAM,GAAG,KAAK1D,IAAL,CAAUgL,WADvB,EACoC,CADpC,EACuCC,IAAI,CAACC,EAAL,GAAU,CADjD,EACoD,IADpD;AAEApL,IAAAA,GAAG,CAACsE,SAAJ;AACAtE,IAAAA,GAAG,CAACyE,MAAJ;AACAzE,IAAAA,GAAG,CAAC2E,OAAJ;AACH;AAED;AACJ;AACA;AACA;;;AACI0G,EAAAA,KAAK,GAAG;AACJ,SAAKrL,GAAL,CAASsL,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,KAAKzL,MAAL,CAAYuD,WAArC,EAAkD,KAAKvD,MAAL,CAAYyD,YAA9D;AACH;;AAj2Be;;AAq2BpBiI,MAAM,CAACC,OAAP,GAAiBjM,aAAjB","sourcesContent":["//@ts-check\r\nconst MathHelper = require('./MathHelper')\r\nconst Vector2 = require('./Vector2')\r\nconst Line = require('./Line')\r\nconst Vertex = require('./Vertex')\r\nconst Ring = require('./Ring')\r\nconst { getChargeText } = require('./UtilityFunctions')\r\n\r\n/** \r\n * A class wrapping a canvas element.\r\n * \r\n * @property {HTMLElement} canvas The HTML element for the canvas associated with this CanvasWrapper instance.\r\n * @property {CanvasRenderingContext2D} ctx The CanvasRenderingContext2D of the canvas associated with this CanvasWrapper instance.\r\n * @property {Object} colors The colors object as defined in the SmilesDrawer options.\r\n * @property {Object} opts The SmilesDrawer options.\r\n * @property {Number} drawingWidth The width of the canvas.\r\n * @property {Number} drawingHeight The height of the canvas.\r\n * @property {Number} offsetX The horizontal offset required for centering the drawing.\r\n * @property {Number} offsetY The vertical offset required for centering the drawing.\r\n * @property {Number} fontLarge The large font size in pt.\r\n * @property {Number} fontSmall The small font size in pt.\r\n */\r\nclass CanvasWrapper {\r\n    /**\r\n     * The constructor for the class CanvasWrapper.\r\n     *\r\n     * @param {(String|HTMLElement)} target The canvas id or the canvas HTMLElement.\r\n     * @param {ThemeManager} themeManager Theme manager for setting proper colors.\r\n     * @param {Object} options The smiles drawer options object.\r\n     */\r\n    constructor(target, themeManager, options) {\r\n        if (typeof target === 'string' || target instanceof String) {\r\n            this.canvas = document.getElementById(target);\r\n        } else {\r\n            this.canvas = target;\r\n        }\r\n\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.themeManager = themeManager;\r\n        this.opts = options;\r\n        this.drawingWidth = 0.0;\r\n        this.drawingHeight = 0.0;\r\n        this.offsetX = 0.0;\r\n        this.offsetY = 0.0;\r\n\r\n        this.fontLarge = this.opts.fontSizeLarge + 'pt Helvetica, Arial, sans-serif';\r\n        this.fontSmall = this.opts.fontSizeSmall + 'pt Helvetica, Arial, sans-serif';\r\n\r\n        this.updateSize(this.opts.width, this.opts.height);\r\n\r\n        this.ctx.font = this.fontLarge;\r\n        this.hydrogenWidth = this.ctx.measureText('H').width;\r\n        this.halfHydrogenWidth = this.hydrogenWidth / 2.0;\r\n        this.halfBondThickness = this.opts.bondThickness / 2.0;\r\n\r\n        // TODO: Find out why clear was here.\r\n        // this.clear();\r\n    }\r\n\r\n    /**\r\n     * Update the width and height of the canvas\r\n     * \r\n     * @param {Number} width \r\n     * @param {Number} height \r\n     */\r\n    updateSize(width, height) {\r\n        this.devicePixelRatio = window.devicePixelRatio || 1;\r\n        this.backingStoreRatio = this.ctx.webkitBackingStorePixelRatio || this.ctx.mozBackingStorePixelRatio ||\r\n            this.ctx.msBackingStorePixelRatio || this.ctx.oBackingStorePixelRatio ||\r\n            this.ctx.backingStorePixelRatio || 1;\r\n        this.ratio = this.devicePixelRatio / this.backingStoreRatio;\r\n\r\n        if (this.ratio !== 1) {\r\n            this.canvas.width = width * this.ratio;\r\n            this.canvas.height = height * this.ratio;\r\n            this.canvas.style.width = width + 'px';\r\n            this.canvas.style.height = height + 'px';\r\n            this.ctx.setTransform(this.ratio, 0, 0, this.ratio, 0, 0);\r\n        } else {\r\n            this.canvas.width = width * this.ratio;\r\n            this.canvas.height = height * this.ratio;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a provided theme.\r\n     *\r\n     * @param {Object} theme A theme from the smiles drawer options.\r\n     */\r\n    setTheme(theme) {\r\n        this.colors = theme;\r\n    }\r\n\r\n    /**\r\n     * Scale the canvas based on vertex positions.\r\n     *\r\n     * @param {Vertex[]} vertices An array of vertices containing the vertices associated with the current molecule.\r\n     */\r\n    scale(vertices) {\r\n        // Figure out the final size of the image\r\n        let maxX = -Number.MAX_VALUE;\r\n        let maxY = -Number.MAX_VALUE;\r\n        let minX = Number.MAX_VALUE;\r\n        let minY = Number.MAX_VALUE;\r\n\r\n        for (var i = 0; i < vertices.length; i++) {\r\n            if (!vertices[i].value.isDrawn) {\r\n                continue;\r\n            }\r\n\r\n            let p = vertices[i].position;\r\n\r\n            if (maxX < p.x) maxX = p.x;\r\n            if (maxY < p.y) maxY = p.y;\r\n            if (minX > p.x) minX = p.x;\r\n            if (minY > p.y) minY = p.y;\r\n        }\r\n\r\n        // Add padding\r\n        var padding = this.opts.padding;\r\n        maxX += padding;\r\n        maxY += padding;\r\n        minX -= padding;\r\n        minY -= padding;\r\n\r\n        this.drawingWidth = maxX - minX;\r\n        this.drawingHeight = maxY - minY;\r\n\r\n        var scaleX = this.canvas.offsetWidth / this.drawingWidth;\r\n        var scaleY = this.canvas.offsetHeight / this.drawingHeight;\r\n\r\n        var scale = (scaleX < scaleY) ? scaleX : scaleY;\r\n\r\n        this.ctx.scale(scale, scale);\r\n\r\n        this.offsetX = -minX;\r\n        this.offsetY = -minY;\r\n\r\n        // Center\r\n        if (scaleX < scaleY) {\r\n            this.offsetY += this.canvas.offsetHeight / (2.0 * scale) - this.drawingHeight / 2.0;\r\n        } else {\r\n            this.offsetX += this.canvas.offsetWidth / (2.0 * scale) - this.drawingWidth / 2.0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the transform of the canvas.\r\n     */\r\n    reset() {\r\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Returns the hex code of a color associated with a key from the current theme.\r\n     *\r\n     * @param {String} key The color key in the theme (e.g. C, N, BACKGROUND, ...).\r\n     * @returns {String} A color hex value.\r\n     */\r\n    getColor(key) {\r\n        key = key.toUpperCase();\r\n\r\n        if (key in this.colors) {\r\n            return this.colors[key];\r\n        }\r\n\r\n        return this.colors['C'];\r\n    }\r\n\r\n    /**\r\n     * Draws a circle to a canvas context.\r\n     * @param {Number} x The x coordinate of the circles center.\r\n     * @param {Number} y The y coordinate of the circles center.\r\n     * @param {Number} radius The radius of the circle\r\n     * @param {String} color A hex encoded color.\r\n     * @param {Boolean} [fill=true] Whether to fill or stroke the circle.\r\n     * @param {Boolean} [debug=false] Draw in debug mode.\r\n     * @param {String} [debugText=''] A debug message.\r\n     */\r\n    drawCircle(x, y, radius, color, fill = true, debug = false, debugText = '') {\r\n        let ctx = this.ctx;\r\n        let offsetX = this.offsetX;\r\n        let offsetY = this.offsetY;\r\n\r\n        ctx.save();\r\n        ctx.lineWidth = 1.5;\r\n        ctx.beginPath();\r\n        ctx.arc(x + offsetX, y + offsetY, radius, 0, MathHelper.twoPI, true);\r\n        ctx.closePath();\r\n\r\n        if (debug) {\r\n            if (fill) {\r\n                ctx.fillStyle = '#f00';\r\n                ctx.fill();\r\n            } else {\r\n                ctx.strokeStyle = '#f00';\r\n                ctx.stroke();\r\n            }\r\n\r\n            this.drawDebugText(x, y, debugText);\r\n        } else {\r\n            if (fill) {\r\n                ctx.fillStyle = color;\r\n                ctx.fill();\r\n            } else {\r\n                ctx.strokeStyle = color;\r\n                ctx.stroke();\r\n            }\r\n        }\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Draw a line to a canvas.\r\n     *\r\n     * @param {Line} line A line.\r\n     * @param {Boolean} [dashed=false] Whether or not the line is dashed.\r\n     * @param {Number} [alpha=1.0] The alpha value of the color.\r\n     */\r\n    drawLine(line, dashed = false, alpha = 1.0) {\r\n        let ctx = this.ctx;\r\n        let offsetX = this.offsetX;\r\n        let offsetY = this.offsetY;\r\n\r\n        // Add a shadow behind the line\r\n        let shortLine = line.clone().shorten(4.0);\r\n\r\n        let l = shortLine.getLeftVector().clone();\r\n        let r = shortLine.getRightVector().clone();\r\n\r\n        l.x += offsetX;\r\n        l.y += offsetY;\r\n\r\n        r.x += offsetX;\r\n        r.y += offsetY;\r\n\r\n        // Draw the \"shadow\"\r\n        if (!dashed) {\r\n            ctx.save();\r\n            ctx.globalCompositeOperation = 'destination-out';\r\n            ctx.beginPath();\r\n            ctx.moveTo(l.x, l.y);\r\n            ctx.lineTo(r.x, r.y);\r\n            ctx.lineCap = 'round';\r\n            ctx.lineWidth = this.opts.bondThickness + 1.2;\r\n            ctx.strokeStyle = this.themeManager.getColor('BACKGROUND');\r\n            ctx.stroke();\r\n            ctx.globalCompositeOperation = 'source-over';\r\n            ctx.restore();\r\n        }\r\n\r\n        l = line.getLeftVector().clone();\r\n        r = line.getRightVector().clone();\r\n\r\n        l.x += offsetX;\r\n        l.y += offsetY;\r\n\r\n        r.x += offsetX;\r\n        r.y += offsetY;\r\n\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        ctx.moveTo(l.x, l.y);\r\n        ctx.lineTo(r.x, r.y);\r\n        ctx.lineCap = 'round';\r\n        ctx.lineWidth = this.opts.bondThickness;\r\n\r\n        let gradient = this.ctx.createLinearGradient(l.x, l.y, r.x, r.y);\r\n        gradient.addColorStop(0.4, this.themeManager.getColor(line.getLeftElement()) ||\r\n            this.themeManager.getColor('C'));\r\n        gradient.addColorStop(0.6, this.themeManager.getColor(line.getRightElement()) ||\r\n            this.themeManager.getColor('C'));\r\n\r\n        if (dashed) {\r\n            ctx.setLineDash([1, 1.5]);\r\n            ctx.lineWidth = this.opts.bondThickness / 1.5;\r\n        }\r\n\r\n        if (alpha < 1.0) {\r\n            ctx.globalAlpha = alpha;\r\n        }\r\n\r\n        ctx.strokeStyle = gradient;\r\n\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Draw a wedge on the canvas.\r\n     *\r\n     * @param {Line} line A line.\r\n     * @param {Number} width The wedge width.\r\n     */\r\n    drawWedge(line, width = 1.0) {\r\n        if (isNaN(line.from.x) || isNaN(line.from.y) ||\r\n            isNaN(line.to.x) || isNaN(line.to.y)) {\r\n            return;\r\n        }\r\n\r\n        let ctx = this.ctx;\r\n        let offsetX = this.offsetX;\r\n        let offsetY = this.offsetY;\r\n\r\n        // Add a shadow behind the line\r\n        let shortLine = line.clone().shorten(5.0);\r\n\r\n        let l = shortLine.getLeftVector().clone();\r\n        let r = shortLine.getRightVector().clone();\r\n\r\n        l.x += offsetX;\r\n        l.y += offsetY;\r\n\r\n        r.x += offsetX;\r\n        r.y += offsetY;\r\n\r\n        l = line.getLeftVector().clone();\r\n        r = line.getRightVector().clone();\r\n\r\n        l.x += offsetX;\r\n        l.y += offsetY;\r\n\r\n        r.x += offsetX;\r\n        r.y += offsetY;\r\n\r\n        ctx.save();\r\n\r\n        let normals = Vector2.normals(l, r);\r\n\r\n        normals[0].normalize();\r\n        normals[1].normalize();\r\n\r\n        let isRightChiralCenter = line.getRightChiral();\r\n\r\n        let start = l;\r\n        let end = r;\r\n\r\n        if (isRightChiralCenter) {\r\n            start = r;\r\n            end = l;\r\n        }\r\n\r\n        let t = Vector2.add(start, Vector2.multiplyScalar(normals[0], this.halfBondThickness));\r\n        let u = Vector2.add(end, Vector2.multiplyScalar(normals[0], 1.5 + this.halfBondThickness));\r\n        let v = Vector2.add(end, Vector2.multiplyScalar(normals[1], 1.5 + this.halfBondThickness));\r\n        let w = Vector2.add(start, Vector2.multiplyScalar(normals[1], this.halfBondThickness));\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(t.x, t.y);\r\n        ctx.lineTo(u.x, u.y);\r\n        ctx.lineTo(v.x, v.y);\r\n        ctx.lineTo(w.x, w.y);\r\n\r\n        let gradient = this.ctx.createRadialGradient(r.x, r.y, this.opts.bondLength, r.x, r.y, 0);\r\n        gradient.addColorStop(0.4, this.themeManager.getColor(line.getLeftElement()) ||\r\n            this.themeManager.getColor('C'));\r\n        gradient.addColorStop(0.6, this.themeManager.getColor(line.getRightElement()) ||\r\n            this.themeManager.getColor('C'));\r\n\r\n        ctx.fillStyle = gradient;\r\n\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Draw a dashed wedge on the canvas.\r\n     *\r\n     * @param {Line} line A line.\r\n     */\r\n    drawDashedWedge(line) {\r\n        if (isNaN(line.from.x) || isNaN(line.from.y) ||\r\n            isNaN(line.to.x) || isNaN(line.to.y)) {\r\n            return;\r\n        }\r\n\r\n        let ctx = this.ctx;\r\n        let offsetX = this.offsetX;\r\n        let offsetY = this.offsetY;\r\n\r\n        let l = line.getLeftVector().clone();\r\n        let r = line.getRightVector().clone();\r\n\r\n        l.x += offsetX;\r\n        l.y += offsetY;\r\n\r\n        r.x += offsetX;\r\n        r.y += offsetY;\r\n\r\n        ctx.save();\r\n\r\n        let normals = Vector2.normals(l, r);\r\n\r\n        normals[0].normalize();\r\n        normals[1].normalize();\r\n\r\n\r\n        let isRightChiralCenter = line.getRightChiral();\r\n\r\n        let start;\r\n        let end;\r\n        let sStart;\r\n        let sEnd;\r\n\r\n        let shortLine = line.clone();\r\n\r\n        if (isRightChiralCenter) {\r\n            start = r;\r\n            end = l;\r\n\r\n            shortLine.shortenRight(1.0);\r\n\r\n            sStart = shortLine.getRightVector().clone();\r\n            sEnd = shortLine.getLeftVector().clone();\r\n        } else {\r\n            start = l;\r\n            end = r;\r\n\r\n            shortLine.shortenLeft(1.0);\r\n\r\n            sStart = shortLine.getLeftVector().clone();\r\n            sEnd = shortLine.getRightVector().clone();\r\n        }\r\n\r\n        sStart.x += offsetX;\r\n        sStart.y += offsetY;\r\n        sEnd.x += offsetX;\r\n        sEnd.y += offsetY;\r\n\r\n        let dir = Vector2.subtract(end, start).normalize();\r\n        ctx.strokeStyle = this.themeManager.getColor('C');\r\n        ctx.lineCap = 'round';\r\n        ctx.lineWidth = this.opts.bondThickness;\r\n        ctx.beginPath();\r\n        let length = line.getLength();\r\n        let step = 1.25 / (length / (this.opts.bondThickness * 3.0));\r\n\r\n        let changed = false;\r\n        for (var t = 0.0; t < 1.0; t += step) {\r\n            let to = Vector2.multiplyScalar(dir, t * length);\r\n            let startDash = Vector2.add(start, to);\r\n            let width = 1.5 * t;\r\n            let dashOffset = Vector2.multiplyScalar(normals[0], width);\r\n\r\n            if (!changed && t > 0.5) {\r\n              ctx.stroke();\r\n              ctx.beginPath();\r\n              ctx.strokeStyle = this.themeManager.getColor(line.getRightElement()) || this.themeManager.getColor('C');\r\n                changed = true;\r\n            }\r\n            \r\n            startDash.subtract(dashOffset);\r\n            ctx.moveTo(startDash.x, startDash.y);\r\n            startDash.add(Vector2.multiplyScalar(dashOffset, 2.0));\r\n            ctx.lineTo(startDash.x, startDash.y);\r\n        }\r\n\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Draws a debug text message at a given position\r\n     *\r\n     * @param {Number} x The x coordinate.\r\n     * @param {Number} y The y coordinate.\r\n     * @param {String} text The debug text.\r\n     */\r\n    drawDebugText(x, y, text) {\r\n        let ctx = this.ctx;\r\n\r\n        ctx.save();\r\n        ctx.font = '5px Droid Sans, sans-serif';\r\n        ctx.textAlign = 'start';\r\n        ctx.textBaseline = 'top';\r\n        ctx.fillStyle = '#ff0000';\r\n        ctx.fillText(text, x + this.offsetX, y + this.offsetY);\r\n        ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Draw a ball to the canvas.\r\n     *\r\n     * @param {Number} x The x position of the text.\r\n     * @param {Number} y The y position of the text.\r\n     * @param {String} elementName The name of the element (single-letter).\r\n     */\r\n    drawBall(x, y, elementName) {\r\n        let ctx = this.ctx;\r\n\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        ctx.arc(x + this.offsetX, y + this.offsetY, this.opts.bondLength / 4.5, 0, MathHelper.twoPI, false);\r\n        ctx.fillStyle = this.themeManager.getColor(elementName);\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Draw a point to the canvas.\r\n     *\r\n     * @param {Number} x The x position of the point.\r\n     * @param {Number} y The y position of the point.\r\n     * @param {String} elementName The name of the element (single-letter).\r\n     */\r\n    drawPoint(x, y, elementName) {\r\n        let ctx = this.ctx;\r\n        let offsetX = this.offsetX;\r\n        let offsetY = this.offsetY;\r\n\r\n        ctx.save();\r\n        ctx.globalCompositeOperation = 'destination-out';\r\n        ctx.beginPath();\r\n        ctx.arc(x + offsetX, y + offsetY, 1.5, 0, MathHelper.twoPI, true);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n        ctx.globalCompositeOperation = 'source-over';\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(x + this.offsetX, y + this.offsetY, 0.75, 0, MathHelper.twoPI, false);\r\n        ctx.fillStyle = this.themeManager.getColor(elementName);\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Draw a text to the canvas.\r\n     *\r\n     * @param {Number} x The x position of the text.\r\n     * @param {Number} y The y position of the text.\r\n     * @param {String} elementName The name of the element (single-letter).\r\n     * @param {Number} hydrogens The number of hydrogen atoms.\r\n     * @param {String} direction The direction of the text in relation to the associated vertex.\r\n     * @param {Boolean} isTerminal A boolean indicating whether or not the vertex is terminal.\r\n     * @param {Number} charge The charge of the atom.\r\n     * @param {Number} isotope The isotope number.\r\n     * @param {Object} attachedPseudoElement A map with containing information for pseudo elements or concatinated elements. The key is comprised of the element symbol and the hydrogen count.\r\n     * @param {String} attachedPseudoElement.element The element symbol.\r\n     * @param {Number} attachedPseudoElement.count The number of occurences that match the key.\r\n     * @param {Number} attachedPseudoElement.hyrogenCount The number of hydrogens attached to each atom matching the key.\r\n     */\r\n    drawText(x, y, elementName, hydrogens, direction, isTerminal, charge, isotope, attachedPseudoElement = {}) {\r\n        let ctx = this.ctx;\r\n        let offsetX = this.offsetX;\r\n        let offsetY = this.offsetY;\r\n\r\n        ctx.save();\r\n\r\n        ctx.textAlign = 'start';\r\n        ctx.textBaseline = 'alphabetic';\r\n\r\n        let pseudoElementHandled = false;\r\n\r\n        // Charge\r\n        let chargeText = ''\r\n        let chargeWidth = 0;\r\n\r\n        if (charge) {\r\n            chargeText = getChargeText(charge);\r\n\r\n            ctx.font = this.fontSmall;\r\n            chargeWidth = ctx.measureText(chargeText).width;\r\n        }\r\n\r\n        let isotopeText = '0';\r\n        let isotopeWidth = 0;\r\n\r\n        if (isotope > 0) {\r\n            isotopeText = isotope.toString();\r\n            ctx.font = this.fontSmall;\r\n            isotopeWidth = ctx.measureText(isotopeText).width;\r\n        }\r\n\r\n\r\n        // TODO: Better handle exceptions\r\n        // Exception for nitro (draw nitro as NO2 instead of N+O-O)\r\n        if (charge === 1 && elementName === 'N' && attachedPseudoElement.hasOwnProperty('0O') && \r\n            attachedPseudoElement.hasOwnProperty('0O-1')) {\r\n            attachedPseudoElement = { '0O': { element: 'O', count: 2, hydrogenCount: 0, previousElement: 'C', charge: '' } }\r\n            charge = 0;\r\n        }\r\n\r\n\r\n        ctx.font = this.fontLarge;\r\n        ctx.fillStyle = this.themeManager.getColor('BACKGROUND');\r\n\r\n        let dim = ctx.measureText(elementName);\r\n\r\n        dim.totalWidth = dim.width + chargeWidth;\r\n        dim.height = parseInt(this.fontLarge, 10);\r\n\r\n        let r = (dim.width > this.opts.fontSizeLarge) ? dim.width : this.opts.fontSizeLarge;\r\n        r /= 1.5;\r\n\r\n        ctx.globalCompositeOperation = 'destination-out';\r\n        ctx.beginPath();\r\n        ctx.arc(x + offsetX, y + offsetY, r, 0, MathHelper.twoPI, true);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n        ctx.globalCompositeOperation = 'source-over';\r\n\r\n        let cursorPos = -dim.width / 2.0;\r\n        let cursorPosLeft = -dim.width / 2.0;\r\n\r\n        ctx.fillStyle = this.themeManager.getColor(elementName);\r\n        ctx.fillText(elementName, x + offsetX + cursorPos, y + this.opts.halfFontSizeLarge + offsetY);\r\n        cursorPos += dim.width;\r\n\r\n        if (charge) {\r\n            ctx.font = this.fontSmall;\r\n            ctx.fillText(chargeText, x + offsetX + cursorPos, y - this.opts.fifthFontSizeSmall + offsetY);\r\n            cursorPos += chargeWidth;\r\n        }\r\n\r\n        if (isotope > 0) {\r\n            ctx.font = this.fontSmall;\r\n            ctx.fillText(isotopeText, x + offsetX + cursorPosLeft - isotopeWidth, y - this.opts.fifthFontSizeSmall + offsetY);\r\n            cursorPosLeft -= isotopeWidth;\r\n        }\r\n\r\n        ctx.font = this.fontLarge;\r\n\r\n        let hydrogenWidth = 0;\r\n        let hydrogenCountWidth = 0;\r\n\r\n        if (hydrogens === 1) {\r\n            let hx = x + offsetX;\r\n            let hy = y + offsetY + this.opts.halfFontSizeLarge;\r\n\r\n            hydrogenWidth = this.hydrogenWidth;\r\n            cursorPosLeft -= hydrogenWidth;\r\n\r\n            if (direction === 'left') {\r\n                hx += cursorPosLeft;\r\n            } else if (direction === 'right') {\r\n                hx += cursorPos;\r\n            } else if (direction === 'up' && isTerminal) {\r\n                hx += cursorPos;\r\n            } else if (direction === 'down' && isTerminal) {\r\n                hx += cursorPos;\r\n            } else if (direction === 'up' && !isTerminal) {\r\n                hy -= this.opts.fontSizeLarge + this.opts.quarterFontSizeLarge;\r\n                hx -= this.halfHydrogenWidth;\r\n            } else if (direction === 'down' && !isTerminal) {\r\n                hy += this.opts.fontSizeLarge + this.opts.quarterFontSizeLarge;\r\n                hx -= this.halfHydrogenWidth;\r\n            }\r\n\r\n            ctx.fillText('H', hx, hy);\r\n\r\n            cursorPos += hydrogenWidth;\r\n        } else if (hydrogens > 1) {\r\n            let hx = x + offsetX;\r\n            let hy = y + offsetY + this.opts.halfFontSizeLarge;\r\n\r\n            hydrogenWidth = this.hydrogenWidth;\r\n            ctx.font = this.fontSmall;\r\n            hydrogenCountWidth = ctx.measureText(hydrogens).width;\r\n            cursorPosLeft -= hydrogenWidth + hydrogenCountWidth;\r\n\r\n            if (direction === 'left') {\r\n                hx += cursorPosLeft;\r\n            } else if (direction === 'right') {\r\n                hx += cursorPos;\r\n            } else if (direction === 'up' && isTerminal) {\r\n                hx += cursorPos;\r\n            } else if (direction === 'down' && isTerminal) {\r\n                hx += cursorPos;\r\n            } else if (direction === 'up' && !isTerminal) {\r\n                hy -= this.opts.fontSizeLarge + this.opts.quarterFontSizeLarge;\r\n                hx -= this.halfHydrogenWidth;\r\n            } else if (direction === 'down' && !isTerminal) {\r\n                hy += this.opts.fontSizeLarge + this.opts.quarterFontSizeLarge;\r\n                hx -= this.halfHydrogenWidth;\r\n            }\r\n\r\n            ctx.font = this.fontLarge;\r\n            ctx.fillText('H', hx, hy)\r\n\r\n            ctx.font = this.fontSmall;\r\n            ctx.fillText(hydrogens, hx + this.halfHydrogenWidth + hydrogenCountWidth, hy + this.opts.fifthFontSizeSmall);\r\n\r\n            cursorPos += hydrogenWidth + this.halfHydrogenWidth + hydrogenCountWidth;\r\n        }\r\n\r\n        if (pseudoElementHandled) {\r\n            ctx.restore();\r\n            return;\r\n        }\r\n\r\n        for (let key in attachedPseudoElement) {\r\n            if (!attachedPseudoElement.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n\r\n            let openParenthesisWidth = 0;\r\n            let closeParenthesisWidth = 0;\r\n\r\n            let element = attachedPseudoElement[key].element;\r\n            let elementCount = attachedPseudoElement[key].count;\r\n            let hydrogenCount = attachedPseudoElement[key].hydrogenCount;\r\n            let elementCharge = attachedPseudoElement[key].charge;\r\n\r\n            ctx.font = this.fontLarge;\r\n\r\n            if (elementCount > 1 && hydrogenCount > 0) {\r\n                openParenthesisWidth = ctx.measureText('(').width;\r\n                closeParenthesisWidth = ctx.measureText(')').width;\r\n            }\r\n\r\n            let elementWidth = ctx.measureText(element).width;\r\n            let elementCountWidth = 0;\r\n\r\n            let elementChargeText = '';\r\n            let elementChargeWidth = 0;\r\n\r\n            hydrogenWidth = 0;\r\n\r\n            if (hydrogenCount > 0) {\r\n                hydrogenWidth = this.hydrogenWidth;\r\n            }\r\n\r\n            ctx.font = this.fontSmall;\r\n\r\n            if (elementCount > 1) {\r\n                elementCountWidth = ctx.measureText(elementCount).width;\r\n            }\r\n\r\n            if (elementCharge !== 0) {\r\n                elementChargeText = getChargeText(elementCharge);\r\n                elementChargeWidth = ctx.measureText(elementChargeText).width;\r\n            }\r\n\r\n            hydrogenCountWidth = 0;\r\n\r\n            if (hydrogenCount > 1) {\r\n                hydrogenCountWidth = ctx.measureText(hydrogenCount).width;\r\n            }\r\n\r\n            ctx.font = this.fontLarge;\r\n\r\n            let hx = x + offsetX;\r\n            let hy = y + offsetY + this.opts.halfFontSizeLarge;\r\n\r\n            ctx.fillStyle = this.themeManager.getColor(element);\r\n\r\n            if (elementCount > 0) {\r\n                cursorPosLeft -= elementCountWidth;\r\n            }\r\n\r\n            if (elementCount > 1 && hydrogenCount > 0) {\r\n                if (direction === 'left') {\r\n                    cursorPosLeft -= closeParenthesisWidth;\r\n                    ctx.fillText(')', hx + cursorPosLeft, hy);\r\n                } else {\r\n                    ctx.fillText('(', hx + cursorPos, hy);\r\n                    cursorPos += openParenthesisWidth;\r\n                }\r\n            }\r\n\r\n            if (direction === 'left') {\r\n                cursorPosLeft -= elementWidth;\r\n                ctx.fillText(element, hx + cursorPosLeft, hy)\r\n            } else {\r\n                ctx.fillText(element, hx + cursorPos, hy)\r\n                cursorPos += elementWidth;\r\n            }\r\n\r\n            if (hydrogenCount > 0) {\r\n                if (direction === 'left') {\r\n                    cursorPosLeft -= hydrogenWidth + hydrogenCountWidth;\r\n                    ctx.fillText('H', hx + cursorPosLeft, hy)\r\n\r\n                    if (hydrogenCount > 1) {\r\n                        ctx.font = this.fontSmall;\r\n                        ctx.fillText(hydrogenCount, hx + cursorPosLeft + hydrogenWidth, hy + this.opts.fifthFontSizeSmall);\r\n                    }\r\n                } else {\r\n                    ctx.fillText('H', hx + cursorPos, hy)\r\n                    cursorPos += hydrogenWidth;\r\n\r\n                    if (hydrogenCount > 1) {\r\n                        ctx.font = this.fontSmall;\r\n                        ctx.fillText(hydrogenCount, hx + cursorPos, hy + this.opts.fifthFontSizeSmall);\r\n                        cursorPos += hydrogenCountWidth;\r\n                    }\r\n                }\r\n            }\r\n\r\n            ctx.font = this.fontLarge;\r\n\r\n            if (elementCount > 1 && hydrogenCount > 0) {\r\n                if (direction === 'left') {\r\n                    cursorPosLeft -= openParenthesisWidth;\r\n                    ctx.fillText('(', hx + cursorPosLeft, hy);\r\n                } else {\r\n                    ctx.fillText(')', hx + cursorPos, hy);\r\n                    cursorPos += closeParenthesisWidth;\r\n                }\r\n            }\r\n\r\n            ctx.font = this.fontSmall;\r\n\r\n            if (elementCount > 1) {\r\n                if (direction === 'left') {\r\n                    ctx.fillText(elementCount, hx + cursorPosLeft +\r\n                        openParenthesisWidth + closeParenthesisWidth + hydrogenWidth +\r\n                        hydrogenCountWidth + elementWidth, hy + this.opts.fifthFontSizeSmall);\r\n                } else {\r\n                    ctx.fillText(elementCount, hx + cursorPos, hy + this.opts.fifthFontSizeSmall);\r\n                    cursorPos += elementCountWidth;\r\n                }\r\n            }\r\n\r\n            if (elementCharge !== 0) {\r\n                if (direction === 'left') {\r\n                    ctx.fillText(elementChargeText, hx + cursorPosLeft +\r\n                        openParenthesisWidth + closeParenthesisWidth + hydrogenWidth +\r\n                        hydrogenCountWidth + elementWidth, y - this.opts.fifthFontSizeSmall + offsetY);\r\n                } else {\r\n                    ctx.fillText(elementChargeText, hx + cursorPos, y - this.opts.fifthFontSizeSmall + offsetY);\r\n                    cursorPos += elementChargeWidth;\r\n                }\r\n            }\r\n        }\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Translate the integer indicating the charge to the appropriate text.\r\n     * @param {Number} charge The integer indicating the charge.\r\n     * @returns {String} A string representing a charge.\r\n     */\r\n    getChargeText(charge) {\r\n        if (charge === 1) {\r\n            return '+'\r\n        } else if (charge === 2) {\r\n            return '2+';\r\n        } else if (charge === -1) {\r\n            return '-';\r\n        } else if (charge === -2) {\r\n            return '2-';\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws a dubug dot at a given coordinate and adds text.\r\n     *\r\n     * @param {Number} x The x coordinate.\r\n     * @param {Number} y The y coordindate.\r\n     * @param {String} [debugText=''] A string.\r\n     * @param {String} [color='#f00'] A color in hex form.\r\n     */\r\n    drawDebugPoint(x, y, debugText = '', color = '#f00') {\r\n        this.drawCircle(x, y, 2, color, true, true, debugText);\r\n    }\r\n\r\n    /**\r\n     * Draws a ring inside a provided ring, indicating aromaticity.\r\n     *\r\n     * @param {Ring} ring A ring.\r\n     */\r\n    drawAromaticityRing(ring) {\r\n        let ctx = this.ctx;\r\n        let radius = MathHelper.apothemFromSideLength(this.opts.bondLength, ring.getSize());\r\n\r\n        ctx.save();\r\n        ctx.strokeStyle = this.themeManager.getColor('C');\r\n        ctx.lineWidth = this.opts.bondThickness;\r\n        ctx.beginPath();\r\n        ctx.arc(ring.center.x + this.offsetX, ring.center.y + this.offsetY,\r\n            radius - this.opts.bondSpacing, 0, Math.PI * 2, true);\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n\r\n    /**\r\n     * Clear the canvas.\r\n     *\r\n     */\r\n    clear() {\r\n        this.ctx.clearRect(0, 0, this.canvas.offsetWidth, this.canvas.offsetHeight);\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = CanvasWrapper;"]},"metadata":{},"sourceType":"script"}