{"ast":null,"code":"import _classCallCheck from\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import Button from'./Button';import{connect}from'react-redux';import SmilesDrawer from'smiles-drawer';import{updateMolecule as _updateMolecule}from'../redux/actions/actions';// this wrapper wraps together an input and connected canvas into one unit\n// in future we may want to break out the input to make things more versatile\nvar canvasOptions={height:500,width:800};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{updateMolecule:function updateMolecule(molecule){return dispatch(_updateMolecule(molecule));},dispatch:dispatch};};var SmilesDrawerWrapper=/*#__PURE__*/function(_React$Component){_inherits(SmilesDrawerWrapper,_React$Component);var _super=_createSuper(SmilesDrawerWrapper);function SmilesDrawerWrapper(props){var _this;_classCallCheck(this,SmilesDrawerWrapper);_this=_super.call(this,props);_this.submitMolecule=function(){var molecule=_this.state.smilesString;// dispatch update action with local state value\n_this.props.updateMolecule(molecule);};_this.resetCanvas=function(){_this.setState({smilesString:\"\",errorMessage:\"\"});_this.canvasRef.current.getContext('2d').clearRect(0,0,2000,2000);_this.inputRef.current.value=\"\";};_this.parseStringInput=function(){var mol=_this.inputRef.current.value;// we're double-parsing due to workaround\nSmilesDrawer.parse(mol,function(tree){console.log(tree);_this.setState({errorMessage:\"\",smilesString:mol},function(){SmilesDrawer.apply(canvasOptions);// callback compensates for async setState\n});},function(err){console.log(err);_this.setState({errorMessage:err.name+\" : \"+err.message});console.log(_this.state.errorMessage);});};_this.state={errorMessage:\"\",smilesString:\"\"};_this.inputRef=/*#__PURE__*/React.createRef();// drawer needs access to the input node\n_this.errorRef=/*#__PURE__*/React.createRef();// notifications of invaid input appear here\n_this.canvasRef=/*#__PURE__*/React.createRef();// drawer needs to know where to draw\nreturn _this;}// put local state into global state\n_createClass(SmilesDrawerWrapper,[{key:\"render\",value:function render(){var disableSubmit=this.state.errorMessage.length>0||this.state.smilesString.length<1;return/*#__PURE__*/React.createElement(\"div\",{className:\"toolWrapper\"},/*#__PURE__*/React.createElement(\"input\",{className:\"smilesInput\",ref:this.inputRef,onChange:this.parseStringInput,type:\"text\"}),/*#__PURE__*/React.createElement(Button,{onClick:this.submitMolecule,disabled:disableSubmit,className:\"submit\"},\"Submit Molecule\"),/*#__PURE__*/React.createElement(Button,{onClick:this.resetCanvas,className:\"clear\"},\"Clear Canvas\"),/*#__PURE__*/React.createElement(\"p\",{className:\"errorField\",ref:this.errorRef},this.state.errorMessage),\" \",/*#__PURE__*/React.createElement(\"canvas\",{className:\"smilesCanvas\",width:canvasOptions.width,height:canvasOptions.height,ref:this.canvasRef,\"data-smiles\":this.state.smilesString}),/*#__PURE__*/React.createElement(\"p\",{className:\"smilesCanvasAcknowledgment\"},\" Smiles Drawer is used courtesy of Daniel Probst and Jean-Louis Reymond (\",/*#__PURE__*/React.createElement(\"a\",{href:\"http://dx.doi.org/10.1021/acs.jcim.7b00425\",target:\"_blank\",rel:\"noopener noreferrer\"},\"original paper\"),\")\"));}}]);return SmilesDrawerWrapper;}(React.Component);export default connect(null,mapDispatchToProps)(SmilesDrawerWrapper);","map":{"version":3,"sources":["/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/src/components/SmilesDrawerWrapper.js"],"names":["React","Button","connect","SmilesDrawer","updateMolecule","canvasOptions","height","width","mapDispatchToProps","dispatch","molecule","SmilesDrawerWrapper","props","submitMolecule","state","smilesString","resetCanvas","setState","errorMessage","canvasRef","current","getContext","clearRect","inputRef","value","parseStringInput","mol","parse","tree","console","log","apply","err","name","message","createRef","errorRef","disableSubmit","length","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Button from './Button';\nimport { connect } from 'react-redux';\nimport SmilesDrawer from 'smiles-drawer';\nimport { updateMolecule } from '../redux/actions/actions';\n\n// this wrapper wraps together an input and connected canvas into one unit\n// in future we may want to break out the input to make things more versatile\n\nlet canvasOptions = {\n  height: 500,\n  width: 800,\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateMolecule: molecule => dispatch(updateMolecule(molecule)),\n    dispatch,\n  }\n};\n\nclass SmilesDrawerWrapper extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      errorMessage: \"\",\n      smilesString: \"\"\n    }\n    this.inputRef = React.createRef(); // drawer needs access to the input node\n    this.errorRef = React.createRef(); // notifications of invaid input appear here\n    this.canvasRef = React.createRef(); // drawer needs to know where to draw\n  }\n\n  // put local state into global state\n  submitMolecule = () => {\n    let molecule = this.state.smilesString;\n    // dispatch update action with local state value\n    this.props.updateMolecule(molecule);\n  }\n\n  resetCanvas = () => {\n    this.setState({\n      smilesString: \"\",\n      errorMessage: \"\"\n    });\n    this.canvasRef.current.getContext('2d').clearRect(0,0,2000,2000);\n    this.inputRef.current.value = \"\";\n  }\n\n  parseStringInput = () => {\n    let mol = this.inputRef.current.value; // we're double-parsing due to workaround\n    SmilesDrawer.parse(mol,\n      (tree) => {\n        console.log(tree);\n        this.setState({\n          errorMessage: \"\",\n          smilesString: mol\n        }, () => {\n          SmilesDrawer.apply(canvasOptions); // callback compensates for async setState\n        });\n      },\n      (err) => {\n        console.log(err);\n        this.setState({\n          errorMessage: err.name + \" : \" + err.message\n        });\n        console.log(this.state.errorMessage);\n      }\n    );\n  }\n\n  render() {\n    let disableSubmit = (this.state.errorMessage.length > 0 || this.state.smilesString.length < 1);\n\n    return (\n      <div className='toolWrapper'>\n        <input className=\"smilesInput\" ref={this.inputRef} onChange={this.parseStringInput} type=\"text\" />\n        <Button onClick={this.submitMolecule} disabled={disableSubmit} className='submit'>Submit Molecule</Button>\n        <Button onClick={this.resetCanvas} className='clear'>Clear Canvas</Button>\n        <p className='errorField' ref={this.errorRef} >{this.state.errorMessage}</p> {/* any parsing errors will appear here */}\n        <canvas className=\"smilesCanvas\" width={canvasOptions.width} height={canvasOptions.height} ref={this.canvasRef} data-smiles={this.state.smilesString}></canvas>\n        <p className=\"smilesCanvasAcknowledgment\"> Smiles Drawer is used courtesy of Daniel Probst and Jean-Louis Reymond \n          (<a href=\"http://dx.doi.org/10.1021/acs.jcim.7b00425\" target=\"_blank\" rel=\"noopener noreferrer\">original paper</a>)\n        </p>\n      </div>\n    )\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(SmilesDrawerWrapper);"]},"metadata":{},"sourceType":"module"}