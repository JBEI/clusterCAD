{"ast":null,"code":"var _createForOfIteratorHelper = require(\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require('./UtilityFunctions'),\n    getChargeText = _require.getChargeText;\n\nvar Line = require('./Line');\n\nvar Vector2 = require('./Vector2');\n\nvar SvgWrapper = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function SvgWrapper(themeManager, target, options) {\n    _classCallCheck(this, SvgWrapper);\n\n    this.svg = document.getElementById(target);\n    this.opts = options;\n    this.gradientId = 0; // maintain a list of line elements and their corresponding gradients\n    // maintain a list of vertex elements\n\n    this.paths = [];\n    this.vertices = [];\n    this.gradients = []; // maintain the offset for drawing purposes\n\n    this.offsetX = 0.0;\n    this.offsetY = 0.0; // maintain the dimensions\n\n    this.drawingWidth = 0;\n    this.drawingHeight = 0;\n    this.halfBondThickness = this.opts.bondThickness / 2.0; // for managing color schemes\n\n    this.themeManager = themeManager; // create the mask\n\n    this.maskElements = [];\n    var mask = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n    mask.setAttributeNS(null, 'x', 0);\n    mask.setAttributeNS(null, 'y', 0);\n    mask.setAttributeNS(null, 'width', '100%');\n    mask.setAttributeNS(null, 'height', '100%');\n    mask.setAttributeNS(null, 'fill', 'white');\n    this.maskElements.push(mask); // clear the svg element\n\n    while (this.svg.firstChild) {\n      this.svg.removeChild(this.svg.firstChild);\n    }\n  }\n\n  _createClass(SvgWrapper, [{\n    key: \"constructSvg\",\n    value: function constructSvg() {\n      // TODO: add the defs element to put gradients in\n      var defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs'),\n          masks = document.createElementNS('http://www.w3.org/2000/svg', 'mask'),\n          style = document.createElementNS('http://www.w3.org/2000/svg', 'style'),\n          paths = document.createElementNS('http://www.w3.org/2000/svg', 'g'),\n          vertices = document.createElementNS('http://www.w3.org/2000/svg', 'g'),\n          pathChildNodes = this.paths; // give the mask an id\n\n      masks.setAttributeNS(null, 'id', 'text-mask'); // create the css styles\n\n      style.appendChild(document.createTextNode(\"\\n                .element {\\n                    font: \".concat(this.opts.fontSizeLarge, \"pt Helvetica, Arial, sans-serif;\\n                    alignment-baseline: 'middle';\\n                }\\n                .sub {\\n                    font: \").concat(this.opts.fontSizeSmall, \"pt Helvetica, Arial, sans-serif;\\n                }\\n            \")));\n\n      var _iterator = _createForOfIteratorHelper(pathChildNodes),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var path = _step.value;\n          paths.appendChild(path);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(this.vertices),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var vertex = _step2.value;\n          vertices.appendChild(vertex);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(this.maskElements),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var mask = _step3.value;\n          masks.appendChild(mask);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      var _iterator4 = _createForOfIteratorHelper(this.gradients),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var gradient = _step4.value;\n          defs.appendChild(gradient);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      paths.setAttributeNS(null, 'mask', 'url(#text-mask)');\n\n      if (this.svg) {\n        this.svg.appendChild(defs);\n        this.svg.appendChild(masks);\n        this.svg.appendChild(style);\n        this.svg.appendChild(paths);\n        this.svg.appendChild(vertices);\n        return this.svg;\n      } else {\n        var container = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n        container.appendChild(defs);\n        container.appendChild(masks);\n        container.appendChild(style);\n        container.appendChild(paths);\n        container.appendChild(vertices);\n        return container;\n      }\n    }\n    /**\r\n     * Create a linear gradient to apply to a line\r\n     *\r\n     * @param {Line} line the line to apply the gradiation to.\r\n     */\n\n  }, {\n    key: \"createGradient\",\n    value: function createGradient(line) {\n      // create the gradient and add it\n      var gradient = document.createElementNS('http://www.w3.org/2000/svg', 'linearGradient'),\n          gradientUrl = \"line-\".concat(this.gradientId++),\n          l = line.getLeftVector(),\n          r = line.getRightVector(),\n          fromX = l.x + this.offsetX,\n          fromY = l.y + this.offsetY,\n          toX = r.x + this.offsetX,\n          toY = r.y + this.offsetY;\n      gradient.setAttributeNS(null, 'id', gradientUrl);\n      gradient.setAttributeNS(null, 'gradientUnits', 'userSpaceOnUse');\n      gradient.setAttributeNS(null, 'x1', fromX);\n      gradient.setAttributeNS(null, 'y1', fromY);\n      gradient.setAttributeNS(null, 'x2', toX);\n      gradient.setAttributeNS(null, 'y2', toY);\n      var firstStop = document.createElementNS('http://www.w3.org/2000/svg', 'stop');\n      firstStop.setAttributeNS(null, 'stop-color', this.themeManager.getColor(line.getLeftElement()) || this.themeManager.getColor('C'));\n      firstStop.setAttributeNS(null, 'offset', '20%');\n      var secondStop = document.createElementNS('http://www.w3.org/2000/svg', 'stop');\n      secondStop.setAttributeNS(null, 'stop-color', this.themeManager.getColor(line.getRightElement() || this.themeManager.getColor('C')));\n      secondStop.setAttributeNS(null, 'offset', '100%');\n      gradient.appendChild(firstStop);\n      gradient.appendChild(secondStop);\n      this.gradients.push(gradient);\n      return gradientUrl;\n    }\n    /**\r\n     * Create a tspan element for sub or super scripts that styles the text\r\n     * appropriately as one of those text types.\r\n     *\r\n     * @param {String} text the actual text\r\n     * @param {String} shift the type of text, either 'sub', or 'super'\r\n     */\n\n  }, {\n    key: \"createSubSuperScripts\",\n    value: function createSubSuperScripts(text, shift) {\n      var elem = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');\n      elem.setAttributeNS(null, 'baseline-shift', shift);\n      elem.appendChild(document.createTextNode(text));\n      elem.setAttributeNS(null, 'class', 'sub');\n      return elem;\n    }\n    /**\r\n     * Determine drawing dimensiosn based on vertex positions.\r\n     *\r\n     * @param {Vertex[]} vertices An array of vertices containing the vertices associated with the current molecule.\r\n     */\n\n  }, {\n    key: \"determineDimensions\",\n    value: function determineDimensions(vertices) {\n      // Figure out the final size of the image\n      var maxX = -Number.MAX_VALUE;\n      var maxY = -Number.MAX_VALUE;\n      var minX = Number.MAX_VALUE;\n      var minY = Number.MAX_VALUE;\n\n      for (var i = 0; i < vertices.length; i++) {\n        if (!vertices[i].value.isDrawn) {\n          continue;\n        }\n\n        var p = vertices[i].position;\n        if (maxX < p.x) maxX = p.x;\n        if (maxY < p.y) maxY = p.y;\n        if (minX > p.x) minX = p.x;\n        if (minY > p.y) minY = p.y;\n      } // Add padding\n\n\n      var padding = this.opts.padding;\n      maxX += padding;\n      maxY += padding;\n      minX -= padding;\n      minY -= padding;\n      this.drawingWidth = maxX - minX;\n      this.drawingHeight = maxY - minY;\n      var scaleX = this.svg.clientWidth / this.drawingWidth;\n      var scaleY = this.svg.clientHeight / this.drawingHeight;\n      var scale = scaleX < scaleY ? scaleX : scaleY;\n      var viewBoxDim = Math.round(this.drawingWidth > this.drawingHeight ? this.drawingWidth : this.drawingHeight);\n      this.svg.setAttributeNS(null, 'viewBox', \"0 0 \".concat(viewBoxDim, \" \").concat(viewBoxDim));\n      this.offsetX = -minX;\n      this.offsetY = -minY; // Center\n\n      if (scaleX < scaleY) {\n        this.offsetY += this.svg.clientHeight / (2.0 * scale) - this.drawingHeight / 2.0;\n      } else {\n        this.offsetX += this.svg.clientWidth / (2.0 * scale) - this.drawingWidth / 2.0;\n      }\n    }\n    /**\r\n     * Draw an svg ellipse as a ball.\r\n     *\r\n     * @param {Number} x The x position of the text.\r\n     * @param {Number} y The y position of the text.\r\n     * @param {String} elementName The name of the element (single-letter).\r\n     */\n\n  }, {\n    key: \"drawBall\",\n    value: function drawBall(x, y, elementName) {\n      var ball = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n      ball.setAttributeNS(null, 'cx', x + this.offsetX);\n      ball.setAttributeNS(null, 'cy', y + this.offsetY);\n      ball.setAttributeNS(null, 'r', this.opts.bondLength / 4.5);\n      ball.setAttributeNS(null, 'fill', this.themeManager.getColor(elementName));\n      this.vertices.push(ball);\n    }\n    /**\r\n     * Draw a dashed wedge on the canvas.\r\n     *\r\n     * @param {Line} line A line.\r\n     */\n\n  }, {\n    key: \"drawDashedWedge\",\n    value: function drawDashedWedge(line) {\n      if (isNaN(line.from.x) || isNaN(line.from.y) || isNaN(line.to.x) || isNaN(line.to.y)) {\n        return;\n      }\n\n      var offsetX = this.offsetX,\n          offsetY = this.offsetY,\n          l = line.getLeftVector().clone(),\n          r = line.getRightVector().clone(),\n          normals = Vector2.normals(l, r);\n      normals[0].normalize();\n      normals[1].normalize();\n      var isRightChiralCenter = line.getRightChiral(),\n          start,\n          end;\n\n      if (isRightChiralCenter) {\n        start = r;\n        end = l;\n      } else {\n        start = l;\n        end = r;\n      }\n\n      var dir = Vector2.subtract(end, start).normalize(),\n          length = line.getLength(),\n          step = 1.25 / (length / (this.opts.bondThickness * 3.0)),\n          changed = false;\n      var gradient = this.createGradient(line);\n\n      for (var t = 0.0; t < 1.0; t += step) {\n        var to = Vector2.multiplyScalar(dir, t * length),\n            startDash = Vector2.add(start, to),\n            width = 1.5 * t,\n            dashOffset = Vector2.multiplyScalar(normals[0], width);\n        startDash.subtract(dashOffset);\n        var endDash = startDash.clone();\n        endDash.add(Vector2.multiplyScalar(dashOffset, 2.0));\n        this.drawLine(new Line(startDash, endDash), null, gradient);\n      }\n    }\n    /**\r\n     * Draws a debug dot at a given coordinate and adds text.\r\n     *\r\n     * @param {Number} x The x coordinate.\r\n     * @param {Number} y The y coordindate.\r\n     * @param {String} [debugText=''] A string.\r\n     * @param {String} [color='#f00'] A color in hex form.\r\n     */\n\n  }, {\n    key: \"drawDebugPoint\",\n    value: function drawDebugPoint(x, y) {\n      var debugText = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      var color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '#f00';\n      var point = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n      point.setAttributeNS(null, 'cx', x + this.offsetX);\n      point.setAttributeNS(null, 'cy', y + this.offsetY);\n      point.setAttributeNS(null, 'r', '2');\n      point.setAttributeNS(null, 'fill', '#f00');\n      this.vertices.push(point);\n      this.drawDebugText(x, y, debugText);\n    }\n    /**\r\n     * Draws a debug text message at a given position\r\n     *\r\n     * @param {Number} x The x coordinate.\r\n     * @param {Number} y The y coordinate.\r\n     * @param {String} text The debug text.\r\n     */\n\n  }, {\n    key: \"drawDebugText\",\n    value: function drawDebugText(x, y, text) {\n      var textElem = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      textElem.setAttributeNS(null, 'x', x + this.offsetX);\n      textElem.setAttributeNS(null, 'y', y + this.offsetY);\n      textElem.setAttributeNS(null, 'class', 'debug');\n      textElem.setAttributeNS(null, 'fill', '#ff0000');\n      textElem.setAttributeNS(null, 'style', \"\\n                font: 5px Droid Sans, sans-serif;\\n            \");\n      textElem.appendChild(document.createTextNode(text));\n      this.vertices.push(textElem);\n    }\n    /**\r\n     * Draws a line.\r\n     *\r\n     * @param {Line} line A line.\r\n     * @param {Boolean} dashed defaults to false.\r\n     * @param {String} gradient gradient url. Defaults to null.\r\n     */\n\n  }, {\n    key: \"drawLine\",\n    value: function drawLine(line) {\n      var dashed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var gradient = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var opts = this.opts,\n          stylesArr = [['stroke-linecap', 'round'], ['stroke-dasharray', dashed ? '5, 5' : 'none']],\n          l = line.getLeftVector(),\n          r = line.getRightVector(),\n          fromX = l.x + this.offsetX,\n          fromY = l.y + this.offsetY,\n          toX = r.x + this.offsetX,\n          toY = r.y + this.offsetY;\n      var styles = stylesArr.map(function (sub) {\n        return sub.join(':');\n      }).join(';'),\n          lineElem = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n      lineElem.setAttributeNS(null, 'x1', fromX);\n      lineElem.setAttributeNS(null, 'y1', fromY);\n      lineElem.setAttributeNS(null, 'x2', toX);\n      lineElem.setAttributeNS(null, 'y2', toY);\n      lineElem.setAttributeNS(null, 'style', styles);\n      this.paths.push(lineElem);\n\n      if (gradient == null) {\n        gradient = this.createGradient(line, fromX, fromY, toX, toY);\n      }\n\n      lineElem.setAttributeNS(null, 'stroke', \"url('#\".concat(gradient, \"')\"));\n    }\n    /**\r\n     * Draw a point.\r\n     *\r\n     * @param {Number} x The x position of the point.\r\n     * @param {Number} y The y position of the point.\r\n     * @param {String} elementName The name of the element (single-letter).\r\n     */\n\n  }, {\n    key: \"drawPoint\",\n    value: function drawPoint(x, y, elementName) {\n      var ctx = this.ctx;\n      var offsetX = this.offsetX;\n      var offsetY = this.offsetY; // first create a mask\n\n      var mask = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n      mask.setAttributeNS(null, 'cx', x + offsetX);\n      mask.setAttributeNS(null, 'cy', y + offsetY);\n      mask.setAttributeNS(null, 'r', '1.5');\n      mask.setAttributeNS(null, 'fill', 'black');\n      this.maskElements.push(mask); // now create the point\n\n      var point = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n      point.setAttributeNS(null, 'cx', x + offsetX);\n      point.setAttributeNS(null, 'cy', y + offsetY);\n      point.setAttributeNS(null, 'r', '0.75');\n      point.setAttributeNS(null, 'fill', this.themeManager.getColor(elementName));\n      this.vertices.push(point);\n    }\n    /**\r\n     * Draw a text to the canvas.\r\n     *\r\n     * @param {Number} x The x position of the text.\r\n     * @param {Number} y The y position of the text.\r\n     * @param {String} elementName The name of the element (single-letter).\r\n     * @param {Number} hydrogens The number of hydrogen atoms.\r\n     * @param {String} direction The direction of the text in relation to the associated vertex.\r\n     * @param {Boolean} isTerminal A boolean indicating whether or not the vertex is terminal.\r\n     * @param {Number} charge The charge of the atom.\r\n     * @param {Number} isotope The isotope number.\r\n     * @param {Object} attachedPseudoElement A map with containing information for pseudo elements or concatinated elements. The key is comprised of the element symbol and the hydrogen count.\r\n     * @param {String} attachedPseudoElement.element The element symbol.\r\n     * @param {Number} attachedPseudoElement.count The number of occurences that match the key.\r\n     * @param {Number} attachedPseudoElement.hyrogenCount The number of hydrogens attached to each atom matching the key.\r\n     */\n\n  }, {\n    key: \"drawText\",\n    value: function drawText(x, y, elementName, hydrogens, direction, isTerminal, charge, isotope) {\n      var attachedPseudoElement = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : {};\n      var offsetX = this.offsetX,\n          offsetY = this.offsetY,\n          pos = {\n        x: x + offsetX,\n        y: y + offsetY\n      },\n          textElem = document.createElementNS('http://www.w3.org/2000/svg', 'text'),\n          writingMode = 'horizontal-tb',\n          letterSpacing = 'normal',\n          textOrientation = 'mixed',\n          textDirection = 'direction: ltr;',\n          xShift = -2,\n          yShift = 2.5;\n      var mask = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n      mask.setAttributeNS(null, 'cx', pos.x);\n      mask.setAttributeNS(null, 'cy', pos.y);\n      mask.setAttributeNS(null, 'r', '3.5');\n      mask.setAttributeNS(null, 'fill', 'black');\n      this.maskElements.push(mask); // determine writing mode\n\n      if (/up|down/.test(direction) && !isTerminal) {\n        writingMode = 'vertical-rl';\n        textOrientation = 'upright';\n        letterSpacing = '-1px';\n      }\n\n      if (direction === 'down' && !isTerminal) {\n        xShift = 0;\n        yShift = -2;\n      } else if (direction === 'up' && !isTerminal) {\n        xShift = 0.5;\n      } else if (direction === 'left') {\n        xShift = 2;\n      }\n\n      if (direction === 'left' || direction === 'up' && !isTerminal) {\n        textDirection = 'direction: rtl; unicode-bidi: bidi-override;';\n      } // now the text element\n\n\n      textElem.setAttributeNS(null, 'x', pos.x + xShift);\n      textElem.setAttributeNS(null, 'y', pos.y + yShift);\n      textElem.setAttributeNS(null, 'class', 'element');\n      textElem.setAttributeNS(null, 'fill', this.themeManager.getColor(elementName));\n      textElem.setAttributeNS(null, 'style', \"\\n                text-anchor: start;\\n                writing-mode: \".concat(writingMode, \";\\n                text-orientation: \").concat(textOrientation, \";\\n                letter-spacing: \").concat(letterSpacing, \";\\n                \").concat(textDirection, \"\\n            \"));\n      var textNode = document.createElementNS('http://www.w3.org/2000/svg', 'tspan'); // special case for element names that are 2 letters\n\n      if (elementName.length > 1) {\n        var textAnchor = /up|down/.test(direction) ? 'middle' : 'start';\n        textNode.setAttributeNS(null, 'style', \"\\n                unicode-bidi: plaintext;\\n                writing-mode: lr-tb;\\n                letter-spacing: normal;\\n                text-anchor: \".concat(textAnchor, \";\\n            \"));\n      }\n\n      textNode.appendChild(document.createTextNode(elementName));\n      textElem.appendChild(textNode); // Charge\n\n      if (charge) {\n        var chargeElem = this.createSubSuperScripts(getChargeText(charge), 'super');\n        textNode.appendChild(chargeElem);\n      }\n\n      var isotopeText = '0';\n\n      if (isotope > 0) {\n        var isotopeElem = this.createSubSuperScripts(isotope.toString(), 'super');\n        textNode.appendChild(isotopeElem);\n      } // TODO: Better handle exceptions\n      // Exception for nitro (draw nitro as NO2 instead of N+O-O)\n\n\n      if (charge === 1 && elementName === 'N' && attachedPseudoElement.hasOwnProperty('0O') && attachedPseudoElement.hasOwnProperty('0O-1')) {\n        attachedPseudoElement = {\n          '0O': {\n            element: 'O',\n            count: 2,\n            hydrogenCount: 0,\n            previousElement: 'C',\n            charge: ''\n          }\n        };\n        charge = 0;\n      }\n\n      if (hydrogens > 0) {\n        var hydrogenElem = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');\n        hydrogenElem.setAttributeNS(null, 'style', 'unicode-bidi: plaintext;');\n        hydrogenElem.appendChild(document.createTextNode('H'));\n        textElem.appendChild(hydrogenElem);\n\n        if (hydrogens > 1) {\n          var hydrogenCountElem = this.createSubSuperScripts(hydrogens, 'sub');\n          hydrogenElem.appendChild(hydrogenCountElem);\n        }\n      }\n\n      for (var key in attachedPseudoElement) {\n        if (!attachedPseudoElement.hasOwnProperty(key)) {\n          continue;\n        }\n\n        var element = attachedPseudoElement[key].element,\n            elementCount = attachedPseudoElement[key].count,\n            hydrogenCount = attachedPseudoElement[key].hydrogenCount,\n            elementCharge = attachedPseudoElement[key].charge,\n            pseudoElementElem = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');\n        pseudoElementElem.setAttributeNS(null, 'style', 'unicode-bidi: plaintext;');\n        pseudoElementElem.appendChild(document.createTextNode(element));\n        pseudoElementElem.setAttributeNS(null, 'fill', this.themeManager.getColor(element));\n\n        if (elementCharge !== 0) {\n          var elementChargeElem = this.createSubSuperScripts(getChargeText(elementCharge), 'super');\n          pseudoElementElem.appendChild(elementChargeElem);\n        }\n\n        if (hydrogenCount > 0) {\n          var pseudoHydrogenElem = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');\n          pseudoHydrogenElem.setAttributeNS(null, 'style', 'unicode-bidi: plaintext;');\n          pseudoHydrogenElem.appendChild(document.createTextNode('H'));\n          pseudoElementElem.appendChild(pseudoHydrogenElem);\n\n          if (hydrogenCount > 1) {\n            var _hydrogenCountElem = this.createSubSuperScripts(hydrogenCount, 'sub');\n\n            pseudoHydrogenElem.appendChild(_hydrogenCountElem);\n          }\n        }\n\n        if (elementCount > 1) {\n          var elementCountElem = this.createSubSuperScripts(elementCount, 'sub');\n          pseudoElementElem.appendChild(elementCountElem);\n        }\n\n        textElem.appendChild(pseudoElementElem);\n      }\n\n      this.vertices.push(textElem);\n    }\n    /**\r\n     * @param {Line} line the line object to create the wedge from\r\n     */\n\n  }, {\n    key: \"drawWedge\",\n    value: function drawWedge(line) {\n      var offsetX = this.offsetX,\n          offsetY = this.offsetY,\n          l = line.getLeftVector().clone(),\n          r = line.getRightVector().clone();\n      l.x += offsetX;\n      l.y += offsetY;\n      r.x += offsetX;\n      r.y += offsetY;\n      var normals = Vector2.normals(l, r);\n      normals[0].normalize();\n      normals[1].normalize();\n      var isRightChiralCenter = line.getRightChiral();\n      var start = l,\n          end = r;\n\n      if (isRightChiralCenter) {\n        start = r;\n        end = l;\n      }\n\n      var t = Vector2.add(start, Vector2.multiplyScalar(normals[0], this.halfBondThickness)),\n          u = Vector2.add(end, Vector2.multiplyScalar(normals[0], 1.5 + this.halfBondThickness)),\n          v = Vector2.add(end, Vector2.multiplyScalar(normals[1], 1.5 + this.halfBondThickness)),\n          w = Vector2.add(start, Vector2.multiplyScalar(normals[1], this.halfBondThickness));\n      var polygon = document.createElementNS('http://www.w3.org/2000/svg', 'polygon'),\n          gradient = this.createGradient(line, l.x, l.y, r.x, r.y);\n      polygon.setAttributeNS(null, 'points', \"\".concat(t.x, \",\").concat(t.y, \" \").concat(u.x, \",\").concat(u.y, \" \").concat(v.x, \",\").concat(v.y, \" \").concat(w.x, \",\").concat(w.y));\n      polygon.setAttributeNS(null, 'fill', \"url('#\".concat(gradient, \"')\"));\n      this.paths.push(polygon);\n    }\n  }]);\n\n  return SvgWrapper;\n}();\n\nmodule.exports = SvgWrapper;","map":{"version":3,"sources":["/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/smiles-drawer/src/SvgWrapper.js"],"names":["require","getChargeText","Line","Vector2","SvgWrapper","themeManager","target","options","svg","document","getElementById","opts","gradientId","paths","vertices","gradients","offsetX","offsetY","drawingWidth","drawingHeight","halfBondThickness","bondThickness","maskElements","mask","createElementNS","setAttributeNS","push","firstChild","removeChild","defs","masks","style","pathChildNodes","appendChild","createTextNode","fontSizeLarge","fontSizeSmall","path","vertex","gradient","container","line","gradientUrl","l","getLeftVector","r","getRightVector","fromX","x","fromY","y","toX","toY","firstStop","getColor","getLeftElement","secondStop","getRightElement","text","shift","elem","maxX","Number","MAX_VALUE","maxY","minX","minY","i","length","value","isDrawn","p","position","padding","scaleX","clientWidth","scaleY","clientHeight","scale","viewBoxDim","Math","round","elementName","ball","bondLength","isNaN","from","to","clone","normals","normalize","isRightChiralCenter","getRightChiral","start","end","dir","subtract","getLength","step","changed","createGradient","t","multiplyScalar","startDash","add","width","dashOffset","endDash","drawLine","debugText","color","point","drawDebugText","textElem","dashed","stylesArr","styles","map","sub","join","lineElem","ctx","hydrogens","direction","isTerminal","charge","isotope","attachedPseudoElement","pos","writingMode","letterSpacing","textOrientation","textDirection","xShift","yShift","test","textNode","textAnchor","chargeElem","createSubSuperScripts","isotopeText","isotopeElem","toString","hasOwnProperty","element","count","hydrogenCount","previousElement","hydrogenElem","hydrogenCountElem","key","elementCount","elementCharge","pseudoElementElem","elementChargeElem","pseudoHydrogenElem","elementCountElem","u","v","w","polygon","module","exports"],"mappings":"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","sourcesContent":["const {\r\n  getChargeText\r\n} = require('./UtilityFunctions');\r\n\r\nconst Line = require('./Line');\r\nconst Vector2 = require('./Vector2');\r\n\r\nclass SvgWrapper {\r\n  constructor(themeManager, target, options) {\r\n    this.svg = document.getElementById(target);\r\n    this.opts = options;\r\n    this.gradientId = 0;\r\n\r\n    // maintain a list of line elements and their corresponding gradients\r\n    // maintain a list of vertex elements\r\n    this.paths = [];\r\n    this.vertices = [];\r\n    this.gradients = [];\r\n\r\n    // maintain the offset for drawing purposes\r\n    this.offsetX = 0.0;\r\n    this.offsetY = 0.0;\r\n\r\n    // maintain the dimensions\r\n    this.drawingWidth = 0;\r\n    this.drawingHeight = 0;\r\n    this.halfBondThickness = this.opts.bondThickness / 2.0;\r\n\r\n    // for managing color schemes\r\n    this.themeManager = themeManager;\r\n\r\n    // create the mask\r\n    this.maskElements = [];\r\n\r\n    let mask = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\r\n    mask.setAttributeNS(null, 'x', 0);\r\n    mask.setAttributeNS(null, 'y', 0);\r\n    mask.setAttributeNS(null, 'width', '100%');\r\n    mask.setAttributeNS(null, 'height', '100%');\r\n    mask.setAttributeNS(null, 'fill', 'white');\r\n\r\n    this.maskElements.push(mask);\r\n\r\n    // clear the svg element\r\n    while (this.svg.firstChild) {\r\n      this.svg.removeChild(this.svg.firstChild);\r\n    }\r\n  }\r\n\r\n  constructSvg() {\r\n    // TODO: add the defs element to put gradients in\r\n    let defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs'),\r\n      masks = document.createElementNS('http://www.w3.org/2000/svg', 'mask'),\r\n      style = document.createElementNS('http://www.w3.org/2000/svg', 'style'),\r\n      paths = document.createElementNS('http://www.w3.org/2000/svg', 'g'),\r\n      vertices = document.createElementNS('http://www.w3.org/2000/svg', 'g'),\r\n      pathChildNodes = this.paths;\r\n\r\n    // give the mask an id\r\n    masks.setAttributeNS(null, 'id', 'text-mask');\r\n\r\n    // create the css styles\r\n    style.appendChild(document.createTextNode(`\r\n                .element {\r\n                    font: ${this.opts.fontSizeLarge}pt Helvetica, Arial, sans-serif;\r\n                    alignment-baseline: 'middle';\r\n                }\r\n                .sub {\r\n                    font: ${this.opts.fontSizeSmall}pt Helvetica, Arial, sans-serif;\r\n                }\r\n            `));\r\n\r\n    for (let path of pathChildNodes) {\r\n      paths.appendChild(path);\r\n    }\r\n    for (let vertex of this.vertices) {\r\n      vertices.appendChild(vertex);\r\n    }\r\n    for (let mask of this.maskElements) {\r\n      masks.appendChild(mask);\r\n    }\r\n    for (let gradient of this.gradients) {\r\n      defs.appendChild(gradient);\r\n    }\r\n\r\n    paths.setAttributeNS(null, 'mask', 'url(#text-mask)');\r\n\r\n    if (this.svg) {\r\n      this.svg.appendChild(defs);\r\n      this.svg.appendChild(masks);\r\n      this.svg.appendChild(style);\r\n      this.svg.appendChild(paths);\r\n      this.svg.appendChild(vertices);\r\n      return this.svg;\r\n    } else {\r\n      let container = document.createElementNS('http://www.w3.org/2000/svg', 'g');\r\n      container.appendChild(defs);\r\n      container.appendChild(masks);\r\n      container.appendChild(style);\r\n      container.appendChild(paths);\r\n      container.appendChild(vertices);\r\n      return container;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a linear gradient to apply to a line\r\n   *\r\n   * @param {Line} line the line to apply the gradiation to.\r\n   */\r\n  createGradient(line) {\r\n    // create the gradient and add it\r\n    let gradient = document.createElementNS('http://www.w3.org/2000/svg', 'linearGradient'),\r\n      gradientUrl = `line-${this.gradientId++}`,\r\n      l = line.getLeftVector(),\r\n      r = line.getRightVector(),\r\n      fromX = l.x + this.offsetX,\r\n      fromY = l.y + this.offsetY,\r\n      toX = r.x + this.offsetX,\r\n      toY = r.y + this.offsetY;\r\n\r\n    gradient.setAttributeNS(null, 'id', gradientUrl);\r\n    gradient.setAttributeNS(null, 'gradientUnits', 'userSpaceOnUse');\r\n    gradient.setAttributeNS(null, 'x1', fromX);\r\n    gradient.setAttributeNS(null, 'y1', fromY);\r\n    gradient.setAttributeNS(null, 'x2', toX);\r\n    gradient.setAttributeNS(null, 'y2', toY);\r\n\r\n    let firstStop = document.createElementNS('http://www.w3.org/2000/svg', 'stop');\r\n    firstStop.setAttributeNS(null, 'stop-color', this.themeManager.getColor(line.getLeftElement()) || this.themeManager.getColor('C'));\r\n    firstStop.setAttributeNS(null, 'offset', '20%');\r\n\r\n    let secondStop = document.createElementNS('http://www.w3.org/2000/svg', 'stop');\r\n    secondStop.setAttributeNS(null, 'stop-color', this.themeManager.getColor(line.getRightElement() || this.themeManager.getColor('C')));\r\n    secondStop.setAttributeNS(null, 'offset', '100%');\r\n\r\n    gradient.appendChild(firstStop);\r\n    gradient.appendChild(secondStop);\r\n\r\n    this.gradients.push(gradient);\r\n\r\n    return gradientUrl;\r\n  }\r\n\r\n  /**\r\n   * Create a tspan element for sub or super scripts that styles the text\r\n   * appropriately as one of those text types.\r\n   *\r\n   * @param {String} text the actual text\r\n   * @param {String} shift the type of text, either 'sub', or 'super'\r\n   */\r\n  createSubSuperScripts(text, shift) {\r\n    let elem = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');\r\n    elem.setAttributeNS(null, 'baseline-shift', shift);\r\n    elem.appendChild(document.createTextNode(text));\r\n    elem.setAttributeNS(null, 'class', 'sub');\r\n\r\n    return elem;\r\n  }\r\n\r\n  /**\r\n   * Determine drawing dimensiosn based on vertex positions.\r\n   *\r\n   * @param {Vertex[]} vertices An array of vertices containing the vertices associated with the current molecule.\r\n   */\r\n  determineDimensions(vertices) {\r\n    // Figure out the final size of the image\r\n    let maxX = -Number.MAX_VALUE;\r\n    let maxY = -Number.MAX_VALUE;\r\n    let minX = Number.MAX_VALUE;\r\n    let minY = Number.MAX_VALUE;\r\n\r\n    for (var i = 0; i < vertices.length; i++) {\r\n      if (!vertices[i].value.isDrawn) {\r\n        continue;\r\n      }\r\n\r\n      let p = vertices[i].position;\r\n\r\n      if (maxX < p.x) maxX = p.x;\r\n      if (maxY < p.y) maxY = p.y;\r\n      if (minX > p.x) minX = p.x;\r\n      if (minY > p.y) minY = p.y;\r\n    }\r\n\r\n    // Add padding\r\n    let padding = this.opts.padding;\r\n    maxX += padding;\r\n    maxY += padding;\r\n    minX -= padding;\r\n    minY -= padding;\r\n\r\n    this.drawingWidth = maxX - minX;\r\n    this.drawingHeight = maxY - minY;\r\n\r\n    let scaleX = this.svg.clientWidth / this.drawingWidth;\r\n    let scaleY = this.svg.clientHeight / this.drawingHeight;\r\n\r\n    let scale = (scaleX < scaleY) ? scaleX : scaleY;\r\n    let viewBoxDim = Math.round(this.drawingWidth > this.drawingHeight ? this.drawingWidth : this.drawingHeight);\r\n\r\n    this.svg.setAttributeNS(null, 'viewBox', `0 0 ${viewBoxDim} ${viewBoxDim}`);\r\n\r\n    this.offsetX = -minX;\r\n    this.offsetY = -minY;\r\n\r\n    // Center\r\n    if (scaleX < scaleY) {\r\n      this.offsetY += this.svg.clientHeight / (2.0 * scale) - this.drawingHeight / 2.0;\r\n    } else {\r\n      this.offsetX += this.svg.clientWidth / (2.0 * scale) - this.drawingWidth / 2.0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw an svg ellipse as a ball.\r\n   *\r\n   * @param {Number} x The x position of the text.\r\n   * @param {Number} y The y position of the text.\r\n   * @param {String} elementName The name of the element (single-letter).\r\n   */\r\n  drawBall(x, y, elementName) {\r\n    let ball = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\r\n    ball.setAttributeNS(null, 'cx', x + this.offsetX);\r\n    ball.setAttributeNS(null, 'cy', y + this.offsetY);\r\n    ball.setAttributeNS(null, 'r', this.opts.bondLength / 4.5);\r\n    ball.setAttributeNS(null, 'fill', this.themeManager.getColor(elementName));\r\n\r\n    this.vertices.push(ball);\r\n  }\r\n\r\n  /**\r\n   * Draw a dashed wedge on the canvas.\r\n   *\r\n   * @param {Line} line A line.\r\n   */\r\n  drawDashedWedge(line) {\r\n    if (isNaN(line.from.x) || isNaN(line.from.y) ||\r\n      isNaN(line.to.x) || isNaN(line.to.y)) {\r\n      return;\r\n    }\r\n\r\n    let offsetX = this.offsetX,\r\n      offsetY = this.offsetY,\r\n      l = line.getLeftVector().clone(),\r\n      r = line.getRightVector().clone(),\r\n      normals = Vector2.normals(l, r);\r\n\r\n    normals[0].normalize();\r\n    normals[1].normalize();\r\n\r\n    let isRightChiralCenter = line.getRightChiral(),\r\n      start,\r\n      end;\r\n\r\n    if (isRightChiralCenter) {\r\n      start = r;\r\n      end = l;\r\n    } else {\r\n      start = l;\r\n      end = r;\r\n    }\r\n\r\n    let dir = Vector2.subtract(end, start).normalize(),\r\n      length = line.getLength(),\r\n      step = 1.25 / (length / (this.opts.bondThickness * 3.0)),\r\n      changed = false;\r\n\r\n    let gradient = this.createGradient(line);\r\n\r\n    for (let t = 0.0; t < 1.0; t += step) {\r\n      let to = Vector2.multiplyScalar(dir, t * length),\r\n        startDash = Vector2.add(start, to),\r\n        width = 1.5 * t,\r\n        dashOffset = Vector2.multiplyScalar(normals[0], width);\r\n\r\n      startDash.subtract(dashOffset);\r\n      let endDash = startDash.clone();\r\n      endDash.add(Vector2.multiplyScalar(dashOffset, 2.0));\r\n\r\n      this.drawLine(new Line(startDash, endDash), null, gradient);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draws a debug dot at a given coordinate and adds text.\r\n   *\r\n   * @param {Number} x The x coordinate.\r\n   * @param {Number} y The y coordindate.\r\n   * @param {String} [debugText=''] A string.\r\n   * @param {String} [color='#f00'] A color in hex form.\r\n   */\r\n  drawDebugPoint(x, y, debugText = '', color = '#f00') {\r\n    let point = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\r\n    point.setAttributeNS(null, 'cx', x + this.offsetX);\r\n    point.setAttributeNS(null, 'cy', y + this.offsetY);\r\n    point.setAttributeNS(null, 'r', '2');\r\n    point.setAttributeNS(null, 'fill', '#f00');\r\n    this.vertices.push(point);\r\n    this.drawDebugText(x, y, debugText);\r\n  }\r\n\r\n  /**\r\n   * Draws a debug text message at a given position\r\n   *\r\n   * @param {Number} x The x coordinate.\r\n   * @param {Number} y The y coordinate.\r\n   * @param {String} text The debug text.\r\n   */\r\n  drawDebugText(x, y, text) {\r\n    let textElem = document.createElementNS('http://www.w3.org/2000/svg', 'text');\r\n    textElem.setAttributeNS(null, 'x', x + this.offsetX);\r\n    textElem.setAttributeNS(null, 'y', y + this.offsetY);\r\n    textElem.setAttributeNS(null, 'class', 'debug');\r\n    textElem.setAttributeNS(null, 'fill', '#ff0000');\r\n    textElem.setAttributeNS(null, 'style', `\r\n                font: 5px Droid Sans, sans-serif;\r\n            `);\r\n    textElem.appendChild(document.createTextNode(text));\r\n\r\n    this.vertices.push(textElem);\r\n  }\r\n\r\n  /**\r\n   * Draws a line.\r\n   *\r\n   * @param {Line} line A line.\r\n   * @param {Boolean} dashed defaults to false.\r\n   * @param {String} gradient gradient url. Defaults to null.\r\n   */\r\n  drawLine(line, dashed = false, gradient = null) {\r\n    let opts = this.opts,\r\n      stylesArr = [\r\n                ['stroke-linecap', 'round'],\r\n                ['stroke-dasharray', dashed ? '5, 5' : 'none'],\r\n            ],\r\n      l = line.getLeftVector(),\r\n      r = line.getRightVector(),\r\n      fromX = l.x + this.offsetX,\r\n      fromY = l.y + this.offsetY,\r\n      toX = r.x + this.offsetX,\r\n      toY = r.y + this.offsetY;\r\n\r\n    let styles = stylesArr.map(sub => sub.join(':')).join(';'),\r\n      lineElem = document.createElementNS('http://www.w3.org/2000/svg', 'line');\r\n\r\n    lineElem.setAttributeNS(null, 'x1', fromX);\r\n    lineElem.setAttributeNS(null, 'y1', fromY);\r\n    lineElem.setAttributeNS(null, 'x2', toX);\r\n    lineElem.setAttributeNS(null, 'y2', toY);\r\n    lineElem.setAttributeNS(null, 'style', styles);\r\n    this.paths.push(lineElem);\r\n\r\n    if (gradient == null) {\r\n      gradient = this.createGradient(line, fromX, fromY, toX, toY);\r\n    }\r\n    lineElem.setAttributeNS(null, 'stroke', `url('#${gradient}')`);\r\n  }\r\n\r\n  /**\r\n   * Draw a point.\r\n   *\r\n   * @param {Number} x The x position of the point.\r\n   * @param {Number} y The y position of the point.\r\n   * @param {String} elementName The name of the element (single-letter).\r\n   */\r\n  drawPoint(x, y, elementName) {\r\n    let ctx = this.ctx;\r\n    let offsetX = this.offsetX;\r\n    let offsetY = this.offsetY;\r\n\r\n    // first create a mask\r\n    let mask = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\r\n    mask.setAttributeNS(null, 'cx', x + offsetX);\r\n    mask.setAttributeNS(null, 'cy', y + offsetY);\r\n    mask.setAttributeNS(null, 'r', '1.5');\r\n    mask.setAttributeNS(null, 'fill', 'black');\r\n    this.maskElements.push(mask);\r\n\r\n    // now create the point\r\n    let point = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\r\n    point.setAttributeNS(null, 'cx', x + offsetX);\r\n    point.setAttributeNS(null, 'cy', y + offsetY);\r\n    point.setAttributeNS(null, 'r', '0.75');\r\n    point.setAttributeNS(null, 'fill', this.themeManager.getColor(elementName));\r\n    this.vertices.push(point);\r\n  }\r\n\r\n  /**\r\n   * Draw a text to the canvas.\r\n   *\r\n   * @param {Number} x The x position of the text.\r\n   * @param {Number} y The y position of the text.\r\n   * @param {String} elementName The name of the element (single-letter).\r\n   * @param {Number} hydrogens The number of hydrogen atoms.\r\n   * @param {String} direction The direction of the text in relation to the associated vertex.\r\n   * @param {Boolean} isTerminal A boolean indicating whether or not the vertex is terminal.\r\n   * @param {Number} charge The charge of the atom.\r\n   * @param {Number} isotope The isotope number.\r\n   * @param {Object} attachedPseudoElement A map with containing information for pseudo elements or concatinated elements. The key is comprised of the element symbol and the hydrogen count.\r\n   * @param {String} attachedPseudoElement.element The element symbol.\r\n   * @param {Number} attachedPseudoElement.count The number of occurences that match the key.\r\n   * @param {Number} attachedPseudoElement.hyrogenCount The number of hydrogens attached to each atom matching the key.\r\n   */\r\n  drawText(x, y, elementName, hydrogens, direction, isTerminal, charge, isotope, attachedPseudoElement = {}) {\r\n    let offsetX = this.offsetX,\r\n      offsetY = this.offsetY,\r\n      pos = {\r\n        x: x + offsetX,\r\n        y: y + offsetY,\r\n      },\r\n      textElem = document.createElementNS('http://www.w3.org/2000/svg', 'text'),\r\n      writingMode = 'horizontal-tb',\r\n      letterSpacing = 'normal',\r\n      textOrientation = 'mixed',\r\n      textDirection = 'direction: ltr;',\r\n      xShift = -2,\r\n      yShift = 2.5;\r\n\r\n    let mask = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\r\n    mask.setAttributeNS(null, 'cx', pos.x);\r\n    mask.setAttributeNS(null, 'cy', pos.y);\r\n    mask.setAttributeNS(null, 'r', '3.5');\r\n    mask.setAttributeNS(null, 'fill', 'black');\r\n    this.maskElements.push(mask);\r\n\r\n    // determine writing mode\r\n    if (/up|down/.test(direction) && !isTerminal) {\r\n      writingMode = 'vertical-rl';\r\n      textOrientation = 'upright';\r\n      letterSpacing = '-1px';\r\n    }\r\n\r\n    if (direction === 'down' && !isTerminal) {\r\n      xShift = 0;\r\n      yShift = -2;\r\n    } else if (direction === 'up' && !isTerminal) {\r\n      xShift = 0.5;\r\n    } else if (direction === 'left') {\r\n      xShift = 2;\r\n    }\r\n\r\n    if (direction === 'left' || (direction === 'up' && !isTerminal)) {\r\n      textDirection = 'direction: rtl; unicode-bidi: bidi-override;'\r\n    }\r\n\r\n    // now the text element\r\n    textElem.setAttributeNS(null, 'x', pos.x + xShift);\r\n    textElem.setAttributeNS(null, 'y', pos.y + yShift);\r\n    textElem.setAttributeNS(null, 'class', 'element');\r\n    textElem.setAttributeNS(null, 'fill', this.themeManager.getColor(elementName));\r\n    textElem.setAttributeNS(null, 'style', `\r\n                text-anchor: start;\r\n                writing-mode: ${writingMode};\r\n                text-orientation: ${textOrientation};\r\n                letter-spacing: ${letterSpacing};\r\n                ${textDirection}\r\n            `);\r\n\r\n    let textNode = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');\r\n    // special case for element names that are 2 letters\r\n    if (elementName.length > 1) {\r\n      let textAnchor = /up|down/.test(direction) ? 'middle' : 'start';\r\n\r\n      textNode.setAttributeNS(null, 'style', `\r\n                unicode-bidi: plaintext;\r\n                writing-mode: lr-tb;\r\n                letter-spacing: normal;\r\n                text-anchor: ${textAnchor};\r\n            `);\r\n    }\r\n    textNode.appendChild(document.createTextNode(elementName));\r\n    textElem.appendChild(textNode);\r\n\r\n    // Charge\r\n    if (charge) {\r\n      let chargeElem = this.createSubSuperScripts(getChargeText(charge), 'super');\r\n      textNode.appendChild(chargeElem);\r\n    }\r\n\r\n    let isotopeText = '0';\r\n\r\n    if (isotope > 0) {\r\n      let isotopeElem = this.createSubSuperScripts(isotope.toString(), 'super');\r\n      textNode.appendChild(isotopeElem);\r\n    }\r\n\r\n\r\n    // TODO: Better handle exceptions\r\n    // Exception for nitro (draw nitro as NO2 instead of N+O-O)\r\n    if (charge === 1 && elementName === 'N' && attachedPseudoElement.hasOwnProperty('0O') &&\r\n      attachedPseudoElement.hasOwnProperty('0O-1')) {\r\n      attachedPseudoElement = {\r\n        '0O': {\r\n          element: 'O',\r\n          count: 2,\r\n          hydrogenCount: 0,\r\n          previousElement: 'C',\r\n          charge: ''\r\n        }\r\n      }\r\n      charge = 0;\r\n    }\r\n\r\n    if (hydrogens > 0) {\r\n      let hydrogenElem = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');\r\n      hydrogenElem.setAttributeNS(null, 'style', 'unicode-bidi: plaintext;');\r\n      hydrogenElem.appendChild(document.createTextNode('H'));\r\n      textElem.appendChild(hydrogenElem);\r\n\r\n      if (hydrogens > 1) {\r\n        let hydrogenCountElem = this.createSubSuperScripts(hydrogens, 'sub');\r\n        hydrogenElem.appendChild(hydrogenCountElem);\r\n      }\r\n    }\r\n\r\n    for (let key in attachedPseudoElement) {\r\n      if (!attachedPseudoElement.hasOwnProperty(key)) {\r\n        continue;\r\n      }\r\n\r\n      let element = attachedPseudoElement[key].element,\r\n        elementCount = attachedPseudoElement[key].count,\r\n        hydrogenCount = attachedPseudoElement[key].hydrogenCount,\r\n        elementCharge = attachedPseudoElement[key].charge,\r\n        pseudoElementElem = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');\r\n\r\n      pseudoElementElem.setAttributeNS(null, 'style', 'unicode-bidi: plaintext;');\r\n      pseudoElementElem.appendChild(document.createTextNode(element));\r\n      pseudoElementElem.setAttributeNS(null, 'fill', this.themeManager.getColor(element));\r\n\r\n      if (elementCharge !== 0) {\r\n        let elementChargeElem = this.createSubSuperScripts(getChargeText(elementCharge), 'super');\r\n        pseudoElementElem.appendChild(elementChargeElem);\r\n      }\r\n\r\n      if (hydrogenCount > 0) {\r\n        let pseudoHydrogenElem = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');\r\n\r\n        pseudoHydrogenElem.setAttributeNS(null, 'style', 'unicode-bidi: plaintext;');\r\n        pseudoHydrogenElem.appendChild(document.createTextNode('H'));\r\n        pseudoElementElem.appendChild(pseudoHydrogenElem);\r\n\r\n        if (hydrogenCount > 1) {\r\n          let hydrogenCountElem = this.createSubSuperScripts(hydrogenCount, 'sub');\r\n          pseudoHydrogenElem.appendChild(hydrogenCountElem);\r\n        }\r\n      }\r\n\r\n      if (elementCount > 1) {\r\n        let elementCountElem = this.createSubSuperScripts(elementCount, 'sub');\r\n        pseudoElementElem.appendChild(elementCountElem);\r\n      }\r\n\r\n      textElem.appendChild(pseudoElementElem);\r\n    }\r\n\r\n    this.vertices.push(textElem);\r\n  }\r\n\r\n  /**\r\n   * @param {Line} line the line object to create the wedge from\r\n   */\r\n  drawWedge(line) {\r\n    let offsetX = this.offsetX,\r\n      offsetY = this.offsetY,\r\n      l = line.getLeftVector().clone(),\r\n      r = line.getRightVector().clone();\r\n\r\n    l.x += offsetX;\r\n    l.y += offsetY;\r\n\r\n    r.x += offsetX;\r\n    r.y += offsetY;\r\n\r\n    let normals = Vector2.normals(l, r);\r\n\r\n    normals[0].normalize();\r\n    normals[1].normalize();\r\n\r\n    let isRightChiralCenter = line.getRightChiral();\r\n\r\n    let start = l,\r\n      end = r;\r\n\r\n    if (isRightChiralCenter) {\r\n      start = r;\r\n      end = l;\r\n    }\r\n\r\n    let t = Vector2.add(start, Vector2.multiplyScalar(normals[0], this.halfBondThickness)),\r\n      u = Vector2.add(end, Vector2.multiplyScalar(normals[0], 1.5 + this.halfBondThickness)),\r\n      v = Vector2.add(end, Vector2.multiplyScalar(normals[1], 1.5 + this.halfBondThickness)),\r\n      w = Vector2.add(start, Vector2.multiplyScalar(normals[1], this.halfBondThickness));\r\n\r\n    let polygon = document.createElementNS('http://www.w3.org/2000/svg', 'polygon'),\r\n      gradient = this.createGradient(line, l.x, l.y, r.x, r.y);\r\n    polygon.setAttributeNS(null, 'points', `${t.x},${t.y} ${u.x},${u.y} ${v.x},${v.y} ${w.x},${w.y}`);\r\n    polygon.setAttributeNS(null, 'fill', `url('#${gradient}')`);\r\n    this.paths.push(polygon);\r\n  }\r\n}\r\n\r\nmodule.exports = SvgWrapper;"]},"metadata":{},"sourceType":"script"}