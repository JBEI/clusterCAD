{"ast":null,"code":"//@ts-check\nconst Vector2 = require('./Vector2');\n/** \r\n * A class representing a line.\r\n * \r\n * @property {Vector2} from The Vector2 defining the start of the line.\r\n * @property {Vector2} to The Vector2 defining the end of the line.\r\n * @property {String} elementFrom The element symbol associated with the start of the line.\r\n * @property {String} elementTo The element symbol associated with the end of the line.\r\n * @property {Boolean} chiralFrom A boolean indicating whether or not the source atom is a chiral center.\r\n * @property {Boolean} chiralTo A boolean indicating whether or tno the target atom is a chiral center.\r\n */\n\n\nclass Line {\n  /**\r\n   * The constructor for the class Line.\r\n   *\r\n   * @param {Vector2} [from=new Vector2(0, 0)] A vector marking the beginning of the line.\r\n   * @param {Vector2} [to=new Vector2(0, 0)] A vector marking the end of the line.\r\n   * @param {string} [elementFrom=null] A one-letter representation of the element associated with the vector marking the beginning of the line.\r\n   * @param {string} [elementTo=null] A one-letter representation of the element associated with the vector marking the end of the line.\r\n   * @param {Boolean} [chiralFrom=false] Whether or not the from atom is a chiral center.\r\n   * @param {Boolean} [chiralTo=false] Whether or not the to atom is a chiral center.\r\n   */\n  constructor(from = new Vector2(0, 0), to = new Vector2(0, 0), elementFrom = null, elementTo = null, chiralFrom = false, chiralTo = false) {\n    this.from = from;\n    this.to = to;\n    this.elementFrom = elementFrom;\n    this.elementTo = elementTo;\n    this.chiralFrom = chiralFrom;\n    this.chiralTo = chiralTo;\n  }\n  /**\r\n   * Clones this line and returns the clone.\r\n   *\r\n   * @returns {Line} A clone of this line.\r\n   */\n\n\n  clone() {\n    return new Line(this.from.clone(), this.to.clone(), this.elementFrom, this.elementTo);\n  }\n  /**\r\n   * Returns the length of this line.\r\n   *\r\n   * @returns {Number} The length of this line.\r\n   */\n\n\n  getLength() {\n    return Math.sqrt(Math.pow(this.to.x - this.from.x, 2) + Math.pow(this.to.y - this.from.y, 2));\n  }\n  /**\r\n   * Returns the angle of the line in relation to the coordinate system (the x-axis).\r\n   *\r\n   * @returns {Number} The angle in radians.\r\n   */\n\n\n  getAngle() {\n    // Get the angle between the line and the x-axis\n    let diff = Vector2.subtract(this.getRightVector(), this.getLeftVector());\n    return diff.angle();\n  }\n  /**\r\n   * Returns the right vector (the vector with the larger x value).\r\n   *\r\n   * @returns {Vector2} The right vector.\r\n   */\n\n\n  getRightVector() {\n    // Return the vector with the larger x value (the right one)\n    if (this.from.x < this.to.x) {\n      return this.to;\n    } else {\n      return this.from;\n    }\n  }\n  /**\r\n   * Returns the left vector (the vector with the smaller x value).\r\n   *\r\n   * @returns {Vector2} The left vector.\r\n   */\n\n\n  getLeftVector() {\n    // Return the vector with the smaller x value (the left one)\n    if (this.from.x < this.to.x) {\n      return this.from;\n    } else {\n      return this.to;\n    }\n  }\n  /**\r\n   * Returns the element associated with the right vector (the vector with the larger x value).\r\n   *\r\n   * @returns {String} The element associated with the right vector.\r\n   */\n\n\n  getRightElement() {\n    if (this.from.x < this.to.x) {\n      return this.elementTo;\n    } else {\n      return this.elementFrom;\n    }\n  }\n  /**\r\n   * Returns the element associated with the left vector (the vector with the smaller x value).\r\n   *\r\n   * @returns {String} The element associated with the left vector.\r\n   */\n\n\n  getLeftElement() {\n    if (this.from.x < this.to.x) {\n      return this.elementFrom;\n    } else {\n      return this.elementTo;\n    }\n  }\n  /**\r\n   * Returns whether or not the atom associated with the right vector (the vector with the larger x value) is a chiral center.\r\n   *\r\n   * @returns {Boolean} Whether or not the atom associated with the right vector is a chiral center.\r\n   */\n\n\n  getRightChiral() {\n    if (this.from.x < this.to.x) {\n      return this.chiralTo;\n    } else {\n      return this.chiralFrom;\n    }\n  }\n  /**\r\n   * Returns whether or not the atom associated with the left vector (the vector with the smaller x value) is a chiral center.\r\n   *\r\n   * @returns {Boolean} Whether or not the atom  associated with the left vector is a chiral center.\r\n   */\n\n\n  getLeftChiral() {\n    if (this.from.x < this.to.x) {\n      return this.chiralFrom;\n    } else {\n      return this.chiralTo;\n    }\n  }\n  /**\r\n   * Set the value of the right vector.\r\n   *\r\n   * @param {Number} x The x value.\r\n   * @param {Number} y The y value.\r\n   * @returns {Line} This line.\r\n   */\n\n\n  setRightVector(x, y) {\n    if (this.from.x < this.to.x) {\n      this.to.x = x;\n      this.to.y = y;\n    } else {\n      this.from.x = x;\n      this.from.y = y;\n    }\n\n    return this;\n  }\n  /**\r\n   * Set the value of the left vector.\r\n   *\r\n   * @param {Number} x The x value.\r\n   * @param {Number} y The y value.\r\n   * @returns {Line} This line.\r\n   */\n\n\n  setLeftVector(x, y) {\n    if (this.from.x < this.to.x) {\n      this.from.x = x;\n      this.from.y = y;\n    } else {\n      this.to.x = x;\n      this.to.y = y;\n    }\n\n    return this;\n  }\n  /**\r\n   * Rotates this line to be aligned with the x-axis. The center of rotation is the left vector.\r\n   *\r\n   * @returns {Line} This line.\r\n   */\n\n\n  rotateToXAxis() {\n    let left = this.getLeftVector();\n    this.setRightVector(left.x + this.getLength(), left.y);\n    return this;\n  }\n  /**\r\n   * Rotate the line by a given value (in radians). The center of rotation is the left vector.\r\n   *\r\n   * @param {Number} theta The angle (in radians) to rotate the line.\r\n   * @returns {Line} This line.\r\n   */\n\n\n  rotate(theta) {\n    let l = this.getLeftVector();\n    let r = this.getRightVector();\n    let sinTheta = Math.sin(theta);\n    let cosTheta = Math.cos(theta);\n    let x = cosTheta * (r.x - l.x) - sinTheta * (r.y - l.y) + l.x;\n    let y = sinTheta * (r.x - l.x) - cosTheta * (r.y - l.y) + l.y;\n    this.setRightVector(x, y);\n    return this;\n  }\n  /**\r\n   * Shortens this line from the \"from\" direction by a given value (in pixels).\r\n   *\r\n   * @param {Number} by The length in pixels to shorten the vector by.\r\n   * @returns {Line} This line.\r\n   */\n\n\n  shortenFrom(by) {\n    let f = Vector2.subtract(this.to, this.from);\n    f.normalize();\n    f.multiplyScalar(by);\n    this.from.add(f);\n    return this;\n  }\n  /**\r\n   * Shortens this line from the \"to\" direction by a given value (in pixels).\r\n   *\r\n   * @param {Number} by The length in pixels to shorten the vector by.\r\n   * @returns {Line} This line.\r\n   */\n\n\n  shortenTo(by) {\n    let f = Vector2.subtract(this.from, this.to);\n    f.normalize();\n    f.multiplyScalar(by);\n    this.to.add(f);\n    return this;\n  }\n  /**\r\n   * Shorten the right side.\r\n   *\r\n   * @param {Number} by The length in pixels to shorten the vector by.\r\n   * @returns {Line} Returns itself.\r\n   */\n\n\n  shortenRight(by) {\n    if (this.from.x < this.to.x) {\n      this.shortenTo(by);\n    } else {\n      this.shortenFrom(by);\n    }\n\n    return this;\n  }\n  /**\r\n   * Shorten the left side.\r\n   * \r\n   * @param {Number} by The length in pixels to shorten the vector by.\r\n   * @returns {Line} Returns itself.\r\n   */\n\n\n  shortenLeft(by) {\n    if (this.from.x < this.to.x) {\n      this.shortenFrom(by);\n    } else {\n      this.shortenTo(by);\n    }\n\n    return this;\n  }\n  /**\r\n   * Shortens this line from both directions by a given value (in pixels).\r\n   *\r\n   * @param {Number} by The length in pixels to shorten the vector by.\r\n   * @returns {Line} This line.\r\n   */\n\n\n  shorten(by) {\n    let f = Vector2.subtract(this.from, this.to);\n    f.normalize();\n    f.multiplyScalar(by / 2.0);\n    this.to.add(f);\n    this.from.subtract(f);\n    return this;\n  }\n\n}\n\nmodule.exports = Line;","map":{"version":3,"sources":["/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/smiles-drawer/src/Line.js"],"names":["Vector2","require","Line","constructor","from","to","elementFrom","elementTo","chiralFrom","chiralTo","clone","getLength","Math","sqrt","pow","x","y","getAngle","diff","subtract","getRightVector","getLeftVector","angle","getRightElement","getLeftElement","getRightChiral","getLeftChiral","setRightVector","setLeftVector","rotateToXAxis","left","rotate","theta","l","r","sinTheta","sin","cosTheta","cos","shortenFrom","by","f","normalize","multiplyScalar","add","shortenTo","shortenRight","shortenLeft","shorten","module","exports"],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,IAAN,CAAW;AACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,IAAI,GAAG,IAAIJ,OAAJ,CAAY,CAAZ,EAAc,CAAd,CAAR,EAA0BK,EAAE,GAAG,IAAIL,OAAJ,CAAY,CAAZ,EAAe,CAAf,CAA/B,EAAkDM,WAAW,GAAG,IAAhE,EAAsEC,SAAS,GAAG,IAAlF,EAAwFC,UAAU,GAAG,KAArG,EAA4GC,QAAQ,GAAG,KAAvH,EAA8H;AACrI,SAAKL,IAAL,GAAYA,IAAZ;AACA,SAAKC,EAAL,GAAUA,EAAV;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,KAAK,GAAG;AACJ,WAAO,IAAIR,IAAJ,CAAS,KAAKE,IAAL,CAAUM,KAAV,EAAT,EAA4B,KAAKL,EAAL,CAAQK,KAAR,EAA5B,EAA6C,KAAKJ,WAAlD,EAA+D,KAAKC,SAApE,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACII,EAAAA,SAAS,GAAG;AACR,WAAOC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAAS,KAAKT,EAAL,CAAQU,CAAR,GAAY,KAAKX,IAAL,CAAUW,CAA/B,EAAkC,CAAlC,IACAH,IAAI,CAACE,GAAL,CAAS,KAAKT,EAAL,CAAQW,CAAR,GAAY,KAAKZ,IAAL,CAAUY,CAA/B,EAAkC,CAAlC,CADV,CAAP;AAEH;AAGD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,QAAQ,GAAG;AACP;AACA,QAAIC,IAAI,GAAGlB,OAAO,CAACmB,QAAR,CAAiB,KAAKC,cAAL,EAAjB,EAAwC,KAAKC,aAAL,EAAxC,CAAX;AACA,WAAOH,IAAI,CAACI,KAAL,EAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIF,EAAAA,cAAc,GAAG;AACb;AACA,QAAI,KAAKhB,IAAL,CAAUW,CAAV,GAAc,KAAKV,EAAL,CAAQU,CAA1B,EAA6B;AACzB,aAAO,KAAKV,EAAZ;AACH,KAFD,MAEO;AACH,aAAO,KAAKD,IAAZ;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;;;AACIiB,EAAAA,aAAa,GAAG;AACZ;AACA,QAAI,KAAKjB,IAAL,CAAUW,CAAV,GAAc,KAAKV,EAAL,CAAQU,CAA1B,EAA6B;AACzB,aAAO,KAAKX,IAAZ;AACH,KAFD,MAEO;AACH,aAAO,KAAKC,EAAZ;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;;;AACIkB,EAAAA,eAAe,GAAG;AACd,QAAI,KAAKnB,IAAL,CAAUW,CAAV,GAAc,KAAKV,EAAL,CAAQU,CAA1B,EAA6B;AACzB,aAAO,KAAKR,SAAZ;AACH,KAFD,MAEO;AACH,aAAO,KAAKD,WAAZ;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;;;AACIkB,EAAAA,cAAc,GAAG;AACb,QAAI,KAAKpB,IAAL,CAAUW,CAAV,GAAc,KAAKV,EAAL,CAAQU,CAA1B,EAA6B;AACzB,aAAO,KAAKT,WAAZ;AACH,KAFD,MAEO;AACH,aAAO,KAAKC,SAAZ;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;;;AACIkB,EAAAA,cAAc,GAAG;AACb,QAAI,KAAKrB,IAAL,CAAUW,CAAV,GAAc,KAAKV,EAAL,CAAQU,CAA1B,EAA6B;AACzB,aAAO,KAAKN,QAAZ;AACH,KAFD,MAEO;AACH,aAAO,KAAKD,UAAZ;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;;;AACIkB,EAAAA,aAAa,GAAG;AACZ,QAAI,KAAKtB,IAAL,CAAUW,CAAV,GAAc,KAAKV,EAAL,CAAQU,CAA1B,EAA6B;AACzB,aAAO,KAAKP,UAAZ;AACH,KAFD,MAEO;AACH,aAAO,KAAKC,QAAZ;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIkB,EAAAA,cAAc,CAACZ,CAAD,EAAIC,CAAJ,EAAO;AACjB,QAAI,KAAKZ,IAAL,CAAUW,CAAV,GAAc,KAAKV,EAAL,CAAQU,CAA1B,EAA6B;AACzB,WAAKV,EAAL,CAAQU,CAAR,GAAYA,CAAZ;AACA,WAAKV,EAAL,CAAQW,CAAR,GAAYA,CAAZ;AACH,KAHD,MAGO;AACH,WAAKZ,IAAL,CAAUW,CAAV,GAAcA,CAAd;AACA,WAAKX,IAAL,CAAUY,CAAV,GAAcA,CAAd;AACH;;AAED,WAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIY,EAAAA,aAAa,CAACb,CAAD,EAAIC,CAAJ,EAAO;AAChB,QAAI,KAAKZ,IAAL,CAAUW,CAAV,GAAc,KAAKV,EAAL,CAAQU,CAA1B,EAA6B;AACzB,WAAKX,IAAL,CAAUW,CAAV,GAAcA,CAAd;AACA,WAAKX,IAAL,CAAUY,CAAV,GAAcA,CAAd;AACH,KAHD,MAGO;AACH,WAAKX,EAAL,CAAQU,CAAR,GAAYA,CAAZ;AACA,WAAKV,EAAL,CAAQW,CAAR,GAAYA,CAAZ;AACH;;AAED,WAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIa,EAAAA,aAAa,GAAG;AACZ,QAAIC,IAAI,GAAG,KAAKT,aAAL,EAAX;AAEA,SAAKM,cAAL,CAAoBG,IAAI,CAACf,CAAL,GAAS,KAAKJ,SAAL,EAA7B,EAA+CmB,IAAI,CAACd,CAApD;AAEA,WAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIe,EAAAA,MAAM,CAACC,KAAD,EAAQ;AACV,QAAIC,CAAC,GAAG,KAAKZ,aAAL,EAAR;AACA,QAAIa,CAAC,GAAG,KAAKd,cAAL,EAAR;AACA,QAAIe,QAAQ,GAAGvB,IAAI,CAACwB,GAAL,CAASJ,KAAT,CAAf;AACA,QAAIK,QAAQ,GAAGzB,IAAI,CAAC0B,GAAL,CAASN,KAAT,CAAf;AAEA,QAAIjB,CAAC,GAAGsB,QAAQ,IAAIH,CAAC,CAACnB,CAAF,GAAMkB,CAAC,CAAClB,CAAZ,CAAR,GAAyBoB,QAAQ,IAAID,CAAC,CAAClB,CAAF,GAAMiB,CAAC,CAACjB,CAAZ,CAAjC,GAAkDiB,CAAC,CAAClB,CAA5D;AACA,QAAIC,CAAC,GAAGmB,QAAQ,IAAID,CAAC,CAACnB,CAAF,GAAMkB,CAAC,CAAClB,CAAZ,CAAR,GAAyBsB,QAAQ,IAAIH,CAAC,CAAClB,CAAF,GAAMiB,CAAC,CAACjB,CAAZ,CAAjC,GAAkDiB,CAAC,CAACjB,CAA5D;AAEA,SAAKW,cAAL,CAAoBZ,CAApB,EAAuBC,CAAvB;AAEA,WAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIuB,EAAAA,WAAW,CAACC,EAAD,EAAK;AACZ,QAAIC,CAAC,GAAGzC,OAAO,CAACmB,QAAR,CAAiB,KAAKd,EAAtB,EAA0B,KAAKD,IAA/B,CAAR;AAEAqC,IAAAA,CAAC,CAACC,SAAF;AACAD,IAAAA,CAAC,CAACE,cAAF,CAAiBH,EAAjB;AAEA,SAAKpC,IAAL,CAAUwC,GAAV,CAAcH,CAAd;AAEA,WAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACII,EAAAA,SAAS,CAACL,EAAD,EAAK;AACV,QAAIC,CAAC,GAAGzC,OAAO,CAACmB,QAAR,CAAiB,KAAKf,IAAtB,EAA4B,KAAKC,EAAjC,CAAR;AAEAoC,IAAAA,CAAC,CAACC,SAAF;AACAD,IAAAA,CAAC,CAACE,cAAF,CAAiBH,EAAjB;AAEA,SAAKnC,EAAL,CAAQuC,GAAR,CAAYH,CAAZ;AAEA,WAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIK,EAAAA,YAAY,CAACN,EAAD,EAAK;AACb,QAAI,KAAKpC,IAAL,CAAUW,CAAV,GAAc,KAAKV,EAAL,CAAQU,CAA1B,EAA6B;AACzB,WAAK8B,SAAL,CAAeL,EAAf;AACH,KAFD,MAEO;AACH,WAAKD,WAAL,CAAiBC,EAAjB;AACH;;AAED,WAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIO,EAAAA,WAAW,CAACP,EAAD,EAAK;AACZ,QAAI,KAAKpC,IAAL,CAAUW,CAAV,GAAc,KAAKV,EAAL,CAAQU,CAA1B,EAA6B;AACzB,WAAKwB,WAAL,CAAiBC,EAAjB;AACH,KAFD,MAEO;AACH,WAAKK,SAAL,CAAeL,EAAf;AACH;;AAED,WAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIQ,EAAAA,OAAO,CAACR,EAAD,EAAK;AACR,QAAIC,CAAC,GAAGzC,OAAO,CAACmB,QAAR,CAAiB,KAAKf,IAAtB,EAA4B,KAAKC,EAAjC,CAAR;AAEAoC,IAAAA,CAAC,CAACC,SAAF;AACAD,IAAAA,CAAC,CAACE,cAAF,CAAiBH,EAAE,GAAG,GAAtB;AAEA,SAAKnC,EAAL,CAAQuC,GAAR,CAAYH,CAAZ;AACA,SAAKrC,IAAL,CAAUe,QAAV,CAAmBsB,CAAnB;AAEA,WAAO,IAAP;AACH;;AA5RM;;AA+RXQ,MAAM,CAACC,OAAP,GAAiBhD,IAAjB","sourcesContent":["//@ts-check\r\nconst Vector2 = require('./Vector2')\r\n\r\n/** \r\n * A class representing a line.\r\n * \r\n * @property {Vector2} from The Vector2 defining the start of the line.\r\n * @property {Vector2} to The Vector2 defining the end of the line.\r\n * @property {String} elementFrom The element symbol associated with the start of the line.\r\n * @property {String} elementTo The element symbol associated with the end of the line.\r\n * @property {Boolean} chiralFrom A boolean indicating whether or not the source atom is a chiral center.\r\n * @property {Boolean} chiralTo A boolean indicating whether or tno the target atom is a chiral center.\r\n */\r\nclass Line {\r\n    /**\r\n     * The constructor for the class Line.\r\n     *\r\n     * @param {Vector2} [from=new Vector2(0, 0)] A vector marking the beginning of the line.\r\n     * @param {Vector2} [to=new Vector2(0, 0)] A vector marking the end of the line.\r\n     * @param {string} [elementFrom=null] A one-letter representation of the element associated with the vector marking the beginning of the line.\r\n     * @param {string} [elementTo=null] A one-letter representation of the element associated with the vector marking the end of the line.\r\n     * @param {Boolean} [chiralFrom=false] Whether or not the from atom is a chiral center.\r\n     * @param {Boolean} [chiralTo=false] Whether or not the to atom is a chiral center.\r\n     */\r\n    constructor(from = new Vector2(0,0), to = new Vector2(0, 0), elementFrom = null, elementTo = null, chiralFrom = false, chiralTo = false) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.elementFrom = elementFrom;\r\n        this.elementTo = elementTo;\r\n        this.chiralFrom = chiralFrom;\r\n        this.chiralTo = chiralTo;\r\n    }\r\n\r\n    /**\r\n     * Clones this line and returns the clone.\r\n     *\r\n     * @returns {Line} A clone of this line.\r\n     */\r\n    clone() {\r\n        return new Line(this.from.clone(), this.to.clone(), this.elementFrom, this.elementTo);\r\n    }\r\n\r\n    /**\r\n     * Returns the length of this line.\r\n     *\r\n     * @returns {Number} The length of this line.\r\n     */\r\n    getLength() {\r\n        return Math.sqrt(Math.pow(this.to.x - this.from.x, 2) + \r\n                         Math.pow(this.to.y - this.from.y, 2));\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns the angle of the line in relation to the coordinate system (the x-axis).\r\n     *\r\n     * @returns {Number} The angle in radians.\r\n     */\r\n    getAngle() {\r\n        // Get the angle between the line and the x-axis\r\n        let diff = Vector2.subtract(this.getRightVector(), this.getLeftVector());\r\n        return diff.angle();\r\n    }\r\n\r\n    /**\r\n     * Returns the right vector (the vector with the larger x value).\r\n     *\r\n     * @returns {Vector2} The right vector.\r\n     */\r\n    getRightVector() {\r\n        // Return the vector with the larger x value (the right one)\r\n        if (this.from.x < this.to.x) {\r\n            return this.to;\r\n        } else {\r\n            return this.from;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Returns the left vector (the vector with the smaller x value).\r\n     *\r\n     * @returns {Vector2} The left vector.\r\n     */\r\n    getLeftVector() {\r\n        // Return the vector with the smaller x value (the left one)\r\n        if (this.from.x < this.to.x) {\r\n            return this.from;\r\n        } else {\r\n            return this.to;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the element associated with the right vector (the vector with the larger x value).\r\n     *\r\n     * @returns {String} The element associated with the right vector.\r\n     */\r\n    getRightElement() {\r\n        if (this.from.x < this.to.x) {\r\n            return this.elementTo;\r\n        } else {\r\n            return this.elementFrom;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the element associated with the left vector (the vector with the smaller x value).\r\n     *\r\n     * @returns {String} The element associated with the left vector.\r\n     */\r\n    getLeftElement() {\r\n        if (this.from.x < this.to.x) {\r\n            return this.elementFrom;\r\n        } else {\r\n            return this.elementTo;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the atom associated with the right vector (the vector with the larger x value) is a chiral center.\r\n     *\r\n     * @returns {Boolean} Whether or not the atom associated with the right vector is a chiral center.\r\n     */\r\n    getRightChiral() {\r\n        if (this.from.x < this.to.x) {\r\n            return this.chiralTo;\r\n        } else {\r\n            return this.chiralFrom;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the atom associated with the left vector (the vector with the smaller x value) is a chiral center.\r\n     *\r\n     * @returns {Boolean} Whether or not the atom  associated with the left vector is a chiral center.\r\n     */\r\n    getLeftChiral() {\r\n        if (this.from.x < this.to.x) {\r\n            return this.chiralFrom;\r\n        } else {\r\n            return this.chiralTo;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the value of the right vector.\r\n     *\r\n     * @param {Number} x The x value.\r\n     * @param {Number} y The y value.\r\n     * @returns {Line} This line.\r\n     */\r\n    setRightVector(x, y) {\r\n        if (this.from.x < this.to.x) {\r\n            this.to.x = x;\r\n            this.to.y = y;\r\n        } else {\r\n            this.from.x = x;\r\n            this.from.y = y;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the value of the left vector.\r\n     *\r\n     * @param {Number} x The x value.\r\n     * @param {Number} y The y value.\r\n     * @returns {Line} This line.\r\n     */\r\n    setLeftVector(x, y) {\r\n        if (this.from.x < this.to.x) {\r\n            this.from.x = x;\r\n            this.from.y = y;\r\n        } else {\r\n            this.to.x = x;\r\n            this.to.y = y;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotates this line to be aligned with the x-axis. The center of rotation is the left vector.\r\n     *\r\n     * @returns {Line} This line.\r\n     */\r\n    rotateToXAxis() {\r\n        let left = this.getLeftVector();\r\n        \r\n        this.setRightVector(left.x + this.getLength(), left.y);\r\n        \r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotate the line by a given value (in radians). The center of rotation is the left vector.\r\n     *\r\n     * @param {Number} theta The angle (in radians) to rotate the line.\r\n     * @returns {Line} This line.\r\n     */\r\n    rotate(theta) {\r\n        let l = this.getLeftVector();\r\n        let r = this.getRightVector();\r\n        let sinTheta = Math.sin(theta);\r\n        let cosTheta = Math.cos(theta);\r\n\r\n        let x = cosTheta * (r.x - l.x) - sinTheta * (r.y - l.y) + l.x;\r\n        let y = sinTheta * (r.x - l.x) - cosTheta * (r.y - l.y) + l.y;\r\n        \r\n        this.setRightVector(x, y);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Shortens this line from the \"from\" direction by a given value (in pixels).\r\n     *\r\n     * @param {Number} by The length in pixels to shorten the vector by.\r\n     * @returns {Line} This line.\r\n     */\r\n    shortenFrom(by) {\r\n        let f = Vector2.subtract(this.to, this.from);\r\n        \r\n        f.normalize();\r\n        f.multiplyScalar(by);\r\n        \r\n        this.from.add(f);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Shortens this line from the \"to\" direction by a given value (in pixels).\r\n     *\r\n     * @param {Number} by The length in pixels to shorten the vector by.\r\n     * @returns {Line} This line.\r\n     */\r\n    shortenTo(by) {\r\n        let f = Vector2.subtract(this.from, this.to);\r\n        \r\n        f.normalize();\r\n        f.multiplyScalar(by);\r\n        \r\n        this.to.add(f);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Shorten the right side.\r\n     *\r\n     * @param {Number} by The length in pixels to shorten the vector by.\r\n     * @returns {Line} Returns itself.\r\n     */\r\n    shortenRight(by) {\r\n        if (this.from.x < this.to.x) {\r\n            this.shortenTo(by);\r\n        } else {\r\n            this.shortenFrom(by);\r\n        }\r\n\r\n        return this;\r\n    }\r\n    \r\n    /**\r\n     * Shorten the left side.\r\n     * \r\n     * @param {Number} by The length in pixels to shorten the vector by.\r\n     * @returns {Line} Returns itself.\r\n     */\r\n    shortenLeft(by) {\r\n        if (this.from.x < this.to.x) {\r\n            this.shortenFrom(by);\r\n        } else {\r\n            this.shortenTo(by);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Shortens this line from both directions by a given value (in pixels).\r\n     *\r\n     * @param {Number} by The length in pixels to shorten the vector by.\r\n     * @returns {Line} This line.\r\n     */\r\n    shorten(by) {\r\n        let f = Vector2.subtract(this.from, this.to);\r\n        \r\n        f.normalize();\r\n        f.multiplyScalar(by / 2.0);\r\n        \r\n        this.to.add(f);\r\n        this.from.subtract(f);\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = Line;"]},"metadata":{},"sourceType":"script"}