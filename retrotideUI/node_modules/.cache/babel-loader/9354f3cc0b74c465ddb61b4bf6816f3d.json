{"ast":null,"code":"//@ts-check\n\n/** \r\n * A static class containing helper functions for array-related tasks. \r\n */\nclass ArrayHelper {\n  /**\r\n   * Clone an array or an object. If an object is passed, a shallow clone will be created.\r\n   *\r\n   * @static\r\n   * @param {*} arr The array or object to be cloned.\r\n   * @returns {*} A clone of the array or object.\r\n   */\n  static clone(arr) {\n    let out = Array.isArray(arr) ? Array() : {};\n\n    for (let key in arr) {\n      let value = arr[key];\n\n      if (typeof value.clone === 'function') {\n        out[key] = value.clone();\n      } else {\n        out[key] = typeof value === 'object' ? ArrayHelper.clone(value) : value;\n      }\n    }\n\n    return out;\n  }\n  /**\r\n   * Returns a boolean indicating whether or not the two arrays contain the same elements.\r\n   * Only supports 1d, non-nested arrays.\r\n   *\r\n   * @static\r\n   * @param {Array} arrA An array.\r\n   * @param {Array} arrB An array.\r\n   * @returns {Boolean} A boolean indicating whether or not the two arrays contain the same elements.\r\n   */\n\n\n  static equals(arrA, arrB) {\n    if (arrA.length !== arrB.length) {\n      return false;\n    }\n\n    let tmpA = arrA.slice().sort();\n    let tmpB = arrB.slice().sort();\n\n    for (var i = 0; i < tmpA.length; i++) {\n      if (tmpA[i] !== tmpB[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\r\n   * Returns a string representation of an array. If the array contains objects with an id property, the id property is printed for each of the elements.\r\n   *\r\n   * @static\r\n   * @param {Object[]} arr An array.\r\n   * @param {*} arr[].id If the array contains an object with the property 'id', the properties value is printed. Else, the array elements value is printend.\r\n   * @returns {String} A string representation of the array.\r\n   */\n\n\n  static print(arr) {\n    if (arr.length == 0) {\n      return '';\n    }\n\n    let s = '(';\n\n    for (let i = 0; i < arr.length; i++) {\n      s += arr[i].id ? arr[i].id + ', ' : arr[i] + ', ';\n    }\n\n    s = s.substring(0, s.length - 2);\n    return s + ')';\n  }\n  /**\r\n   * Run a function for each element in the array. The element is supplied as an argument for the callback function\r\n   *\r\n   * @static\r\n   * @param {Array} arr An array.\r\n   * @param {Function} callback The callback function that is called for each element.\r\n   */\n\n\n  static each(arr, callback) {\n    for (let i = 0; i < arr.length; i++) {\n      callback(arr[i]);\n    }\n  }\n  /**\r\n   * Return the array element from an array containing objects, where a property of the object is set to a given value.\r\n   *\r\n   * @static\r\n   * @param {Array} arr An array.\r\n   * @param {(String|Number)} property A property contained within an object in the array.\r\n   * @param {(String|Number)} value The value of the property.\r\n   * @returns {*} The array element matching the value.\r\n   */\n\n\n  static get(arr, property, value) {\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i][property] == value) {\n        return arr[i];\n      }\n    }\n  }\n  /**\r\n   * Checks whether or not an array contains a given value. the options object passed as a second argument can contain three properties. value: The value to be searched for. property: The property that is to be searched for a given value. func: A function that is used as a callback to return either true or false in order to do a custom comparison.\r\n   *\r\n   * @static\r\n   * @param {Array} arr An array.\r\n   * @param {Object} options See method description.\r\n   * @param {*} options.value The value for which to check.\r\n   * @param {String} [options.property=undefined] The property on which to check.\r\n   * @param {Function} [options.func=undefined] A custom property function.\r\n   * @returns {Boolean} A boolean whether or not the array contains a value.\r\n   */\n\n\n  static contains(arr, options) {\n    if (!options.property && !options.func) {\n      for (let i = 0; i < arr.length; i++) {\n        if (arr[i] == options.value) {\n          return true;\n        }\n      }\n    } else if (options.func) {\n      for (let i = 0; i < arr.length; i++) {\n        if (options.func(arr[i])) {\n          return true;\n        }\n      }\n    } else {\n      for (let i = 0; i < arr.length; i++) {\n        if (arr[i][options.property] == options.value) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n  /**\r\n   * Returns an array containing the intersection between two arrays. That is, values that are common to both arrays.\r\n   *\r\n   * @static\r\n   * @param {Array} arrA An array.\r\n   * @param {Array} arrB An array.\r\n   * @returns {Array} The intersecting vlaues.\r\n   */\n\n\n  static intersection(arrA, arrB) {\n    let intersection = new Array();\n\n    for (let i = 0; i < arrA.length; i++) {\n      for (let j = 0; j < arrB.length; j++) {\n        if (arrA[i] === arrB[j]) {\n          intersection.push(arrA[i]);\n        }\n      }\n    }\n\n    return intersection;\n  }\n  /**\r\n   * Returns an array of unique elements contained in an array.\r\n   *\r\n   * @static\r\n   * @param {Array} arr An array.\r\n   * @returns {Array} An array of unique elements contained within the array supplied as an argument.\r\n   */\n\n\n  static unique(arr) {\n    let contains = {};\n    return arr.filter(function (i) {\n      // using !== instead of hasOwnProperty (http://andrew.hedges.name/experiments/in/)\n      return contains[i] !== undefined ? false : contains[i] = true;\n    });\n  }\n  /**\r\n   * Count the number of occurences of a value in an array.\r\n   *\r\n   * @static\r\n   * @param {Array} arr An array.\r\n   * @param {*} value A value to be counted.\r\n   * @returns {Number} The number of occurences of a value in the array.\r\n   */\n\n\n  static count(arr, value) {\n    let count = 0;\n\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] === value) {\n        count++;\n      }\n    }\n\n    return count;\n  }\n  /**\r\n   * Toggles the value of an array. If a value is not contained in an array, the array returned will contain all the values of the original array including the value. If a value is contained in an array, the array returned will contain all the values of the original array excluding the value.\r\n   *\r\n   * @static\r\n   * @param {Array} arr An array.\r\n   * @param {*} value A value to be toggled.\r\n   * @returns {Array} The toggled array.\r\n   */\n\n\n  static toggle(arr, value) {\n    let newArr = Array();\n    let removed = false;\n\n    for (let i = 0; i < arr.length; i++) {\n      // Do not copy value if it exists\n      if (arr[i] !== value) {\n        newArr.push(arr[i]);\n      } else {\n        // The element was not copied to the new array, which\n        // means it was removed\n        removed = true;\n      }\n    } // If the element was not removed, then it was not in the array\n    // so add it\n\n\n    if (!removed) {\n      newArr.push(value);\n    }\n\n    return newArr;\n  }\n  /**\r\n   * Remove a value from an array.\r\n   *\r\n   * @static\r\n   * @param {Array} arr An array.\r\n   * @param {*} value A value to be removed.\r\n   * @returns {Array} A new array with the element with a given value removed.\r\n   */\n\n\n  static remove(arr, value) {\n    let tmp = Array();\n\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] !== value) {\n        tmp.push(arr[i]);\n      }\n    }\n\n    return tmp;\n  }\n  /**\r\n   * Remove a value from an array with unique values.\r\n   *\r\n   * @static\r\n   * @param {Array} arr An array.\r\n   * @param {*} value A value to be removed.\r\n   * @returns {Array} An array with the element with a given value removed.\r\n   */\n\n\n  static removeUnique(arr, value) {\n    let index = arr.indexOf(value);\n\n    if (index > -1) {\n      arr.splice(index, 1);\n    }\n\n    return arr;\n  }\n  /**\r\n   * Remove all elements contained in one array from another array.\r\n   *\r\n   * @static\r\n   * @param {Array} arrA The array to be filtered.\r\n   * @param {Array} arrB The array containing elements that will be removed from the other array.\r\n   * @returns {Array} The filtered array.\r\n   */\n\n\n  static removeAll(arrA, arrB) {\n    return arrA.filter(function (item) {\n      return arrB.indexOf(item) === -1;\n    });\n  }\n  /**\r\n   * Merges two arrays and returns the result. The first array will be appended to the second array.\r\n   *\r\n   * @static\r\n   * @param {Array} arrA An array.\r\n   * @param {Array} arrB An array.\r\n   * @returns {Array} The merged array.\r\n   */\n\n\n  static merge(arrA, arrB) {\n    let arr = new Array(arrA.length + arrB.length);\n\n    for (let i = 0; i < arrA.length; i++) {\n      arr[i] = arrA[i];\n    }\n\n    for (let i = 0; i < arrB.length; i++) {\n      arr[arrA.length + i] = arrB[i];\n    }\n\n    return arr;\n  }\n  /**\r\n   * Checks whether or not an array contains all the elements of another array, without regard to the order.\r\n   *\r\n   * @static\r\n   * @param {Array} arrA An array.\r\n   * @param {Array} arrB An array.\r\n   * @returns {Boolean} A boolean indicating whether or not both array contain the same elements.\r\n   */\n\n\n  static containsAll(arrA, arrB) {\n    let containing = 0;\n\n    for (let i = 0; i < arrA.length; i++) {\n      for (let j = 0; j < arrB.length; j++) {\n        if (arrA[i] === arrB[j]) {\n          containing++;\n        }\n      }\n    }\n\n    return containing === arrB.length;\n  }\n  /**\r\n   * Sort an array of atomic number information. Where the number is indicated as x, x.y, x.y.z, ...\r\n   *\r\n   * @param {Object[]} arr An array of vertex ids with their associated atomic numbers.\r\n   * @param {Number} arr[].vertexId A vertex id.\r\n   * @param {String} arr[].atomicNumber The atomic number associated with the vertex id.\r\n   * @returns {Object[]} The array sorted by atomic number. Example of an array entry: { atomicNumber: 2, vertexId: 5 }.\r\n   */\n\n\n  static sortByAtomicNumberDesc(arr) {\n    let map = arr.map(function (e, i) {\n      return {\n        index: i,\n        value: e.atomicNumber.split('.').map(Number)\n      };\n    });\n    map.sort(function (a, b) {\n      let min = Math.min(b.value.length, a.value.length);\n      let i = 0;\n\n      while (i < min && b.value[i] === a.value[i]) {\n        i++;\n      }\n\n      return i === min ? b.value.length - a.value.length : b.value[i] - a.value[i];\n    });\n    return map.map(function (e) {\n      return arr[e.index];\n    });\n  }\n  /**\r\n   * Copies a an n-dimensional array.\r\n   * \r\n   * @param {Array} arr The array to be copied.\r\n   * @returns {Array} The copy.\r\n   */\n\n\n  static deepCopy(arr) {\n    let newArr = Array();\n\n    for (let i = 0; i < arr.length; i++) {\n      let item = arr[i];\n\n      if (item instanceof Array) {\n        newArr[i] = ArrayHelper.deepCopy(item);\n      } else {\n        newArr[i] = item;\n      }\n    }\n\n    return newArr;\n  }\n\n}\n\nmodule.exports = ArrayHelper;","map":{"version":3,"sources":["/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/smiles-drawer/src/ArrayHelper.js"],"names":["ArrayHelper","clone","arr","out","Array","isArray","key","value","equals","arrA","arrB","length","tmpA","slice","sort","tmpB","i","print","s","id","substring","each","callback","get","property","contains","options","func","intersection","j","push","unique","filter","undefined","count","toggle","newArr","removed","remove","tmp","removeUnique","index","indexOf","splice","removeAll","item","merge","containsAll","containing","sortByAtomicNumberDesc","map","e","atomicNumber","split","Number","a","b","min","Math","deepCopy","module","exports"],"mappings":"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","sourcesContent":["//@ts-check\r\n\r\n/** \r\n * A static class containing helper functions for array-related tasks. \r\n */\r\nclass ArrayHelper {\r\n    /**\r\n     * Clone an array or an object. If an object is passed, a shallow clone will be created.\r\n     *\r\n     * @static\r\n     * @param {*} arr The array or object to be cloned.\r\n     * @returns {*} A clone of the array or object.\r\n     */\r\n    static clone(arr) {\r\n        let out = Array.isArray(arr) ? Array() : {};\r\n        \r\n        for (let key in arr) {\r\n            let value = arr[key];\r\n            \r\n            if (typeof value.clone === 'function') {\r\n                out[key] = value.clone();\r\n            }\r\n            else {\r\n                out[key] = (typeof value === 'object') ? ArrayHelper.clone(value) : value;\r\n            }\r\n        }\r\n        \r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Returns a boolean indicating whether or not the two arrays contain the same elements.\r\n     * Only supports 1d, non-nested arrays.\r\n     *\r\n     * @static\r\n     * @param {Array} arrA An array.\r\n     * @param {Array} arrB An array.\r\n     * @returns {Boolean} A boolean indicating whether or not the two arrays contain the same elements.\r\n     */\r\n    static equals(arrA, arrB) {\r\n        if (arrA.length !== arrB.length) {\r\n            return false;\r\n        }\r\n\r\n        let tmpA = arrA.slice().sort();\r\n        let tmpB = arrB.slice().sort();\r\n\r\n        for (var i = 0; i < tmpA.length; i++) {\r\n            if (tmpA[i] !== tmpB[i]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of an array. If the array contains objects with an id property, the id property is printed for each of the elements.\r\n     *\r\n     * @static\r\n     * @param {Object[]} arr An array.\r\n     * @param {*} arr[].id If the array contains an object with the property 'id', the properties value is printed. Else, the array elements value is printend.\r\n     * @returns {String} A string representation of the array.\r\n     */\r\n    static print(arr) {\r\n        if (arr.length == 0) {\r\n            return '';\r\n        }\r\n\r\n        let s = '(';\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            s += arr[i].id ? arr[i].id + ', ' : arr[i] + ', ';\r\n        }\r\n\r\n        s = s.substring(0, s.length - 2);\r\n\r\n        return s + ')';\r\n    }\r\n\r\n    /**\r\n     * Run a function for each element in the array. The element is supplied as an argument for the callback function\r\n     *\r\n     * @static\r\n     * @param {Array} arr An array.\r\n     * @param {Function} callback The callback function that is called for each element.\r\n     */\r\n    static each(arr, callback) {\r\n        for (let i = 0; i < arr.length; i++) {\r\n            callback(arr[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the array element from an array containing objects, where a property of the object is set to a given value.\r\n     *\r\n     * @static\r\n     * @param {Array} arr An array.\r\n     * @param {(String|Number)} property A property contained within an object in the array.\r\n     * @param {(String|Number)} value The value of the property.\r\n     * @returns {*} The array element matching the value.\r\n     */\r\n    static get(arr, property, value) {\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (arr[i][property] == value) {\r\n                return arr[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether or not an array contains a given value. the options object passed as a second argument can contain three properties. value: The value to be searched for. property: The property that is to be searched for a given value. func: A function that is used as a callback to return either true or false in order to do a custom comparison.\r\n     *\r\n     * @static\r\n     * @param {Array} arr An array.\r\n     * @param {Object} options See method description.\r\n     * @param {*} options.value The value for which to check.\r\n     * @param {String} [options.property=undefined] The property on which to check.\r\n     * @param {Function} [options.func=undefined] A custom property function.\r\n     * @returns {Boolean} A boolean whether or not the array contains a value.\r\n     */\r\n    static contains(arr, options) {\r\n        if (!options.property && !options.func) {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                if (arr[i] == options.value) {\r\n                    return true;\r\n                }\r\n            }\r\n        } else if (options.func) {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                if (options.func(arr[i])) {\r\n                    return true;\r\n                }\r\n            }\r\n        } else {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                if (arr[i][options.property] == options.value) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns an array containing the intersection between two arrays. That is, values that are common to both arrays.\r\n     *\r\n     * @static\r\n     * @param {Array} arrA An array.\r\n     * @param {Array} arrB An array.\r\n     * @returns {Array} The intersecting vlaues.\r\n     */\r\n    static intersection(arrA, arrB) {\r\n        let intersection = new Array();\r\n        \r\n        for (let i = 0; i < arrA.length; i++) {\r\n            for (let j = 0; j < arrB.length; j++) {\r\n                if (arrA[i] === arrB[j]) {\r\n                    intersection.push(arrA[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return intersection;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of unique elements contained in an array.\r\n     *\r\n     * @static\r\n     * @param {Array} arr An array.\r\n     * @returns {Array} An array of unique elements contained within the array supplied as an argument.\r\n     */\r\n    static unique(arr) {\r\n        let contains = {};\r\n        return arr.filter(function (i) {\r\n            // using !== instead of hasOwnProperty (http://andrew.hedges.name/experiments/in/)\r\n            return contains[i] !== undefined ? false : (contains[i] = true);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Count the number of occurences of a value in an array.\r\n     *\r\n     * @static\r\n     * @param {Array} arr An array.\r\n     * @param {*} value A value to be counted.\r\n     * @returns {Number} The number of occurences of a value in the array.\r\n     */\r\n    static count(arr, value) {\r\n        let count = 0;\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (arr[i] === value) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * Toggles the value of an array. If a value is not contained in an array, the array returned will contain all the values of the original array including the value. If a value is contained in an array, the array returned will contain all the values of the original array excluding the value.\r\n     *\r\n     * @static\r\n     * @param {Array} arr An array.\r\n     * @param {*} value A value to be toggled.\r\n     * @returns {Array} The toggled array.\r\n     */\r\n    static toggle(arr, value) {\r\n        let newArr = Array();\r\n\r\n        let removed = false;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            // Do not copy value if it exists\r\n            if (arr[i] !== value) {\r\n                newArr.push(arr[i]);\r\n            } else {\r\n                // The element was not copied to the new array, which\r\n                // means it was removed\r\n                removed = true;\r\n            }\r\n        }\r\n\r\n        // If the element was not removed, then it was not in the array\r\n        // so add it\r\n        if (!removed) {\r\n            newArr.push(value);\r\n        }\r\n\r\n        return newArr;\r\n    }\r\n\r\n    /**\r\n     * Remove a value from an array.\r\n     *\r\n     * @static\r\n     * @param {Array} arr An array.\r\n     * @param {*} value A value to be removed.\r\n     * @returns {Array} A new array with the element with a given value removed.\r\n     */\r\n    static remove(arr, value) {\r\n        let tmp = Array();\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (arr[i] !== value) {\r\n                tmp.push(arr[i]);\r\n            }\r\n        }\r\n\r\n        return tmp;\r\n    }\r\n\r\n    /**\r\n     * Remove a value from an array with unique values.\r\n     *\r\n     * @static\r\n     * @param {Array} arr An array.\r\n     * @param {*} value A value to be removed.\r\n     * @returns {Array} An array with the element with a given value removed.\r\n     */\r\n    static removeUnique(arr, value) {\r\n        let index = arr.indexOf(value);\r\n\r\n        if (index > -1) {\r\n            arr.splice(index, 1);\r\n        }\r\n\r\n        return arr;\r\n    }\r\n\r\n    /**\r\n     * Remove all elements contained in one array from another array.\r\n     *\r\n     * @static\r\n     * @param {Array} arrA The array to be filtered.\r\n     * @param {Array} arrB The array containing elements that will be removed from the other array.\r\n     * @returns {Array} The filtered array.\r\n     */\r\n    static removeAll(arrA, arrB) {\r\n        return arrA.filter(function (item) {\r\n            return arrB.indexOf(item) === -1;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Merges two arrays and returns the result. The first array will be appended to the second array.\r\n     *\r\n     * @static\r\n     * @param {Array} arrA An array.\r\n     * @param {Array} arrB An array.\r\n     * @returns {Array} The merged array.\r\n     */\r\n    static merge(arrA, arrB) {\r\n        let arr = new Array(arrA.length + arrB.length);\r\n\r\n        for (let i = 0; i < arrA.length; i++) {\r\n            arr[i] = arrA[i];\r\n        }\r\n\r\n        for (let i = 0; i < arrB.length; i++) {\r\n            arr[arrA.length + i] = arrB[i];\r\n        }\r\n\r\n        return arr;\r\n    }\r\n\r\n    /**\r\n     * Checks whether or not an array contains all the elements of another array, without regard to the order.\r\n     *\r\n     * @static\r\n     * @param {Array} arrA An array.\r\n     * @param {Array} arrB An array.\r\n     * @returns {Boolean} A boolean indicating whether or not both array contain the same elements.\r\n     */\r\n    static containsAll(arrA, arrB) {\r\n        let containing = 0;\r\n        for (let i = 0; i < arrA.length; i++) {\r\n            for (let j = 0; j < arrB.length; j++) {\r\n                if (arrA[i] === arrB[j]) {\r\n                    containing++;\r\n                }\r\n            }\r\n        }\r\n\r\n        return containing === arrB.length;\r\n    }\r\n    \r\n    /**\r\n     * Sort an array of atomic number information. Where the number is indicated as x, x.y, x.y.z, ...\r\n     *\r\n     * @param {Object[]} arr An array of vertex ids with their associated atomic numbers.\r\n     * @param {Number} arr[].vertexId A vertex id.\r\n     * @param {String} arr[].atomicNumber The atomic number associated with the vertex id.\r\n     * @returns {Object[]} The array sorted by atomic number. Example of an array entry: { atomicNumber: 2, vertexId: 5 }.\r\n     */\r\n    static sortByAtomicNumberDesc(arr) {\r\n        let map = arr.map(function(e, i) {\r\n            return { index: i, value: e.atomicNumber.split('.').map(Number) };\r\n        });\r\n\r\n        map.sort(function(a, b) {\r\n            let min = Math.min(b.value.length, a.value.length);\r\n            let i = 0;\r\n            \r\n            while(i < min && b.value[i] === a.value[i]) {\r\n                i++;\r\n            }\r\n\r\n            return i === min ? b.value.length - a.value.length : b.value[i] - a.value[i];\r\n        });\r\n\r\n        return map.map(function(e) {\r\n            return arr[e.index];\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Copies a an n-dimensional array.\r\n     * \r\n     * @param {Array} arr The array to be copied.\r\n     * @returns {Array} The copy.\r\n     */\r\n    static deepCopy(arr) {\r\n        let newArr = Array();\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            let item = arr[i];\r\n\r\n            if (item instanceof Array) {\r\n                newArr[i] = ArrayHelper.deepCopy(item);\r\n            } else {\r\n                newArr[i] = item;\r\n            }\r\n        }\r\n\r\n        return newArr;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = ArrayHelper;"]},"metadata":{},"sourceType":"script"}