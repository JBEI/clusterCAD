{"ast":null,"code":"//@ts-check\n\n/** \r\n * A class representing a 2D vector.\r\n * \r\n * @property {Number} x The x component of the vector.\r\n * @property {Number} y The y component of the vector.\r\n */\nclass Vector2 {\n  /**\r\n   * The constructor of the class Vector2.\r\n   *\r\n   * @param {(Number|Vector2)} x The initial x coordinate value or, if the single argument, a Vector2 object.\r\n   * @param {Number} y The initial y coordinate value.\r\n   */\n  constructor(x, y) {\n    if (arguments.length == 0) {\n      this.x = 0;\n      this.y = 0;\n    } else if (arguments.length == 1) {\n      this.x = x.x;\n      this.y = x.y;\n    } else {\n      this.x = x;\n      this.y = y;\n    }\n  }\n  /**\r\n   * Clones this vector and returns the clone.\r\n   *\r\n   * @returns {Vector2} The clone of this vector.\r\n   */\n\n\n  clone() {\n    return new Vector2(this.x, this.y);\n  }\n  /**\r\n   * Returns a string representation of this vector.\r\n   *\r\n   * @returns {String} A string representation of this vector.\r\n   */\n\n\n  toString() {\n    return '(' + this.x + ',' + this.y + ')';\n  }\n  /**\r\n   * Add the x and y coordinate values of a vector to the x and y coordinate values of this vector.\r\n   *\r\n   * @param {Vector2} vec Another vector.\r\n   * @returns {Vector2} Returns itself.\r\n   */\n\n\n  add(vec) {\n    this.x += vec.x;\n    this.y += vec.y;\n    return this;\n  }\n  /**\r\n   * Subtract the x and y coordinate values of a vector from the x and y coordinate values of this vector.\r\n   *\r\n   * @param {Vector2} vec Another vector.\r\n   * @returns {Vector2} Returns itself.\r\n   */\n\n\n  subtract(vec) {\n    this.x -= vec.x;\n    this.y -= vec.y;\n    return this;\n  }\n  /**\r\n   * Divide the x and y coordinate values of this vector by a scalar.\r\n   *\r\n   * @param {Number} scalar The scalar.\r\n   * @returns {Vector2} Returns itself.\r\n   */\n\n\n  divide(scalar) {\n    this.x /= scalar;\n    this.y /= scalar;\n    return this;\n  }\n  /**\r\n   * Multiply the x and y coordinate values of this vector by the values of another vector.\r\n   *\r\n   * @param {Vector2} v A vector.\r\n   * @returns {Vector2} Returns itself.\r\n   */\n\n\n  multiply(v) {\n    this.x *= v.x;\n    this.y *= v.y;\n    return this;\n  }\n  /**\r\n   * Multiply the x and y coordinate values of this vector by a scalar.\r\n   *\r\n   * @param {Number} scalar The scalar.\r\n   * @returns {Vector2} Returns itself.\r\n   */\n\n\n  multiplyScalar(scalar) {\n    this.x *= scalar;\n    this.y *= scalar;\n    return this;\n  }\n  /**\r\n   * Inverts this vector. Same as multiply(-1.0).\r\n   *\r\n   * @returns {Vector2} Returns itself.\r\n   */\n\n\n  invert() {\n    this.x = -this.x;\n    this.y = -this.y;\n    return this;\n  }\n  /**\r\n   * Returns the angle of this vector in relation to the coordinate system.\r\n   *\r\n   * @returns {Number} The angle in radians.\r\n   */\n\n\n  angle() {\n    return Math.atan2(this.y, this.x);\n  }\n  /**\r\n   * Returns the euclidean distance between this vector and another vector.\r\n   *\r\n   * @param {Vector2} vec A vector.\r\n   * @returns {Number} The euclidean distance between the two vectors.\r\n   */\n\n\n  distance(vec) {\n    return Math.sqrt((vec.x - this.x) * (vec.x - this.x) + (vec.y - this.y) * (vec.y - this.y));\n  }\n  /**\r\n   * Returns the squared euclidean distance between this vector and another vector. When only the relative distances of a set of vectors are needed, this is is less expensive than using distance(vec).\r\n   *\r\n   * @param {Vector2} vec Another vector.\r\n   * @returns {Number} The squared euclidean distance of the two vectors.\r\n   */\n\n\n  distanceSq(vec) {\n    return (vec.x - this.x) * (vec.x - this.x) + (vec.y - this.y) * (vec.y - this.y);\n  }\n  /**\r\n   * Checks whether or not this vector is in a clockwise or counter-clockwise rotational direction compared to another vector in relation to the coordinate system.\r\n   *\r\n   * @param {Vector2} vec Another vector.\r\n   * @returns {Number} Returns -1, 0 or 1 if the vector supplied as an argument is clockwise, neutral or counter-clockwise respectively to this vector in relation to the coordinate system.\r\n   */\n\n\n  clockwise(vec) {\n    let a = this.y * vec.x;\n    let b = this.x * vec.y;\n\n    if (a > b) {\n      return -1;\n    } else if (a === b) {\n      return 0;\n    }\n\n    return 1;\n  }\n  /**\r\n   * Checks whether or not this vector is in a clockwise or counter-clockwise rotational direction compared to another vector in relation to an arbitrary third vector.\r\n   *\r\n   * @param {Vector2} center The central vector.\r\n   * @param {Vector2} vec Another vector.\r\n   * @returns {Number} Returns -1, 0 or 1 if the vector supplied as an argument is clockwise, neutral or counter-clockwise respectively to this vector in relation to an arbitrary third vector.\r\n   */\n\n\n  relativeClockwise(center, vec) {\n    let a = (this.y - center.y) * (vec.x - center.x);\n    let b = (this.x - center.x) * (vec.y - center.y);\n\n    if (a > b) {\n      return -1;\n    } else if (a === b) {\n      return 0;\n    }\n\n    return 1;\n  }\n  /**\r\n   * Rotates this vector by a given number of radians around the origin of the coordinate system.\r\n   *\r\n   * @param {Number} angle The angle in radians to rotate the vector.\r\n   * @returns {Vector2} Returns itself.\r\n   */\n\n\n  rotate(angle) {\n    let tmp = new Vector2(0, 0);\n    let cosAngle = Math.cos(angle);\n    let sinAngle = Math.sin(angle);\n    tmp.x = this.x * cosAngle - this.y * sinAngle;\n    tmp.y = this.x * sinAngle + this.y * cosAngle;\n    this.x = tmp.x;\n    this.y = tmp.y;\n    return this;\n  }\n  /**\r\n   * Rotates this vector around another vector.\r\n   *\r\n   * @param {Number} angle The angle in radians to rotate the vector.\r\n   * @param {Vector2} vec The vector which is used as the rotational center.\r\n   * @returns {Vector2} Returns itself.\r\n   */\n\n\n  rotateAround(angle, vec) {\n    let s = Math.sin(angle);\n    let c = Math.cos(angle);\n    this.x -= vec.x;\n    this.y -= vec.y;\n    let x = this.x * c - this.y * s;\n    let y = this.x * s + this.y * c;\n    this.x = x + vec.x;\n    this.y = y + vec.y;\n    return this;\n  }\n  /**\r\n   * Rotate a vector around a given center to the same angle as another vector (so that the two vectors and the center are in a line, with both vectors on one side of the center), keeps the distance from this vector to the center.\r\n   *\r\n   * @param {Vector2} vec The vector to rotate this vector to.\r\n   * @param {Vector2} center The rotational center.\r\n   * @param {Number} [offsetAngle=0.0] An additional amount of radians to rotate the vector.\r\n   * @returns {Vector2} Returns itself.\r\n   */\n\n\n  rotateTo(vec, center, offsetAngle = 0.0) {\n    // Problem if this is first position\n    this.x += 0.001;\n    this.y -= 0.001;\n    let a = Vector2.subtract(this, center);\n    let b = Vector2.subtract(vec, center);\n    let angle = Vector2.angle(b, a);\n    this.rotateAround(angle + offsetAngle, center);\n    return this;\n  }\n  /**\r\n   * Rotates the vector away from a specified vector around a center.\r\n   * \r\n   * @param {Vector2} vec The vector this one is rotated away from.\r\n   * @param {Vector2} center The rotational center.\r\n   * @param {Number} angle The angle by which to rotate.\r\n   */\n\n\n  rotateAwayFrom(vec, center, angle) {\n    this.rotateAround(angle, center);\n    let distSqA = this.distanceSq(vec);\n    this.rotateAround(-2.0 * angle, center);\n    let distSqB = this.distanceSq(vec); // If it was rotated towards the other vertex, rotate in other direction by same amount.\n\n    if (distSqB < distSqA) {\n      this.rotateAround(2.0 * angle, center);\n    }\n  }\n  /**\r\n   * Returns the angle in radians used to rotate this vector away from a given vector.\r\n   * \r\n   * @param {Vector2} vec The vector this one is rotated away from.\r\n   * @param {Vector2} center The rotational center.\r\n   * @param {Number} angle The angle by which to rotate.\r\n   * @returns {Number} The angle in radians.\r\n   */\n\n\n  getRotateAwayFromAngle(vec, center, angle) {\n    let tmp = this.clone();\n    tmp.rotateAround(angle, center);\n    let distSqA = tmp.distanceSq(vec);\n    tmp.rotateAround(-2.0 * angle, center);\n    let distSqB = tmp.distanceSq(vec);\n\n    if (distSqB < distSqA) {\n      return angle;\n    } else {\n      return -angle;\n    }\n  }\n  /**\r\n   * Returns the angle in radians used to rotate this vector towards a given vector.\r\n   * \r\n   * @param {Vector2} vec The vector this one is rotated towards to.\r\n   * @param {Vector2} center The rotational center.\r\n   * @param {Number} angle The angle by which to rotate.\r\n   * @returns {Number} The angle in radians.\r\n   */\n\n\n  getRotateTowardsAngle(vec, center, angle) {\n    let tmp = this.clone();\n    tmp.rotateAround(angle, center);\n    let distSqA = tmp.distanceSq(vec);\n    tmp.rotateAround(-2.0 * angle, center);\n    let distSqB = tmp.distanceSq(vec);\n\n    if (distSqB > distSqA) {\n      return angle;\n    } else {\n      return -angle;\n    }\n  }\n  /**\r\n   * Gets the angles between this vector and another vector around a common center of rotation.\r\n   *\r\n   * @param {Vector2} vec Another vector.\r\n   * @param {Vector2} center The center of rotation.\r\n   * @returns {Number} The angle between this vector and another vector around a center of rotation in radians.\r\n   */\n\n\n  getRotateToAngle(vec, center) {\n    let a = Vector2.subtract(this, center);\n    let b = Vector2.subtract(vec, center);\n    let angle = Vector2.angle(b, a);\n    return Number.isNaN(angle) ? 0.0 : angle;\n  }\n  /**\r\n   * Checks whether a vector lies within a polygon spanned by a set of vectors.\r\n   *\r\n   * @param {Vector2[]} polygon An array of vectors spanning the polygon.\r\n   * @returns {Boolean} A boolean indicating whether or not this vector is within a polygon.\r\n   */\n\n\n  isInPolygon(polygon) {\n    let inside = false; // Its not always a given, that the polygon is convex (-> sugars)\n\n    for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n      if (polygon[i].y > this.y != polygon[j].y > this.y && this.x < (polygon[j].x - polygon[i].x) * (this.y - polygon[i].y) / (polygon[j].y - polygon[i].y) + polygon[i].x) {\n        inside = !inside;\n      }\n    }\n\n    return inside;\n  }\n  /**\r\n   * Returns the length of this vector.\r\n   *\r\n   * @returns {Number} The length of this vector.\r\n   */\n\n\n  length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n  /**\r\n   * Returns the square of the length of this vector.\r\n   *\r\n   * @returns {Number} The square of the length of this vector.\r\n   */\n\n\n  lengthSq() {\n    return this.x * this.x + this.y * this.y;\n  }\n  /**\r\n   * Normalizes this vector.\r\n   *\r\n   * @returns {Vector2} Returns itself.\r\n   */\n\n\n  normalize() {\n    this.divide(this.length());\n    return this;\n  }\n  /**\r\n   * Returns a normalized copy of this vector.\r\n   *\r\n   * @returns {Vector2} A normalized copy of this vector.\r\n   */\n\n\n  normalized() {\n    return Vector2.divideScalar(this, this.length());\n  }\n  /**\r\n   * Calculates which side of a line spanned by two vectors this vector is.\r\n   *\r\n   * @param {Vector2} vecA A vector.\r\n   * @param {Vector2} vecB A vector.\r\n   * @returns {Number} A number indicating the side of this vector, given a line spanned by two other vectors.\r\n   */\n\n\n  whichSide(vecA, vecB) {\n    return (this.x - vecA.x) * (vecB.y - vecA.y) - (this.y - vecA.y) * (vecB.x - vecA.x);\n  }\n  /**\r\n   * Checks whether or not this vector is on the same side of a line spanned by two vectors as another vector.\r\n   *\r\n   * @param {Vector2} vecA A vector spanning the line.\r\n   * @param {Vector2} vecB A vector spanning the line.\r\n   * @param {Vector2} vecC A vector to check whether or not it is on the same side as this vector.\r\n   * @returns {Boolean} Returns a boolean indicating whether or not this vector is on the same side as another vector.\r\n   */\n\n\n  sameSideAs(vecA, vecB, vecC) {\n    let d = this.whichSide(vecA, vecB);\n    let dRef = vecC.whichSide(vecA, vecB);\n    return d < 0 && dRef < 0 || d == 0 && dRef == 0 || d > 0 && dRef > 0;\n  }\n  /**\r\n   * Adds two vectors and returns the result as a new vector.\r\n   *\r\n   * @static\r\n   * @param {Vector2} vecA A summand.\r\n   * @param {Vector2} vecB A summand.\r\n   * @returns {Vector2} Returns the sum of two vectors.\r\n   */\n\n\n  static add(vecA, vecB) {\n    return new Vector2(vecA.x + vecB.x, vecA.y + vecB.y);\n  }\n  /**\r\n   * Subtracts one vector from another and returns the result as a new vector.\r\n   *\r\n   * @static\r\n   * @param {Vector2} vecA The minuend.\r\n   * @param {Vector2} vecB The subtrahend.\r\n   * @returns {Vector2} Returns the difference of two vectors.\r\n   */\n\n\n  static subtract(vecA, vecB) {\n    return new Vector2(vecA.x - vecB.x, vecA.y - vecB.y);\n  }\n  /**\r\n   * Multiplies two vectors (value by value) and returns the result.\r\n   *\r\n   * @static\r\n   * @param {Vector2} vecA A vector.\r\n   * @param {Vector2} vecB A vector.\r\n   * @returns {Vector2} Returns the product of two vectors.\r\n   */\n\n\n  static multiply(vecA, vecB) {\n    return new Vector2(vecA.x * vecB.x, vecA.y * vecB.y);\n  }\n  /**\r\n   * Multiplies two vectors (value by value) and returns the result.\r\n   *\r\n   * @static\r\n   * @param {Vector2} vec A vector.\r\n   * @param {Number} scalar A scalar.\r\n   * @returns {Vector2} Returns the product of two vectors.\r\n   */\n\n\n  static multiplyScalar(vec, scalar) {\n    return new Vector2(vec.x, vec.y).multiplyScalar(scalar);\n  }\n  /**\r\n   * Returns the midpoint of a line spanned by two vectors.\r\n   *\r\n   * @static\r\n   * @param {Vector2} vecA A vector spanning the line.\r\n   * @param {Vector2} vecB A vector spanning the line.\r\n   * @returns {Vector2} The midpoint of the line spanned by two vectors.\r\n   */\n\n\n  static midpoint(vecA, vecB) {\n    return new Vector2((vecA.x + vecB.x) / 2, (vecA.y + vecB.y) / 2);\n  }\n  /**\r\n   * Returns the normals of a line spanned by two vectors.\r\n   *\r\n   * @static\r\n   * @param {Vector2} vecA A vector spanning the line.\r\n   * @param {Vector2} vecB A vector spanning the line.\r\n   * @returns {Vector2[]} An array containing the two normals, each represented by a vector.\r\n   */\n\n\n  static normals(vecA, vecB) {\n    let delta = Vector2.subtract(vecB, vecA);\n    return [new Vector2(-delta.y, delta.x), new Vector2(delta.y, -delta.x)];\n  }\n  /**\r\n   * Returns the unit (normalized normal) vectors of a line spanned by two vectors.\r\n   *\r\n   * @static\r\n   * @param {Vector2} vecA A vector spanning the line.\r\n   * @param {Vector2} vecB A vector spanning the line.\r\n   * @returns {Vector2[]} An array containing the two unit vectors.\r\n   */\n\n\n  static units(vecA, vecB) {\n    let delta = Vector2.subtract(vecB, vecA);\n    return [new Vector2(-delta.y, delta.x).normalize(), new Vector2(delta.y, -delta.x).normalize()];\n  }\n  /**\r\n   * Divides a vector by another vector and returns the result as new vector.\r\n   *\r\n   * @static\r\n   * @param {Vector2} vecA The dividend.\r\n   * @param {Vector2} vecB The divisor.\r\n   * @returns {Vector2} The fraction of the two vectors.\r\n   */\n\n\n  static divide(vecA, vecB) {\n    return new Vector2(vecA.x / vecB.x, vecA.y / vecB.y);\n  }\n  /**\r\n   * Divides a vector by a scalar and returns the result as new vector.\r\n   *\r\n   * @static\r\n   * @param {Vector2} vecA The dividend.\r\n   * @param {Number} s The scalar.\r\n   * @returns {Vector2} The fraction of the two vectors.\r\n   */\n\n\n  static divideScalar(vecA, s) {\n    return new Vector2(vecA.x / s, vecA.y / s);\n  }\n  /**\r\n   * Returns the dot product of two vectors.\r\n   *\r\n   * @static\r\n   * @param {Vector2} vecA A vector.\r\n   * @param {Vector2} vecB A vector.\r\n   * @returns {Number} The dot product of two vectors.\r\n   */\n\n\n  static dot(vecA, vecB) {\n    return vecA.x * vecB.x + vecA.y * vecB.y;\n  }\n  /**\r\n   * Returns the angle between two vectors.\r\n   *\r\n   * @static\r\n   * @param {Vector2} vecA A vector.\r\n   * @param {Vector2} vecB A vector.\r\n   * @returns {Number} The angle between two vectors in radians.\r\n   */\n\n\n  static angle(vecA, vecB) {\n    let dot = Vector2.dot(vecA, vecB);\n    return Math.acos(dot / (vecA.length() * vecB.length()));\n  }\n  /**\r\n   * Returns the angle between two vectors based on a third vector in between.\r\n   *\r\n   * @static\r\n   * @param {Vector2} vecA A vector.\r\n   * @param {Vector2} vecB A (central) vector.\r\n   * @param {Vector2} vecC A vector.\r\n   * @returns {Number} The angle in radians.\r\n   */\n\n\n  static threePointangle(vecA, vecB, vecC) {\n    let ab = Vector2.subtract(vecB, vecA);\n    let bc = Vector2.subtract(vecC, vecB);\n    let abLength = vecA.distance(vecB);\n    let bcLength = vecB.distance(vecC);\n    return Math.acos(Vector2.dot(ab, bc) / (abLength * bcLength));\n  }\n  /**\r\n   * Returns the scalar projection of a vector on another vector.\r\n   *\r\n   * @static\r\n   * @param {Vector2} vecA The vector to be projected.\r\n   * @param {Vector2} vecB The vector to be projection upon.\r\n   * @returns {Number} The scalar component.\r\n   */\n\n\n  static scalarProjection(vecA, vecB) {\n    let unit = vecB.normalized();\n    return Vector2.dot(vecA, unit);\n  }\n  /**\r\n  * Returns the average vector (normalized) of the input vectors.\r\n  *\r\n  * @static\r\n  * @param {Array} vecs An array containing vectors.\r\n  * @returns {Vector2} The resulting vector (normalized).\r\n  */\n\n\n  static averageDirection(vecs) {\n    let avg = new Vector2(0.0, 0.0);\n\n    for (var i = 0; i < vecs.length; i++) {\n      let vec = vecs[i];\n      avg.add(vec);\n    }\n\n    return avg.normalize();\n  }\n\n}\n\nmodule.exports = Vector2;","map":{"version":3,"sources":["/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/smiles-drawer/src/Vector2.js"],"names":["Vector2","constructor","x","y","arguments","length","clone","toString","add","vec","subtract","divide","scalar","multiply","v","multiplyScalar","invert","angle","Math","atan2","distance","sqrt","distanceSq","clockwise","a","b","relativeClockwise","center","rotate","tmp","cosAngle","cos","sinAngle","sin","rotateAround","s","c","rotateTo","offsetAngle","rotateAwayFrom","distSqA","distSqB","getRotateAwayFromAngle","getRotateTowardsAngle","getRotateToAngle","Number","isNaN","isInPolygon","polygon","inside","i","j","lengthSq","normalize","normalized","divideScalar","whichSide","vecA","vecB","sameSideAs","vecC","d","dRef","midpoint","normals","delta","units","dot","acos","threePointangle","ab","bc","abLength","bcLength","scalarProjection","unit","averageDirection","vecs","avg","module","exports"],"mappings":"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","sourcesContent":["//@ts-check\r\n\r\n/** \r\n * A class representing a 2D vector.\r\n * \r\n * @property {Number} x The x component of the vector.\r\n * @property {Number} y The y component of the vector.\r\n */\r\nclass Vector2 {\r\n    /**\r\n     * The constructor of the class Vector2.\r\n     *\r\n     * @param {(Number|Vector2)} x The initial x coordinate value or, if the single argument, a Vector2 object.\r\n     * @param {Number} y The initial y coordinate value.\r\n     */\r\n    constructor(x, y) {\r\n        if (arguments.length == 0) {\r\n            this.x = 0;\r\n            this.y = 0;\r\n        } else if (arguments.length == 1) {\r\n            this.x = x.x;\r\n            this.y = x.y;\r\n        } else {\r\n            this.x = x;\r\n            this.y = y;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clones this vector and returns the clone.\r\n     *\r\n     * @returns {Vector2} The clone of this vector.\r\n     */\r\n    clone() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of this vector.\r\n     *\r\n     * @returns {String} A string representation of this vector.\r\n     */\r\n    toString() {\r\n        return '(' + this.x + ',' + this.y + ')';\r\n    }\r\n\r\n    /**\r\n     * Add the x and y coordinate values of a vector to the x and y coordinate values of this vector.\r\n     *\r\n     * @param {Vector2} vec Another vector.\r\n     * @returns {Vector2} Returns itself.\r\n     */\r\n    add(vec) {\r\n        this.x += vec.x;\r\n        this.y += vec.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Subtract the x and y coordinate values of a vector from the x and y coordinate values of this vector.\r\n     *\r\n     * @param {Vector2} vec Another vector.\r\n     * @returns {Vector2} Returns itself.\r\n     */\r\n    subtract(vec) {\r\n        this.x -= vec.x;\r\n        this.y -= vec.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divide the x and y coordinate values of this vector by a scalar.\r\n     *\r\n     * @param {Number} scalar The scalar.\r\n     * @returns {Vector2} Returns itself.\r\n     */\r\n    divide(scalar) {\r\n        this.x /= scalar;\r\n        this.y /= scalar;\r\n\r\n        return this;\r\n    }\r\n    \r\n    /**\r\n     * Multiply the x and y coordinate values of this vector by the values of another vector.\r\n     *\r\n     * @param {Vector2} v A vector.\r\n     * @returns {Vector2} Returns itself.\r\n     */\r\n    multiply(v) {\r\n        this.x *= v.x;\r\n        this.y *= v.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiply the x and y coordinate values of this vector by a scalar.\r\n     *\r\n     * @param {Number} scalar The scalar.\r\n     * @returns {Vector2} Returns itself.\r\n     */\r\n    multiplyScalar(scalar) {\r\n        this.x *= scalar;\r\n        this.y *= scalar;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Inverts this vector. Same as multiply(-1.0).\r\n     *\r\n     * @returns {Vector2} Returns itself.\r\n     */\r\n    invert() {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the angle of this vector in relation to the coordinate system.\r\n     *\r\n     * @returns {Number} The angle in radians.\r\n     */\r\n    angle() {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n\r\n    /**\r\n     * Returns the euclidean distance between this vector and another vector.\r\n     *\r\n     * @param {Vector2} vec A vector.\r\n     * @returns {Number} The euclidean distance between the two vectors.\r\n     */\r\n    distance(vec) {\r\n        return Math.sqrt((vec.x - this.x) * (vec.x - this.x) + (vec.y - this.y) * (vec.y - this.y));\r\n    }\r\n\r\n    /**\r\n     * Returns the squared euclidean distance between this vector and another vector. When only the relative distances of a set of vectors are needed, this is is less expensive than using distance(vec).\r\n     *\r\n     * @param {Vector2} vec Another vector.\r\n     * @returns {Number} The squared euclidean distance of the two vectors.\r\n     */\r\n    distanceSq(vec) {\r\n        return (vec.x - this.x) * (vec.x - this.x) + (vec.y - this.y) * (vec.y - this.y);\r\n    }\r\n\r\n    /**\r\n     * Checks whether or not this vector is in a clockwise or counter-clockwise rotational direction compared to another vector in relation to the coordinate system.\r\n     *\r\n     * @param {Vector2} vec Another vector.\r\n     * @returns {Number} Returns -1, 0 or 1 if the vector supplied as an argument is clockwise, neutral or counter-clockwise respectively to this vector in relation to the coordinate system.\r\n     */\r\n    clockwise(vec) {\r\n        let a = this.y * vec.x;\r\n        let b = this.x * vec.y;\r\n        \r\n        if (a > b) {\r\n            return -1;\r\n        }\r\n        else if (a === b) {\r\n            return 0;\r\n        }\r\n\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * Checks whether or not this vector is in a clockwise or counter-clockwise rotational direction compared to another vector in relation to an arbitrary third vector.\r\n     *\r\n     * @param {Vector2} center The central vector.\r\n     * @param {Vector2} vec Another vector.\r\n     * @returns {Number} Returns -1, 0 or 1 if the vector supplied as an argument is clockwise, neutral or counter-clockwise respectively to this vector in relation to an arbitrary third vector.\r\n     */\r\n    relativeClockwise(center, vec) {\r\n        let a = (this.y - center.y) * (vec.x - center.x);\r\n        let b = (this.x - center.x) * (vec.y - center.y);\r\n        \r\n        if (a > b) {\r\n            return -1;\r\n        }\r\n        else if (a === b) {\r\n            return 0;\r\n        }\r\n\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * Rotates this vector by a given number of radians around the origin of the coordinate system.\r\n     *\r\n     * @param {Number} angle The angle in radians to rotate the vector.\r\n     * @returns {Vector2} Returns itself.\r\n     */\r\n    rotate(angle) {\r\n        let tmp = new Vector2(0, 0);\r\n        let cosAngle = Math.cos(angle);\r\n        let sinAngle = Math.sin(angle);\r\n\r\n        tmp.x = this.x * cosAngle - this.y * sinAngle;\r\n        tmp.y = this.x * sinAngle + this.y * cosAngle;\r\n        \r\n        this.x = tmp.x;\r\n        this.y = tmp.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotates this vector around another vector.\r\n     *\r\n     * @param {Number} angle The angle in radians to rotate the vector.\r\n     * @param {Vector2} vec The vector which is used as the rotational center.\r\n     * @returns {Vector2} Returns itself.\r\n     */\r\n    rotateAround(angle, vec) {\r\n        let s = Math.sin(angle);\r\n        let c = Math.cos(angle);\r\n\r\n        this.x -= vec.x;\r\n        this.y -= vec.y;\r\n\r\n        let x = this.x * c - this.y * s;\r\n        let y = this.x * s + this.y * c;\r\n\r\n        this.x = x + vec.x;\r\n        this.y = y + vec.y;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotate a vector around a given center to the same angle as another vector (so that the two vectors and the center are in a line, with both vectors on one side of the center), keeps the distance from this vector to the center.\r\n     *\r\n     * @param {Vector2} vec The vector to rotate this vector to.\r\n     * @param {Vector2} center The rotational center.\r\n     * @param {Number} [offsetAngle=0.0] An additional amount of radians to rotate the vector.\r\n     * @returns {Vector2} Returns itself.\r\n     */\r\n    rotateTo(vec, center, offsetAngle = 0.0) {\r\n        // Problem if this is first position\r\n        this.x += 0.001;\r\n        this.y -= 0.001;\r\n\r\n        let a = Vector2.subtract(this, center);\r\n        let b = Vector2.subtract(vec, center);\r\n        let angle = Vector2.angle(b, a);\r\n\r\n        this.rotateAround(angle + offsetAngle, center);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotates the vector away from a specified vector around a center.\r\n     * \r\n     * @param {Vector2} vec The vector this one is rotated away from.\r\n     * @param {Vector2} center The rotational center.\r\n     * @param {Number} angle The angle by which to rotate.\r\n     */\r\n    rotateAwayFrom(vec, center, angle) {\r\n        this.rotateAround(angle, center);\r\n        \r\n        let distSqA = this.distanceSq(vec);\r\n        \r\n        this.rotateAround(-2.0 * angle, center);\r\n\r\n        let distSqB = this.distanceSq(vec);\r\n\r\n        // If it was rotated towards the other vertex, rotate in other direction by same amount.\r\n        if (distSqB < distSqA) {\r\n            this.rotateAround(2.0 * angle, center);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the angle in radians used to rotate this vector away from a given vector.\r\n     * \r\n     * @param {Vector2} vec The vector this one is rotated away from.\r\n     * @param {Vector2} center The rotational center.\r\n     * @param {Number} angle The angle by which to rotate.\r\n     * @returns {Number} The angle in radians.\r\n     */\r\n    getRotateAwayFromAngle(vec, center, angle) {\r\n        let tmp = this.clone();\r\n\r\n        tmp.rotateAround(angle, center);\r\n        \r\n        let distSqA = tmp.distanceSq(vec);\r\n        \r\n        tmp.rotateAround(-2.0 * angle, center);\r\n\r\n        let distSqB = tmp.distanceSq(vec);\r\n\r\n        if (distSqB < distSqA) {\r\n            return angle;\r\n        } else {\r\n            return -angle;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the angle in radians used to rotate this vector towards a given vector.\r\n     * \r\n     * @param {Vector2} vec The vector this one is rotated towards to.\r\n     * @param {Vector2} center The rotational center.\r\n     * @param {Number} angle The angle by which to rotate.\r\n     * @returns {Number} The angle in radians.\r\n     */\r\n    getRotateTowardsAngle(vec, center, angle) {\r\n        let tmp = this.clone();\r\n\r\n        tmp.rotateAround(angle, center);\r\n        \r\n        let distSqA = tmp.distanceSq(vec);\r\n        \r\n        tmp.rotateAround(-2.0 * angle, center);\r\n\r\n        let distSqB = tmp.distanceSq(vec);\r\n\r\n        if (distSqB > distSqA) {\r\n            return angle;\r\n        } else {\r\n            return -angle;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the angles between this vector and another vector around a common center of rotation.\r\n     *\r\n     * @param {Vector2} vec Another vector.\r\n     * @param {Vector2} center The center of rotation.\r\n     * @returns {Number} The angle between this vector and another vector around a center of rotation in radians.\r\n     */\r\n    getRotateToAngle(vec, center) {\r\n        let a = Vector2.subtract(this, center);\r\n        let b = Vector2.subtract(vec, center);\r\n        let angle = Vector2.angle(b, a);\r\n        \r\n        return Number.isNaN(angle) ? 0.0 : angle;\r\n    }\r\n\r\n    /**\r\n     * Checks whether a vector lies within a polygon spanned by a set of vectors.\r\n     *\r\n     * @param {Vector2[]} polygon An array of vectors spanning the polygon.\r\n     * @returns {Boolean} A boolean indicating whether or not this vector is within a polygon.\r\n     */\r\n    isInPolygon(polygon) {\r\n        let inside = false;\r\n\r\n        // Its not always a given, that the polygon is convex (-> sugars)\r\n        for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\r\n            if (((polygon[i].y > this.y) != (polygon[j].y > this.y)) &&\r\n                (this.x < (polygon[j].x - polygon[i].x) * (this.y - polygon[i].y) /\r\n                (polygon[j].y - polygon[i].y) + polygon[i].x)) {\r\n                inside = !inside;\r\n            }\r\n        }\r\n\r\n\r\n        return inside;\r\n    }\r\n\r\n    /**\r\n     * Returns the length of this vector.\r\n     *\r\n     * @returns {Number} The length of this vector.\r\n     */\r\n    length() {\r\n        return Math.sqrt((this.x * this.x) + (this.y * this.y));\r\n    }\r\n\r\n    /**\r\n     * Returns the square of the length of this vector.\r\n     *\r\n     * @returns {Number} The square of the length of this vector.\r\n     */\r\n    lengthSq() {\r\n        return (this.x * this.x) + (this.y * this.y);\r\n    }\r\n\r\n    /**\r\n     * Normalizes this vector.\r\n     *\r\n     * @returns {Vector2} Returns itself.\r\n     */\r\n    normalize() {\r\n        this.divide(this.length());\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a normalized copy of this vector.\r\n     *\r\n     * @returns {Vector2} A normalized copy of this vector.\r\n     */\r\n    normalized() {\r\n        return Vector2.divideScalar(this, this.length());\r\n    }\r\n\r\n    /**\r\n     * Calculates which side of a line spanned by two vectors this vector is.\r\n     *\r\n     * @param {Vector2} vecA A vector.\r\n     * @param {Vector2} vecB A vector.\r\n     * @returns {Number} A number indicating the side of this vector, given a line spanned by two other vectors.\r\n     */\r\n    whichSide(vecA, vecB) {\r\n        return (this.x - vecA.x) * (vecB.y - vecA.y) - (this.y - vecA.y) * (vecB.x - vecA.x);\r\n    }\r\n\r\n    /**\r\n     * Checks whether or not this vector is on the same side of a line spanned by two vectors as another vector.\r\n     *\r\n     * @param {Vector2} vecA A vector spanning the line.\r\n     * @param {Vector2} vecB A vector spanning the line.\r\n     * @param {Vector2} vecC A vector to check whether or not it is on the same side as this vector.\r\n     * @returns {Boolean} Returns a boolean indicating whether or not this vector is on the same side as another vector.\r\n     */\r\n    sameSideAs(vecA, vecB, vecC) {\r\n        let d = this.whichSide(vecA, vecB);\r\n        let dRef = vecC.whichSide(vecA, vecB);\r\n\r\n        return d < 0 && dRef < 0 || d == 0 && dRef == 0 || d > 0 && dRef > 0;\r\n    }\r\n\r\n    /**\r\n     * Adds two vectors and returns the result as a new vector.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA A summand.\r\n     * @param {Vector2} vecB A summand.\r\n     * @returns {Vector2} Returns the sum of two vectors.\r\n     */\r\n    static add(vecA, vecB) {\r\n        return new Vector2(vecA.x + vecB.x, vecA.y + vecB.y);\r\n    }\r\n\r\n    /**\r\n     * Subtracts one vector from another and returns the result as a new vector.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA The minuend.\r\n     * @param {Vector2} vecB The subtrahend.\r\n     * @returns {Vector2} Returns the difference of two vectors.\r\n     */\r\n    static subtract(vecA, vecB) {\r\n        return new Vector2(vecA.x - vecB.x, vecA.y - vecB.y);\r\n    }\r\n\r\n    /**\r\n     * Multiplies two vectors (value by value) and returns the result.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA A vector.\r\n     * @param {Vector2} vecB A vector.\r\n     * @returns {Vector2} Returns the product of two vectors.\r\n     */\r\n    static multiply(vecA, vecB) {\r\n        return new Vector2(vecA.x * vecB.x, vecA.y * vecB.y);\r\n    }\r\n\r\n    /**\r\n     * Multiplies two vectors (value by value) and returns the result.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vec A vector.\r\n     * @param {Number} scalar A scalar.\r\n     * @returns {Vector2} Returns the product of two vectors.\r\n     */\r\n    static multiplyScalar(vec, scalar) {\r\n        return new Vector2(vec.x, vec.y).multiplyScalar(scalar);\r\n    }\r\n\r\n    /**\r\n     * Returns the midpoint of a line spanned by two vectors.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA A vector spanning the line.\r\n     * @param {Vector2} vecB A vector spanning the line.\r\n     * @returns {Vector2} The midpoint of the line spanned by two vectors.\r\n     */\r\n    static midpoint(vecA, vecB) {\r\n        return new Vector2((vecA.x + vecB.x) / 2, (vecA.y + vecB.y) / 2);\r\n    }\r\n\r\n    /**\r\n     * Returns the normals of a line spanned by two vectors.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA A vector spanning the line.\r\n     * @param {Vector2} vecB A vector spanning the line.\r\n     * @returns {Vector2[]} An array containing the two normals, each represented by a vector.\r\n     */\r\n    static normals(vecA, vecB) {\r\n        let delta = Vector2.subtract(vecB, vecA);\r\n\r\n        return [\r\n            new Vector2(-delta.y, delta.x),\r\n            new Vector2(delta.y, -delta.x)\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Returns the unit (normalized normal) vectors of a line spanned by two vectors.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA A vector spanning the line.\r\n     * @param {Vector2} vecB A vector spanning the line.\r\n     * @returns {Vector2[]} An array containing the two unit vectors.\r\n     */\r\n    static units(vecA, vecB) {\r\n        let delta = Vector2.subtract(vecB, vecA);\r\n\r\n        return [\r\n            (new Vector2(-delta.y, delta.x)).normalize(),\r\n            (new Vector2(delta.y, -delta.x)).normalize()\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Divides a vector by another vector and returns the result as new vector.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA The dividend.\r\n     * @param {Vector2} vecB The divisor.\r\n     * @returns {Vector2} The fraction of the two vectors.\r\n     */\r\n    static divide(vecA, vecB) {\r\n      return new Vector2(vecA.x / vecB.x, vecA.y / vecB.y);\r\n    }\r\n\r\n    /**\r\n     * Divides a vector by a scalar and returns the result as new vector.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA The dividend.\r\n     * @param {Number} s The scalar.\r\n     * @returns {Vector2} The fraction of the two vectors.\r\n     */\r\n    static divideScalar(vecA, s) {\r\n        return new Vector2(vecA.x / s, vecA.y / s);\r\n    }\r\n\r\n    /**\r\n     * Returns the dot product of two vectors.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA A vector.\r\n     * @param {Vector2} vecB A vector.\r\n     * @returns {Number} The dot product of two vectors.\r\n     */\r\n    static dot(vecA, vecB) {\r\n        return vecA.x * vecB.x + vecA.y * vecB.y;\r\n    }\r\n\r\n    /**\r\n     * Returns the angle between two vectors.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA A vector.\r\n     * @param {Vector2} vecB A vector.\r\n     * @returns {Number} The angle between two vectors in radians.\r\n     */\r\n    static angle(vecA, vecB) {\r\n        let dot = Vector2.dot(vecA, vecB);\r\n\r\n        return Math.acos(dot / (vecA.length() * vecB.length()));\r\n    }\r\n\r\n    /**\r\n     * Returns the angle between two vectors based on a third vector in between.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA A vector.\r\n     * @param {Vector2} vecB A (central) vector.\r\n     * @param {Vector2} vecC A vector.\r\n     * @returns {Number} The angle in radians.\r\n     */\r\n    static threePointangle(vecA, vecB, vecC) {\r\n        let ab = Vector2.subtract(vecB, vecA);\r\n        let bc = Vector2.subtract(vecC, vecB);\r\n        let abLength = vecA.distance(vecB);\r\n        let bcLength = vecB.distance(vecC);\r\n\r\n        return Math.acos(Vector2.dot(ab, bc) / (abLength * bcLength));\r\n    }\r\n    \r\n    /**\r\n     * Returns the scalar projection of a vector on another vector.\r\n     *\r\n     * @static\r\n     * @param {Vector2} vecA The vector to be projected.\r\n     * @param {Vector2} vecB The vector to be projection upon.\r\n     * @returns {Number} The scalar component.\r\n     */\r\n    static scalarProjection(vecA, vecB) {\r\n        let unit = vecB.normalized();\r\n        \r\n        return Vector2.dot(vecA, unit);\r\n    }\r\n\r\n     /**\r\n     * Returns the average vector (normalized) of the input vectors.\r\n     *\r\n     * @static\r\n     * @param {Array} vecs An array containing vectors.\r\n     * @returns {Vector2} The resulting vector (normalized).\r\n     */\r\n    static averageDirection(vecs) {\r\n        let avg = new Vector2(0.0, 0.0);\r\n\r\n        for (var i = 0; i < vecs.length; i++) {\r\n          let vec = vecs[i];\r\n          avg.add(vec);\r\n        }\r\n\r\n        return avg.normalize();\r\n    }\r\n}\r\n\r\nmodule.exports = Vector2;"]},"metadata":{},"sourceType":"script"}