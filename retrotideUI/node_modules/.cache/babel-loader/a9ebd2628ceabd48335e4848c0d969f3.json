{"ast":null,"code":"/** \r\n * A static class containing helper functions for math-related tasks. \r\n */\nclass MathHelper {\n  /**\r\n   * Rounds a value to a given number of decimals.\r\n   *\r\n   * @static\r\n   * @param {Number} value A number.\r\n   * @param {Number} decimals The number of decimals.\r\n   * @returns {Number} A number rounded to a given number of decimals.\r\n   */\n  static round(value, decimals) {\n    decimals = decimals ? decimals : 1;\n    return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);\n  }\n  /**\r\n   * Returns the means of the angles contained in an array. In radians.\r\n   *\r\n   * @static\r\n   * @param {Number[]} arr An array containing angles (in radians).\r\n   * @returns {Number} The mean angle in radians.\r\n   */\n\n\n  static meanAngle(arr) {\n    let sin = 0.0;\n    let cos = 0.0;\n\n    for (var i = 0; i < arr.length; i++) {\n      sin += Math.sin(arr[i]);\n      cos += Math.cos(arr[i]);\n    }\n\n    return Math.atan2(sin / arr.length, cos / arr.length);\n  }\n  /**\r\n   * Returns the inner angle of a n-sided regular polygon.\r\n   *\r\n   * @static\r\n   * @param {Number} n Number of sides of a regular polygon.\r\n   * @returns {Number} The inner angle of a given regular polygon.\r\n   */\n\n\n  static innerAngle(n) {\n    return MathHelper.toRad((n - 2) * 180 / n);\n  }\n  /**\r\n   * Returns the circumradius of a n-sided regular polygon with a given side-length.\r\n   *\r\n   * @static\r\n   * @param {Number} s The side length of the regular polygon.\r\n   * @param {Number} n The number of sides.\r\n   * @returns {Number} The circumradius of the regular polygon.\r\n   */\n\n\n  static polyCircumradius(s, n) {\n    return s / (2 * Math.sin(Math.PI / n));\n  }\n  /**\r\n   * Returns the apothem of a regular n-sided polygon based on its radius.\r\n   *\r\n   * @static\r\n   * @param {Number} r The radius.\r\n   * @param {Number} n The number of edges of the regular polygon.\r\n   * @returns {Number} The apothem of a n-sided polygon based on its radius.\r\n   */\n\n\n  static apothem(r, n) {\n    return r * Math.cos(Math.PI / n);\n  }\n\n  static apothemFromSideLength(s, n) {\n    let r = MathHelper.polyCircumradius(s, n);\n    return MathHelper.apothem(r, n);\n  }\n  /**\r\n   * The central angle of a n-sided regular polygon. In radians.\r\n   *\r\n   * @static\r\n   * @param {Number} n The number of sides of the regular polygon.\r\n   * @returns {Number} The central angle of the n-sided polygon in radians.\r\n   */\n\n\n  static centralAngle(n) {\n    return MathHelper.toRad(360 / n);\n  }\n  /**\r\n   * Convertes radians to degrees.\r\n   *\r\n   * @static\r\n   * @param {Number} rad An angle in radians.\r\n   * @returns {Number} The angle in degrees.\r\n   */\n\n\n  static toDeg(rad) {\n    return rad * MathHelper.degFactor;\n  }\n  /**\r\n   * Converts degrees to radians.\r\n   *\r\n   * @static\r\n   * @param {Number} deg An angle in degrees.\r\n   * @returns {Number} The angle in radians.\r\n   */\n\n\n  static toRad(deg) {\n    return deg * MathHelper.radFactor;\n  }\n  /**\r\n   * Returns the parity of the permutation (1 or -1)\r\n   * @param {(Array|Uint8Array)} arr An array containing the permutation.\r\n   * @returns {Number} The parity of the permutation (1 or -1), where 1 means even and -1 means odd.\r\n   */\n\n\n  static parityOfPermutation(arr) {\n    let visited = new Uint8Array(arr.length);\n    let evenLengthCycleCount = 0;\n\n    let traverseCycle = function (i, cycleLength = 0) {\n      if (visited[i] === 1) {\n        return cycleLength;\n      }\n\n      cycleLength++;\n      visited[i] = 1;\n      return traverseCycle(arr[i], cycleLength);\n    };\n\n    for (var i = 0; i < arr.length; i++) {\n      if (visited[i] === 1) {\n        continue;\n      }\n\n      let cycleLength = traverseCycle(i);\n      evenLengthCycleCount += 1 - cycleLength % 2;\n    }\n\n    return evenLengthCycleCount % 2 ? -1 : 1;\n  }\n  /** The factor to convert degrees to radians. */\n\n\n  static get radFactor() {\n    return Math.PI / 180.0;\n  }\n  /** The factor to convert radians to degrees. */\n\n\n  static get degFactor() {\n    return 180.0 / Math.PI;\n  }\n  /** Two times PI. */\n\n\n  static get twoPI() {\n    return 2.0 * Math.PI;\n  }\n\n}\n\nmodule.exports = MathHelper;","map":{"version":3,"sources":["/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/smiles-drawer/src/MathHelper.js"],"names":["MathHelper","round","value","decimals","Number","Math","meanAngle","arr","sin","cos","i","length","atan2","innerAngle","n","toRad","polyCircumradius","s","PI","apothem","r","apothemFromSideLength","centralAngle","toDeg","rad","degFactor","deg","radFactor","parityOfPermutation","visited","Uint8Array","evenLengthCycleCount","traverseCycle","cycleLength","twoPI","module","exports"],"mappings":"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","sourcesContent":["/** \r\n * A static class containing helper functions for math-related tasks. \r\n */\r\nclass MathHelper {\r\n    /**\r\n     * Rounds a value to a given number of decimals.\r\n     *\r\n     * @static\r\n     * @param {Number} value A number.\r\n     * @param {Number} decimals The number of decimals.\r\n     * @returns {Number} A number rounded to a given number of decimals.\r\n     */\r\n    static round(value, decimals) {\r\n        decimals = decimals ? decimals : 1;\r\n        return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);\r\n    }\r\n\r\n    /**\r\n     * Returns the means of the angles contained in an array. In radians.\r\n     *\r\n     * @static\r\n     * @param {Number[]} arr An array containing angles (in radians).\r\n     * @returns {Number} The mean angle in radians.\r\n     */\r\n    static meanAngle(arr) {\r\n        let sin = 0.0;\r\n        let cos = 0.0;\r\n        \r\n        for (var i = 0; i < arr.length; i++) {\r\n            sin += Math.sin(arr[i]);\r\n            cos += Math.cos(arr[i]);\r\n        }\r\n\r\n        return Math.atan2(sin / arr.length, cos / arr.length);\r\n    }\r\n\r\n    /**\r\n     * Returns the inner angle of a n-sided regular polygon.\r\n     *\r\n     * @static\r\n     * @param {Number} n Number of sides of a regular polygon.\r\n     * @returns {Number} The inner angle of a given regular polygon.\r\n     */\r\n    static innerAngle(n) {\r\n        return MathHelper.toRad((n - 2) * 180 / n);\r\n    }\r\n\r\n    /**\r\n     * Returns the circumradius of a n-sided regular polygon with a given side-length.\r\n     *\r\n     * @static\r\n     * @param {Number} s The side length of the regular polygon.\r\n     * @param {Number} n The number of sides.\r\n     * @returns {Number} The circumradius of the regular polygon.\r\n     */\r\n    static polyCircumradius(s, n) {\r\n        return s / (2 * Math.sin(Math.PI / n));\r\n    }\r\n\r\n    /**\r\n     * Returns the apothem of a regular n-sided polygon based on its radius.\r\n     *\r\n     * @static\r\n     * @param {Number} r The radius.\r\n     * @param {Number} n The number of edges of the regular polygon.\r\n     * @returns {Number} The apothem of a n-sided polygon based on its radius.\r\n     */\r\n    static apothem(r, n) {\r\n        return r * Math.cos(Math.PI / n);\r\n    }\r\n\r\n    static apothemFromSideLength(s, n) {\r\n        let r = MathHelper.polyCircumradius(s, n);\r\n        \r\n        return MathHelper.apothem(r, n);\r\n    }\r\n\r\n    /**\r\n     * The central angle of a n-sided regular polygon. In radians.\r\n     *\r\n     * @static\r\n     * @param {Number} n The number of sides of the regular polygon.\r\n     * @returns {Number} The central angle of the n-sided polygon in radians.\r\n     */\r\n    static centralAngle(n) {\r\n        return MathHelper.toRad(360 / n);\r\n    }\r\n\r\n    /**\r\n     * Convertes radians to degrees.\r\n     *\r\n     * @static\r\n     * @param {Number} rad An angle in radians.\r\n     * @returns {Number} The angle in degrees.\r\n     */\r\n    static toDeg(rad) {\r\n        return rad * MathHelper.degFactor;\r\n    }\r\n\r\n    /**\r\n     * Converts degrees to radians.\r\n     *\r\n     * @static\r\n     * @param {Number} deg An angle in degrees.\r\n     * @returns {Number} The angle in radians.\r\n     */\r\n    static toRad(deg) {\r\n        return deg * MathHelper.radFactor;\r\n    }\r\n\r\n    /**\r\n     * Returns the parity of the permutation (1 or -1)\r\n     * @param {(Array|Uint8Array)} arr An array containing the permutation.\r\n     * @returns {Number} The parity of the permutation (1 or -1), where 1 means even and -1 means odd.\r\n     */\r\n    static parityOfPermutation(arr) {\r\n        let visited = new Uint8Array(arr.length);\r\n        let evenLengthCycleCount = 0;\r\n\r\n        let traverseCycle = function(i, cycleLength = 0) {\r\n            if (visited[i] === 1) {\r\n                return cycleLength;\r\n            }\r\n\r\n            cycleLength++;\r\n\r\n            visited[i] = 1;\r\n            return traverseCycle(arr[i], cycleLength);\r\n        }\r\n\r\n        for (var i = 0; i < arr.length; i++) {\r\n            if (visited[i] === 1) {\r\n                continue;\r\n            }\r\n\r\n            let cycleLength = traverseCycle(i);\r\n            evenLengthCycleCount += (1 - cycleLength % 2);\r\n        }\r\n\r\n        return evenLengthCycleCount % 2 ? -1 : 1;\r\n    }\r\n\r\n    /** The factor to convert degrees to radians. */\r\n    static get radFactor() {\r\n      return Math.PI / 180.0;\r\n    }\r\n\r\n    /** The factor to convert radians to degrees. */\r\n    static get degFactor() {\r\n      return 180.0 / Math.PI;\r\n    }\r\n\r\n    /** Two times PI. */\r\n    static get twoPI() {\r\n      return 2.0 * Math.PI;\r\n    }\r\n}\r\n\r\nmodule.exports = MathHelper;"]},"metadata":{},"sourceType":"script"}