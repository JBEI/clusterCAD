{"ast":null,"code":"//@ts-check\nconst Drawer = require('./src/Drawer');\n\nconst Parser = require('./src/Parser');\n\nconst SvgDrawer = require('./src/SvgDrawer'); // Detect SSR (server side rendering)\n\n\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n/**\r\n * The SmilesDrawer namespace.\r\n * @typicalname SmilesDrawer\r\n */\n\nvar SmilesDrawer = {\n  Version: '1.0.0'\n};\nSmilesDrawer.Drawer = Drawer;\nSmilesDrawer.Parser = Parser;\nSmilesDrawer.SvgDrawer = SvgDrawer;\n/**\r\n* Cleans a SMILES string (removes non-valid characters)\r\n*\r\n* @static\r\n* @param {String} smiles A SMILES string.\r\n* @returns {String} The clean SMILES string.\r\n*/\n\nSmilesDrawer.clean = function (smiles) {\n  return smiles.replace(/[^A-Za-z0-9@\\.\\+\\-\\?!\\(\\)\\[\\]\\{\\}/\\\\=#\\$:\\*]/g, '');\n};\n/**\r\n* Applies the smiles drawer draw function to each canvas element that has a smiles string in the data-smiles attribute.\r\n*\r\n* @static\r\n* @param {Object} options SmilesDrawer options.\r\n* @param {String} [selector='canvas[data-smiles]'] Selectors for the draw areas (canvas elements).\r\n* @param {String} [themeName='light'] The theme to apply.\r\n* @param {Function} [onError='null'] A callback function providing an error object.\r\n*/\n\n\nSmilesDrawer.apply = function (options, selector = 'canvas[data-smiles]', themeName = 'light', onError = null) {\n  let smilesDrawer = new Drawer(options);\n  let elements = document.querySelectorAll(selector);\n\n  for (var i = 0; i < elements.length; i++) {\n    let element = elements[i];\n    SmilesDrawer.parse(element.getAttribute('data-smiles'), function (tree) {\n      smilesDrawer.draw(tree, element, themeName, false);\n    }, function (err) {\n      if (onError) {\n        onError(err);\n      }\n    });\n  }\n};\n/**\r\n* Parses the entered smiles string.\r\n* \r\n* @static\r\n* @param {String} smiles A SMILES string.\r\n* @param {Function} successCallback A callback that is called on success with the parse tree.\r\n* @param {Function} errorCallback A callback that is called with the error object on error.\r\n*/\n\n\nSmilesDrawer.parse = function (smiles, successCallback, errorCallback) {\n  try {\n    if (successCallback) {\n      successCallback(Parser.parse(smiles));\n    }\n  } catch (err) {\n    if (errorCallback) {\n      errorCallback(err);\n    }\n  }\n};\n\nif (canUseDOM) {\n  window.SmilesDrawer = SmilesDrawer;\n} // There be dragons (polyfills)\n\n\nif (!Array.prototype.fill) {\n  Object.defineProperty(Array.prototype, 'fill', {\n    value: function (value) {\n      // Steps 1-2.\n      if (this == null) {\n        throw new TypeError('this is null or not defined');\n      }\n\n      var O = Object(this); // Steps 3-5.\n\n      var len = O.length >>> 0; // Steps 6-7.\n\n      var start = arguments[1];\n      var relativeStart = start >> 0; // Step 8.\n\n      var k = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len); // Steps 9-10.\n\n      var end = arguments[2];\n      var relativeEnd = end === undefined ? len : end >> 0; // Step 11.\n\n      var final = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len); // Step 12.\n\n      while (k < final) {\n        O[k] = value;\n        k++;\n      } // Step 13.\n\n\n      return O;\n    }\n  });\n}\n\nmodule.exports = SmilesDrawer;","map":{"version":3,"sources":["/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/smiles-drawer/app.js"],"names":["Drawer","require","Parser","SvgDrawer","canUseDOM","window","document","createElement","SmilesDrawer","Version","clean","smiles","replace","apply","options","selector","themeName","onError","smilesDrawer","elements","querySelectorAll","i","length","element","parse","getAttribute","tree","draw","err","successCallback","errorCallback","Array","prototype","fill","Object","defineProperty","value","TypeError","O","len","start","arguments","relativeStart","k","Math","max","min","end","relativeEnd","undefined","final","module","exports"],"mappings":"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","sourcesContent":["//@ts-check\r\nconst Drawer = require('./src/Drawer')\r\nconst Parser = require('./src/Parser')\r\nconst SvgDrawer = require('./src/SvgDrawer')\r\n\r\n\r\n// Detect SSR (server side rendering)\r\nvar canUseDOM = !!(\r\n  (typeof window !== 'undefined' &&\r\n  window.document && window.document.createElement)\r\n);\r\n\r\n/**\r\n * The SmilesDrawer namespace.\r\n * @typicalname SmilesDrawer\r\n */\r\nvar SmilesDrawer = {\r\n  Version: '1.0.0'\r\n};\r\n\r\nSmilesDrawer.Drawer = Drawer;\r\nSmilesDrawer.Parser = Parser;\r\nSmilesDrawer.SvgDrawer = SvgDrawer;\r\n\r\n/**\r\n* Cleans a SMILES string (removes non-valid characters)\r\n*\r\n* @static\r\n* @param {String} smiles A SMILES string.\r\n* @returns {String} The clean SMILES string.\r\n*/\r\nSmilesDrawer.clean = function(smiles) {\r\n  return smiles.replace(/[^A-Za-z0-9@\\.\\+\\-\\?!\\(\\)\\[\\]\\{\\}/\\\\=#\\$:\\*]/g,'');\r\n}\r\n\r\n/**\r\n* Applies the smiles drawer draw function to each canvas element that has a smiles string in the data-smiles attribute.\r\n*\r\n* @static\r\n* @param {Object} options SmilesDrawer options.\r\n* @param {String} [selector='canvas[data-smiles]'] Selectors for the draw areas (canvas elements).\r\n* @param {String} [themeName='light'] The theme to apply.\r\n* @param {Function} [onError='null'] A callback function providing an error object.\r\n*/\r\nSmilesDrawer.apply = function(options, selector='canvas[data-smiles]', themeName='light', onError=null) {\r\n  let smilesDrawer = new Drawer(options);\r\n  let elements = document.querySelectorAll(selector);\r\n\r\n  for (var i = 0; i < elements.length; i++) {\r\n      let element = elements[i];\r\n\r\n      SmilesDrawer.parse(element.getAttribute('data-smiles'), function(tree) {\r\n          smilesDrawer.draw(tree, element, themeName, false);\r\n      }, function(err) {\r\n        if (onError) {\r\n          onError(err);\r\n        }\r\n      });\r\n  }\r\n}\r\n\r\n/**\r\n* Parses the entered smiles string.\r\n* \r\n* @static\r\n* @param {String} smiles A SMILES string.\r\n* @param {Function} successCallback A callback that is called on success with the parse tree.\r\n* @param {Function} errorCallback A callback that is called with the error object on error.\r\n*/\r\nSmilesDrawer.parse = function(smiles, successCallback, errorCallback) {\r\n  try {\r\n      if (successCallback) {\r\n          successCallback(Parser.parse(smiles));\r\n      }\r\n  } catch (err) {\r\n      if (errorCallback) {\r\n          errorCallback(err);\r\n      }\r\n  }\r\n}\r\n\r\nif (canUseDOM) {\r\n  window.SmilesDrawer = SmilesDrawer;\r\n}\r\n\r\n// There be dragons (polyfills)\r\n\r\nif (!Array.prototype.fill) {\r\nObject.defineProperty(Array.prototype, 'fill', {\r\n  value: function(value) {\r\n\r\n    // Steps 1-2.\r\n    if (this == null) {\r\n      throw new TypeError('this is null or not defined');\r\n    }\r\n\r\n    var O = Object(this);\r\n\r\n    // Steps 3-5.\r\n    var len = O.length >>> 0;\r\n\r\n    // Steps 6-7.\r\n    var start = arguments[1];\r\n    var relativeStart = start >> 0;\r\n\r\n    // Step 8.\r\n    var k = relativeStart < 0 ?\r\n      Math.max(len + relativeStart, 0) :\r\n      Math.min(relativeStart, len);\r\n\r\n    // Steps 9-10.\r\n    var end = arguments[2];\r\n    var relativeEnd = end === undefined ?\r\n      len : end >> 0;\r\n\r\n    // Step 11.\r\n    var final = relativeEnd < 0 ?\r\n      Math.max(len + relativeEnd, 0) :\r\n      Math.min(relativeEnd, len);\r\n\r\n    // Step 12.\r\n    while (k < final) {\r\n      O[k] = value;\r\n      k++;\r\n    }\r\n\r\n    // Step 13.\r\n    return O;\r\n  }\r\n});\r\n}\r\n\r\nmodule.exports = SmilesDrawer;"]},"metadata":{},"sourceType":"script"}