{"ast":null,"code":"var _createForOfIteratorHelper = require(\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _toConsumableArray = require(\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n//@ts-check\nvar MathHelper = require('./MathHelper');\n\nvar ArrayHelper = require('./ArrayHelper');\n\nvar Vector2 = require('./Vector2');\n\nvar Line = require('./Line');\n\nvar Vertex = require('./Vertex');\n\nvar Edge = require('./Edge');\n\nvar Atom = require('./Atom');\n\nvar Ring = require('./Ring');\n\nvar RingConnection = require('./RingConnection');\n\nvar CanvasWrapper = require('./CanvasWrapper');\n\nvar Graph = require('./Graph');\n\nvar SSSR = require('./SSSR');\n\nvar ThemeManager = require('./ThemeManager');\n/** \n * The main class of the application representing the smiles drawer \n * \n * @property {Graph} graph The graph associated with this SmilesDrawer.Drawer instance.\n * @property {Number} ringIdCounter An internal counter to keep track of ring ids.\n * @property {Number} ringConnectionIdCounter An internal counter to keep track of ring connection ids.\n * @property {CanvasWrapper} canvasWrapper The CanvasWrapper associated with this SmilesDrawer.Drawer instance.\n * @property {Number} totalOverlapScore The current internal total overlap score.\n * @property {Object} defaultOptions The default options.\n * @property {Object} opts The merged options.\n * @property {Object} theme The current theme.\n */\n\n\nvar Drawer = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * The constructor for the class SmilesDrawer.\n   *\n   * @param {Object} options An object containing custom values for different options. It is merged with the default options.\n   */\n  function Drawer(options) {\n    _classCallCheck(this, Drawer);\n\n    this.graph = null;\n    this.doubleBondConfigCount = 0;\n    this.doubleBondConfig = null;\n    this.ringIdCounter = 0;\n    this.ringConnectionIdCounter = 0;\n    this.canvasWrapper = null;\n    this.totalOverlapScore = 0;\n    this.defaultOptions = {\n      width: 500,\n      height: 500,\n      bondThickness: 0.6,\n      bondLength: 15,\n      shortBondLength: 0.85,\n      bondSpacing: 0.18 * 15,\n      atomVisualization: 'default',\n      isomeric: true,\n      debug: false,\n      terminalCarbons: false,\n      explicitHydrogens: true,\n      overlapSensitivity: 0.42,\n      overlapResolutionIterations: 1,\n      compactDrawing: true,\n      fontSizeLarge: 5,\n      fontSizeSmall: 3,\n      padding: 20.0,\n      experimentalSSSR: false,\n      kkThreshold: 0.1,\n      kkInnerThreshold: 0.1,\n      kkMaxIteration: 20000,\n      kkMaxInnerIteration: 50,\n      kkMaxEnergy: 1e9,\n      themes: {\n        dark: {\n          C: '#fff',\n          O: '#e74c3c',\n          N: '#3498db',\n          F: '#27ae60',\n          CL: '#16a085',\n          BR: '#d35400',\n          I: '#8e44ad',\n          P: '#d35400',\n          S: '#f1c40f',\n          B: '#e67e22',\n          SI: '#e67e22',\n          H: '#fff',\n          BACKGROUND: '#141414'\n        },\n        light: {\n          C: '#222',\n          O: '#e74c3c',\n          N: '#3498db',\n          F: '#27ae60',\n          CL: '#16a085',\n          BR: '#d35400',\n          I: '#8e44ad',\n          P: '#d35400',\n          S: '#f1c40f',\n          B: '#e67e22',\n          SI: '#e67e22',\n          H: '#222',\n          BACKGROUND: '#fff'\n        }\n      }\n    };\n    this.opts = this.extend(true, this.defaultOptions, options);\n    this.opts.halfBondSpacing = this.opts.bondSpacing / 2.0;\n    this.opts.bondLengthSq = this.opts.bondLength * this.opts.bondLength;\n    this.opts.halfFontSizeLarge = this.opts.fontSizeLarge / 2.0;\n    this.opts.quarterFontSizeLarge = this.opts.fontSizeLarge / 4.0;\n    this.opts.fifthFontSizeSmall = this.opts.fontSizeSmall / 5.0; // Set the default theme.\n\n    this.theme = this.opts.themes.dark;\n  }\n  /**\n   * A helper method to extend the default options with user supplied ones.\n   */\n\n\n  _createClass(Drawer, [{\n    key: \"extend\",\n    value: function extend() {\n      var that = this;\n      var extended = {};\n      var deep = false;\n      var i = 0;\n      var length = arguments.length;\n\n      if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {\n        deep = arguments[0];\n        i++;\n      }\n\n      var merge = function merge(obj) {\n        for (var prop in obj) {\n          if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n            if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\n              extended[prop] = that.extend(true, extended[prop], obj[prop]);\n            } else {\n              extended[prop] = obj[prop];\n            }\n          }\n        }\n      };\n\n      for (; i < length; i++) {\n        var obj = arguments[i];\n        merge(obj);\n      }\n\n      return extended;\n    }\n  }, {\n    key: \"draw\",\n    value:\n    /**\n     * Draws the parsed smiles data to a canvas element.\n     *\n     * @param {Object} data The tree returned by the smiles parser.\n     * @param {(String|HTMLElement)} target The id of the HTML canvas element the structure is drawn to - or the element itself.\n     * @param {String} themeName='dark' The name of the theme to use. Built-in themes are 'light' and 'dark'.\n     * @param {Boolean} infoOnly=false Only output info on the molecule without drawing anything to the canvas.\n     */\n    function draw(data, target) {\n      var themeName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'light';\n      var infoOnly = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      this.initDraw(data, themeName, infoOnly);\n\n      if (!this.infoOnly) {\n        this.themeManager = new ThemeManager(this.opts.themes, themeName);\n        this.canvasWrapper = new CanvasWrapper(target, this.themeManager, this.opts);\n      }\n\n      if (!infoOnly) {\n        this.processGraph(); // Set the canvas to the appropriate size\n\n        this.canvasWrapper.scale(this.graph.vertices); // Do the actual drawing\n\n        this.drawEdges(this.opts.debug);\n        this.drawVertices(this.opts.debug);\n        this.canvasWrapper.reset();\n\n        if (this.opts.debug) {\n          console.log(this.graph);\n          console.log(this.rings);\n          console.log(this.ringConnections);\n        }\n      }\n    }\n    /**\n     * Returns the number of rings this edge is a part of.\n     *\n     * @param {Number} edgeId The id of an edge.\n     * @returns {Number} The number of rings the provided edge is part of.\n     */\n\n  }, {\n    key: \"edgeRingCount\",\n    value: function edgeRingCount(edgeId) {\n      var edge = this.graph.edges[edgeId];\n      var a = this.graph.vertices[edge.sourceId];\n      var b = this.graph.vertices[edge.targetId];\n      return Math.min(a.value.rings.length, b.value.rings.length);\n    }\n    /**\n     * Returns an array containing the bridged rings associated with this  molecule.\n     *\n     * @returns {Ring[]} An array containing all bridged rings associated with this molecule.\n     */\n\n  }, {\n    key: \"getBridgedRings\",\n    value: function getBridgedRings() {\n      var bridgedRings = Array();\n\n      for (var i = 0; i < this.rings.length; i++) {\n        if (this.rings[i].isBridged) {\n          bridgedRings.push(this.rings[i]);\n        }\n      }\n\n      return bridgedRings;\n    }\n    /**\n     * Returns an array containing all fused rings associated with this molecule.\n     *\n     * @returns {Ring[]} An array containing all fused rings associated with this molecule.\n     */\n\n  }, {\n    key: \"getFusedRings\",\n    value: function getFusedRings() {\n      var fusedRings = Array();\n\n      for (var i = 0; i < this.rings.length; i++) {\n        if (this.rings[i].isFused) {\n          fusedRings.push(this.rings[i]);\n        }\n      }\n\n      return fusedRings;\n    }\n    /**\n     * Returns an array containing all spiros associated with this molecule.\n     *\n     * @returns {Ring[]} An array containing all spiros associated with this molecule.\n     */\n\n  }, {\n    key: \"getSpiros\",\n    value: function getSpiros() {\n      var spiros = Array();\n\n      for (var i = 0; i < this.rings.length; i++) {\n        if (this.rings[i].isSpiro) {\n          spiros.push(this.rings[i]);\n        }\n      }\n\n      return spiros;\n    }\n    /**\n     * Returns a string containing a semicolon and new-line separated list of ring properties: Id; Members Count; Neighbours Count; IsSpiro; IsFused; IsBridged; Ring Count (subrings of bridged rings)\n     *\n     * @returns {String} A string as described in the method description.\n     */\n\n  }, {\n    key: \"printRingInfo\",\n    value: function printRingInfo() {\n      var result = '';\n\n      for (var i = 0; i < this.rings.length; i++) {\n        var ring = this.rings[i];\n        result += ring.id + ';';\n        result += ring.members.length + ';';\n        result += ring.neighbours.length + ';';\n        result += ring.isSpiro ? 'true;' : 'false;';\n        result += ring.isFused ? 'true;' : 'false;';\n        result += ring.isBridged ? 'true;' : 'false;';\n        result += ring.rings.length + ';';\n        result += '\\n';\n      }\n\n      return result;\n    }\n    /**\n     * Rotates the drawing to make the widest dimension horizontal.\n     */\n\n  }, {\n    key: \"rotateDrawing\",\n    value: function rotateDrawing() {\n      // Rotate the vertices to make the molecule align horizontally\n      // Find the longest distance\n      var a = 0;\n      var b = 0;\n      var maxDist = 0;\n\n      for (var i = 0; i < this.graph.vertices.length; i++) {\n        var vertexA = this.graph.vertices[i];\n\n        if (!vertexA.value.isDrawn) {\n          continue;\n        }\n\n        for (var j = i + 1; j < this.graph.vertices.length; j++) {\n          var vertexB = this.graph.vertices[j];\n\n          if (!vertexB.value.isDrawn) {\n            continue;\n          }\n\n          var dist = vertexA.position.distanceSq(vertexB.position);\n\n          if (dist > maxDist) {\n            maxDist = dist;\n            a = i;\n            b = j;\n          }\n        }\n      }\n\n      var angle = -Vector2.subtract(this.graph.vertices[a].position, this.graph.vertices[b].position).angle();\n\n      if (!isNaN(angle)) {\n        // Round to 30 degrees\n        var remainder = angle % 0.523599; // Round either up or down in 30 degree steps\n\n        if (remainder < 0.2617995) {\n          angle = angle - remainder;\n        } else {\n          angle += 0.523599 - remainder;\n        } // Finally, rotate everything\n\n\n        for (var i = 0; i < this.graph.vertices.length; i++) {\n          if (i === b) {\n            continue;\n          }\n\n          this.graph.vertices[i].position.rotateAround(angle, this.graph.vertices[b].position);\n        }\n\n        for (var i = 0; i < this.rings.length; i++) {\n          this.rings[i].center.rotateAround(angle, this.graph.vertices[b].position);\n        }\n      }\n    }\n    /**\n     * Returns the total overlap score of the current molecule.\n     *\n     * @returns {Number} The overlap score.\n     */\n\n  }, {\n    key: \"getTotalOverlapScore\",\n    value: function getTotalOverlapScore() {\n      return this.totalOverlapScore;\n    }\n    /**\n     * Returns the ring count of the current molecule.\n     *\n     * @returns {Number} The ring count.\n     */\n\n  }, {\n    key: \"getRingCount\",\n    value: function getRingCount() {\n      return this.rings.length;\n    }\n    /**\n     * Checks whether or not the current molecule  a bridged ring.\n     *\n     * @returns {Boolean} A boolean indicating whether or not the current molecule  a bridged ring.\n     */\n\n  }, {\n    key: \"hasBridgedRing\",\n    value: function hasBridgedRing() {\n      return this.bridgedRing;\n    }\n    /**\n     * Returns the number of heavy atoms (non-hydrogen) in the current molecule.\n     *\n     * @returns {Number} The heavy atom count.\n     */\n\n  }, {\n    key: \"getHeavyAtomCount\",\n    value: function getHeavyAtomCount() {\n      var hac = 0;\n\n      for (var i = 0; i < this.graph.vertices.length; i++) {\n        if (this.graph.vertices[i].value.element !== 'H') {\n          hac++;\n        }\n      }\n\n      return hac;\n    }\n    /**\n     * Returns the molecular formula of the loaded molecule as a string.\n     * \n     * @returns {String} The molecular formula.\n     */\n\n  }, {\n    key: \"getMolecularFormula\",\n    value: function getMolecularFormula() {\n      var molecularFormula = '';\n      var counts = new Map(); // Initialize element count\n\n      for (var i = 0; i < this.graph.vertices.length; i++) {\n        var atom = this.graph.vertices[i].value;\n\n        if (counts.has(atom.element)) {\n          counts.set(atom.element, counts.get(atom.element) + 1);\n        } else {\n          counts.set(atom.element, 1);\n        } // Hydrogens attached to a chiral center were added as vertices,\n        // those in non chiral brackets are added here\n\n\n        if (atom.bracket && !atom.bracket.chirality) {\n          if (counts.has('H')) {\n            counts.set('H', counts.get('H') + atom.bracket.hcount);\n          } else {\n            counts.set('H', atom.bracket.hcount);\n          }\n        } // Add the implicit hydrogens according to valency, exclude\n        // bracket atoms as they were handled and always have the number\n        // of hydrogens specified explicitly\n\n\n        if (!atom.bracket) {\n          var nHydrogens = Atom.maxBonds[atom.element] - atom.bondCount;\n\n          if (atom.isPartOfAromaticRing) {\n            nHydrogens--;\n          }\n\n          if (counts.has('H')) {\n            counts.set('H', counts.get('H') + nHydrogens);\n          } else {\n            counts.set('H', nHydrogens);\n          }\n        }\n      }\n\n      if (counts.has('C')) {\n        var count = counts.get('C');\n        molecularFormula += 'C' + (count > 1 ? count : '');\n        counts.delete('C');\n      }\n\n      if (counts.has('H')) {\n        var _count = counts.get('H');\n\n        molecularFormula += 'H' + (_count > 1 ? _count : '');\n        counts.delete('H');\n      }\n\n      var elements = Object.keys(Atom.atomicNumbers).sort();\n      elements.map(function (e) {\n        if (counts.has(e)) {\n          var _count2 = counts.get(e);\n\n          molecularFormula += e + (_count2 > 1 ? _count2 : '');\n        }\n      });\n      return molecularFormula;\n    }\n    /**\n     * Returns the type of the ringbond (e.g. '=' for a double bond). The ringbond represents the break in a ring introduced when creating the MST. If the two vertices supplied as arguments are not part of a common ringbond, the method returns null.\n     *\n     * @param {Vertex} vertexA A vertex.\n     * @param {Vertex} vertexB A vertex.\n     * @returns {(String|null)} Returns the ringbond type or null, if the two supplied vertices are not connected by a ringbond.\n     */\n\n  }, {\n    key: \"getRingbondType\",\n    value: function getRingbondType(vertexA, vertexB) {\n      // Checks whether the two vertices are the ones connecting the ring\n      // and what the bond type should be.\n      if (vertexA.value.getRingbondCount() < 1 || vertexB.value.getRingbondCount() < 1) {\n        return null;\n      }\n\n      for (var i = 0; i < vertexA.value.ringbonds.length; i++) {\n        for (var j = 0; j < vertexB.value.ringbonds.length; j++) {\n          // if(i != j) continue;\n          if (vertexA.value.ringbonds[i].id === vertexB.value.ringbonds[j].id) {\n            // If the bonds are equal, it doesn't matter which bond is returned.\n            // if they are not equal, return the one that is not the default (\"-\")\n            if (vertexA.value.ringbonds[i].bondType === '-') {\n              return vertexB.value.ringbonds[j].bond;\n            } else {\n              return vertexA.value.ringbonds[i].bond;\n            }\n          }\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"initDraw\",\n    value: function initDraw(data, themeName, infoOnly) {\n      this.data = data;\n      this.infoOnly = infoOnly;\n      this.ringIdCounter = 0;\n      this.ringConnectionIdCounter = 0;\n      this.graph = new Graph(data, this.opts.isomeric);\n      this.rings = Array();\n      this.ringConnections = Array();\n      this.originalRings = Array();\n      this.originalRingConnections = Array();\n      this.bridgedRing = false; // Reset those, in case the previous drawn SMILES had a dangling \\ or /\n\n      this.doubleBondConfigCount = null;\n      this.doubleBondConfig = null;\n      this.initRings();\n      this.initHydrogens();\n    }\n  }, {\n    key: \"processGraph\",\n    value: function processGraph() {\n      this.position(); // Restore the ring information (removes bridged rings and replaces them with the original, multiple, rings)\n\n      this.restoreRingInformation(); // Atoms bonded to the same ring atom\n\n      this.resolvePrimaryOverlaps();\n      var overlapScore = this.getOverlapScore();\n      this.totalOverlapScore = this.getOverlapScore().total;\n\n      for (var o = 0; o < this.opts.overlapResolutionIterations; o++) {\n        for (var i = 0; i < this.graph.edges.length; i++) {\n          var edge = this.graph.edges[i];\n\n          if (this.isEdgeRotatable(edge)) {\n            var subTreeDepthA = this.graph.getTreeDepth(edge.sourceId, edge.targetId);\n            var subTreeDepthB = this.graph.getTreeDepth(edge.targetId, edge.sourceId); // Only rotate the shorter subtree\n\n            var a = edge.targetId;\n            var b = edge.sourceId;\n\n            if (subTreeDepthA > subTreeDepthB) {\n              a = edge.sourceId;\n              b = edge.targetId;\n            }\n\n            var subTreeOverlap = this.getSubtreeOverlapScore(b, a, overlapScore.vertexScores);\n\n            if (subTreeOverlap.value > this.opts.overlapSensitivity) {\n              var vertexA = this.graph.vertices[a];\n              var vertexB = this.graph.vertices[b];\n              var neighboursB = vertexB.getNeighbours(a);\n\n              if (neighboursB.length === 1) {\n                var neighbour = this.graph.vertices[neighboursB[0]];\n                var angle = neighbour.position.getRotateAwayFromAngle(vertexA.position, vertexB.position, MathHelper.toRad(120));\n                this.rotateSubtree(neighbour.id, vertexB.id, angle, vertexB.position); // If the new overlap is bigger, undo change\n\n                var newTotalOverlapScore = this.getOverlapScore().total;\n\n                if (newTotalOverlapScore > this.totalOverlapScore) {\n                  this.rotateSubtree(neighbour.id, vertexB.id, -angle, vertexB.position);\n                } else {\n                  this.totalOverlapScore = newTotalOverlapScore;\n                }\n              } else if (neighboursB.length === 2) {\n                // Switch places / sides\n                // If vertex a is in a ring, do nothing\n                if (vertexB.value.rings.length !== 0 && vertexA.value.rings.length !== 0) {\n                  continue;\n                }\n\n                var neighbourA = this.graph.vertices[neighboursB[0]];\n                var neighbourB = this.graph.vertices[neighboursB[1]];\n\n                if (neighbourA.value.rings.length === 1 && neighbourB.value.rings.length === 1) {\n                  // Both neighbours in same ring. TODO: does this create problems with wedges? (up = down and vice versa?)\n                  if (neighbourA.value.rings[0] !== neighbourB.value.rings[0]) {\n                    continue;\n                  } // TODO: Rotate circle\n\n                } else if (neighbourA.value.rings.length !== 0 || neighbourB.value.rings.length !== 0) {\n                  continue;\n                } else {\n                  var angleA = neighbourA.position.getRotateAwayFromAngle(vertexA.position, vertexB.position, MathHelper.toRad(120));\n                  var angleB = neighbourB.position.getRotateAwayFromAngle(vertexA.position, vertexB.position, MathHelper.toRad(120));\n                  this.rotateSubtree(neighbourA.id, vertexB.id, angleA, vertexB.position);\n                  this.rotateSubtree(neighbourB.id, vertexB.id, angleB, vertexB.position);\n                  var _newTotalOverlapScore = this.getOverlapScore().total;\n\n                  if (_newTotalOverlapScore > this.totalOverlapScore) {\n                    this.rotateSubtree(neighbourA.id, vertexB.id, -angleA, vertexB.position);\n                    this.rotateSubtree(neighbourB.id, vertexB.id, -angleB, vertexB.position);\n                  } else {\n                    this.totalOverlapScore = _newTotalOverlapScore;\n                  }\n                }\n              }\n\n              overlapScore = this.getOverlapScore();\n            }\n          }\n        }\n      }\n\n      this.resolveSecondaryOverlaps(overlapScore.scores);\n\n      if (this.opts.isomeric) {\n        this.annotateStereochemistry();\n      } // Initialize pseudo elements or shortcuts\n\n\n      if (this.opts.compactDrawing && this.opts.atomVisualization === 'default') {\n        this.initPseudoElements();\n      }\n\n      this.rotateDrawing();\n    }\n    /**\n     * Initializes rings and ringbonds for the current molecule.\n     */\n\n  }, {\n    key: \"initRings\",\n    value: function initRings() {\n      var openBonds = new Map(); // Close the open ring bonds (spanning tree -> graph)\n\n      for (var i = this.graph.vertices.length - 1; i >= 0; i--) {\n        var vertex = this.graph.vertices[i];\n\n        if (vertex.value.ringbonds.length === 0) {\n          continue;\n        }\n\n        for (var j = 0; j < vertex.value.ringbonds.length; j++) {\n          var ringbondId = vertex.value.ringbonds[j].id;\n          var ringbondBond = vertex.value.ringbonds[j].bond; // If the other ringbond id has not been discovered,\n          // add it to the open bonds map and continue.\n          // if the other ringbond id has already been discovered,\n          // create a bond between the two atoms.\n\n          if (!openBonds.has(ringbondId)) {\n            openBonds.set(ringbondId, [vertex.id, ringbondBond]);\n          } else {\n            var sourceVertexId = vertex.id;\n            var targetVertexId = openBonds.get(ringbondId)[0];\n            var targetRingbondBond = openBonds.get(ringbondId)[1];\n            var edge = new Edge(sourceVertexId, targetVertexId, 1);\n            edge.setBondType(targetRingbondBond || ringbondBond || '-');\n            var edgeId = this.graph.addEdge(edge);\n            var targetVertex = this.graph.vertices[targetVertexId];\n            vertex.addRingbondChild(targetVertexId, j);\n            vertex.value.addNeighbouringElement(targetVertex.value.element);\n            targetVertex.addRingbondChild(sourceVertexId, j);\n            targetVertex.value.addNeighbouringElement(vertex.value.element);\n            vertex.edges.push(edgeId);\n            targetVertex.edges.push(edgeId);\n            openBonds.delete(ringbondId);\n          }\n        }\n      } // Get the rings in the graph (the SSSR)\n\n\n      var rings = SSSR.getRings(this.graph, this.opts.experimentalSSSR);\n\n      if (rings === null) {\n        return;\n      }\n\n      for (var i = 0; i < rings.length; i++) {\n        var ringVertices = _toConsumableArray(rings[i]);\n\n        var ringId = this.addRing(new Ring(ringVertices)); // Add the ring to the atoms\n\n        for (var j = 0; j < ringVertices.length; j++) {\n          this.graph.vertices[ringVertices[j]].value.rings.push(ringId);\n        }\n      } // Find connection between rings\n      // Check for common vertices and create ring connections. This is a bit\n      // ugly, but the ringcount is always fairly low (< 100)\n\n\n      for (var i = 0; i < this.rings.length - 1; i++) {\n        for (var j = i + 1; j < this.rings.length; j++) {\n          var a = this.rings[i];\n          var b = this.rings[j];\n          var ringConnection = new RingConnection(a, b); // If there are no vertices in the ring connection, then there\n          // is no ring connection\n\n          if (ringConnection.vertices.size > 0) {\n            this.addRingConnection(ringConnection);\n          }\n        }\n      } // Add neighbours to the rings\n\n\n      for (var i = 0; i < this.rings.length; i++) {\n        var ring = this.rings[i];\n        ring.neighbours = RingConnection.getNeighbours(this.ringConnections, ring.id);\n      } // Anchor the ring to one of it's members, so that the ring center will always\n      // be tied to a single vertex when doing repositionings\n\n\n      for (var i = 0; i < this.rings.length; i++) {\n        var _ring = this.rings[i];\n\n        this.graph.vertices[_ring.members[0]].value.addAnchoredRing(_ring.id);\n      } // Backup the ring information to restore after placing the bridged ring.\n      // This is needed in order to identify aromatic rings and stuff like this in\n      // rings that are member of the superring.\n\n\n      this.backupRingInformation(); // Replace rings contained by a larger bridged ring with a bridged ring\n\n      while (this.rings.length > 0) {\n        var id = -1;\n\n        for (var i = 0; i < this.rings.length; i++) {\n          var _ring3 = this.rings[i];\n\n          if (this.isPartOfBridgedRing(_ring3.id) && !_ring3.isBridged) {\n            id = _ring3.id;\n          }\n        }\n\n        if (id === -1) {\n          break;\n        }\n\n        var _ring2 = this.getRing(id);\n\n        var involvedRings = this.getBridgedRingRings(_ring2.id);\n        this.bridgedRing = true;\n        this.createBridgedRing(involvedRings, _ring2.members[0]); // Remove the rings\n\n        for (var i = 0; i < involvedRings.length; i++) {\n          this.removeRing(involvedRings[i]);\n        }\n      }\n    }\n  }, {\n    key: \"initHydrogens\",\n    value: function initHydrogens() {\n      // Do not draw hydrogens except when they are connected to a stereocenter connected to two or more rings.\n      if (!this.opts.explicitHydrogens) {\n        for (var i = 0; i < this.graph.vertices.length; i++) {\n          var vertex = this.graph.vertices[i];\n\n          if (vertex.value.element !== 'H') {\n            continue;\n          } // Hydrogens should have only one neighbour, so just take the first\n          // Also set hasHydrogen true on connected atom\n\n\n          var neighbour = this.graph.vertices[vertex.neighbours[0]];\n          neighbour.value.hasHydrogen = true;\n\n          if (!neighbour.value.isStereoCenter || neighbour.value.rings.length < 2 && !neighbour.value.bridgedRing || neighbour.value.bridgedRing && neighbour.value.originalRings.length < 2) {\n            vertex.value.isDrawn = false;\n          }\n        }\n      }\n    }\n    /**\n     * Returns all rings connected by bridged bonds starting from the ring with the supplied ring id.\n     *\n     * @param {Number} ringId A ring id.\n     * @returns {Number[]} An array containing all ring ids of rings part of a bridged ring system.\n     */\n\n  }, {\n    key: \"getBridgedRingRings\",\n    value: function getBridgedRingRings(ringId) {\n      var involvedRings = Array();\n      var that = this;\n\n      var recurse = function recurse(r) {\n        var ring = that.getRing(r);\n        involvedRings.push(r);\n\n        for (var i = 0; i < ring.neighbours.length; i++) {\n          var n = ring.neighbours[i];\n\n          if (involvedRings.indexOf(n) === -1 && n !== r && RingConnection.isBridge(that.ringConnections, that.graph.vertices, r, n)) {\n            recurse(n);\n          }\n        }\n      };\n\n      recurse(ringId);\n      return ArrayHelper.unique(involvedRings);\n    }\n    /**\n     * Checks whether or not a ring is part of a bridged ring.\n     *\n     * @param {Number} ringId A ring id.\n     * @returns {Boolean} A boolean indicating whether or not the supplied ring (by id) is part of a bridged ring system.\n     */\n\n  }, {\n    key: \"isPartOfBridgedRing\",\n    value: function isPartOfBridgedRing(ringId) {\n      for (var i = 0; i < this.ringConnections.length; i++) {\n        if (this.ringConnections[i].containsRing(ringId) && this.ringConnections[i].isBridge(this.graph.vertices)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Creates a bridged ring.\n     *\n     * @param {Number[]} ringIds An array of ids of rings involved in the bridged ring.\n     * @param {Number} sourceVertexId The vertex id to start the bridged ring discovery from.\n     * @returns {Ring} The bridged ring.\n     */\n\n  }, {\n    key: \"createBridgedRing\",\n    value: function createBridgedRing(ringIds, sourceVertexId) {\n      var ringMembers = new Set();\n      var vertices = new Set();\n      var neighbours = new Set();\n\n      for (var i = 0; i < ringIds.length; i++) {\n        var _ring4 = this.getRing(ringIds[i]);\n\n        _ring4.isPartOfBridged = true;\n\n        for (var j = 0; j < _ring4.members.length; j++) {\n          vertices.add(_ring4.members[j]);\n        }\n\n        for (var j = 0; j < _ring4.neighbours.length; j++) {\n          var id = _ring4.neighbours[j];\n\n          if (ringIds.indexOf(id) === -1) {\n            neighbours.add(_ring4.neighbours[j]);\n          }\n        }\n      } // A vertex is part of the bridged ring if it only belongs to\n      // one of the rings (or to another ring\n      // which is not part of the bridged ring).\n\n\n      var leftovers = new Set();\n\n      var _iterator = _createForOfIteratorHelper(vertices),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _id = _step.value;\n          var _vertex = this.graph.vertices[_id];\n          var intersection = ArrayHelper.intersection(ringIds, _vertex.value.rings);\n\n          if (_vertex.value.rings.length === 1 || intersection.length === 1) {\n            ringMembers.add(_vertex.id);\n          } else {\n            leftovers.add(_vertex.id);\n          }\n        } // Vertices can also be part of multiple rings and lay on the bridged ring,\n        // however, they have to have at least two neighbours that are not part of\n        // two rings\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var tmp = Array();\n      var insideRing = Array();\n\n      var _iterator2 = _createForOfIteratorHelper(leftovers),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _id2 = _step2.value;\n          var _vertex2 = this.graph.vertices[_id2];\n          var onRing = false;\n\n          for (var _j = 0; _j < _vertex2.edges.length; _j++) {\n            if (this.edgeRingCount(_vertex2.edges[_j]) === 1) {\n              onRing = true;\n            }\n          }\n\n          if (onRing) {\n            _vertex2.value.isBridgeNode = true;\n            ringMembers.add(_vertex2.id);\n          } else {\n            _vertex2.value.isBridge = true;\n            ringMembers.add(_vertex2.id);\n          }\n        } // Create the ring\n\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var ring = new Ring(_toConsumableArray(ringMembers));\n      this.addRing(ring);\n      ring.isBridged = true;\n      ring.neighbours = _toConsumableArray(neighbours);\n\n      for (var i = 0; i < ringIds.length; i++) {\n        ring.rings.push(this.getRing(ringIds[i]).clone());\n      }\n\n      for (var i = 0; i < ring.members.length; i++) {\n        this.graph.vertices[ring.members[i]].value.bridgedRing = ring.id;\n      } // Atoms inside the ring are no longer part of a ring but are now\n      // associated with the bridged ring\n\n\n      for (var i = 0; i < insideRing.length; i++) {\n        var vertex = this.graph.vertices[insideRing[i]];\n        vertex.value.rings = Array();\n      } // Remove former rings from members of the bridged ring and add the bridged ring\n\n\n      var _iterator3 = _createForOfIteratorHelper(ringMembers),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _id3 = _step3.value;\n          var _vertex3 = this.graph.vertices[_id3];\n          _vertex3.value.rings = ArrayHelper.removeAll(_vertex3.value.rings, ringIds);\n\n          _vertex3.value.rings.push(ring.id);\n        } // Remove all the ring connections no longer used\n\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      for (var i = 0; i < ringIds.length; i++) {\n        for (var j = i + 1; j < ringIds.length; j++) {\n          this.removeRingConnectionsBetween(ringIds[i], ringIds[j]);\n        }\n      } // Update the ring connections and add this ring to the neighbours neighbours\n\n\n      var _iterator4 = _createForOfIteratorHelper(neighbours),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _id4 = _step4.value;\n          var connections = this.getRingConnections(_id4, ringIds);\n\n          for (var j = 0; j < connections.length; j++) {\n            this.getRingConnection(connections[j]).updateOther(ring.id, _id4);\n          }\n\n          this.getRing(_id4).neighbours.push(ring.id);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return ring;\n    }\n    /**\n     * Checks whether or not two vertices are in the same ring.\n     *\n     * @param {Vertex} vertexA A vertex.\n     * @param {Vertex} vertexB A vertex.\n     * @returns {Boolean} A boolean indicating whether or not the two vertices are in the same ring.\n     */\n\n  }, {\n    key: \"areVerticesInSameRing\",\n    value: function areVerticesInSameRing(vertexA, vertexB) {\n      // This is a little bit lighter (without the array and push) than\n      // getCommonRings().length > 0\n      for (var i = 0; i < vertexA.value.rings.length; i++) {\n        for (var j = 0; j < vertexB.value.rings.length; j++) {\n          if (vertexA.value.rings[i] === vertexB.value.rings[j]) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Returns an array of ring ids shared by both vertices.\n     *\n     * @param {Vertex} vertexA A vertex.\n     * @param {Vertex} vertexB A vertex.\n     * @returns {Number[]} An array of ids of rings shared by the two vertices.\n     */\n\n  }, {\n    key: \"getCommonRings\",\n    value: function getCommonRings(vertexA, vertexB) {\n      var commonRings = Array();\n\n      for (var i = 0; i < vertexA.value.rings.length; i++) {\n        for (var j = 0; j < vertexB.value.rings.length; j++) {\n          if (vertexA.value.rings[i] == vertexB.value.rings[j]) {\n            commonRings.push(vertexA.value.rings[i]);\n          }\n        }\n      }\n\n      return commonRings;\n    }\n    /**\n     * Returns the aromatic or largest ring shared by the two vertices.\n     *\n     * @param {Vertex} vertexA A vertex.\n     * @param {Vertex} vertexB A vertex.\n     * @returns {(Ring|null)} If an aromatic common ring exists, that ring, else the largest (non-aromatic) ring, else null.\n     */\n\n  }, {\n    key: \"getLargestOrAromaticCommonRing\",\n    value: function getLargestOrAromaticCommonRing(vertexA, vertexB) {\n      var commonRings = this.getCommonRings(vertexA, vertexB);\n      var maxSize = 0;\n      var largestCommonRing = null;\n\n      for (var i = 0; i < commonRings.length; i++) {\n        var ring = this.getRing(commonRings[i]);\n        var size = ring.getSize();\n\n        if (ring.isBenzeneLike(this.graph.vertices)) {\n          return ring;\n        } else if (size > maxSize) {\n          maxSize = size;\n          largestCommonRing = ring;\n        }\n      }\n\n      return largestCommonRing;\n    }\n    /**\n     * Returns an array of vertices positioned at a specified location.\n     *\n     * @param {Vector2} position The position to search for vertices.\n     * @param {Number} radius The radius within to search.\n     * @param {Number} excludeVertexId A vertex id to be excluded from the search results.\n     * @returns {Number[]} An array containing vertex ids in a given location.\n     */\n\n  }, {\n    key: \"getVerticesAt\",\n    value: function getVerticesAt(position, radius, excludeVertexId) {\n      var locals = Array();\n\n      for (var i = 0; i < this.graph.vertices.length; i++) {\n        var vertex = this.graph.vertices[i];\n\n        if (vertex.id === excludeVertexId || !vertex.positioned) {\n          continue;\n        }\n\n        var distance = position.distanceSq(vertex.position);\n\n        if (distance <= radius * radius) {\n          locals.push(vertex.id);\n        }\n      }\n\n      return locals;\n    }\n    /**\n     * Returns the closest vertex (connected as well as unconnected).\n     *\n     * @param {Vertex} vertex The vertex of which to find the closest other vertex.\n     * @returns {Vertex} The closest vertex.\n     */\n\n  }, {\n    key: \"getClosestVertex\",\n    value: function getClosestVertex(vertex) {\n      var minDist = 99999;\n      var minVertex = null;\n\n      for (var i = 0; i < this.graph.vertices.length; i++) {\n        var v = this.graph.vertices[i];\n\n        if (v.id === vertex.id) {\n          continue;\n        }\n\n        var distSq = vertex.position.distanceSq(v.position);\n\n        if (distSq < minDist) {\n          minDist = distSq;\n          minVertex = v;\n        }\n      }\n\n      return minVertex;\n    }\n    /**\n     * Add a ring to this representation of a molecule.\n     *\n     * @param {Ring} ring A new ring.\n     * @returns {Number} The ring id of the new ring.\n     */\n\n  }, {\n    key: \"addRing\",\n    value: function addRing(ring) {\n      ring.id = this.ringIdCounter++;\n      this.rings.push(ring);\n      return ring.id;\n    }\n    /**\n     * Removes a ring from the array of rings associated with the current molecule.\n     *\n     * @param {Number} ringId A ring id.\n     */\n\n  }, {\n    key: \"removeRing\",\n    value: function removeRing(ringId) {\n      this.rings = this.rings.filter(function (item) {\n        return item.id !== ringId;\n      }); // Also remove ring connections involving this ring\n\n      this.ringConnections = this.ringConnections.filter(function (item) {\n        return item.firstRingId !== ringId && item.secondRingId !== ringId;\n      }); // Remove the ring as neighbour of other rings\n\n      for (var i = 0; i < this.rings.length; i++) {\n        var r = this.rings[i];\n        r.neighbours = r.neighbours.filter(function (item) {\n          return item !== ringId;\n        });\n      }\n    }\n    /**\n     * Gets a ring object from the array of rings associated with the current molecule by its id. The ring id is not equal to the index, since rings can be added and removed when processing bridged rings.\n     *\n     * @param {Number} ringId A ring id.\n     * @returns {Ring} A ring associated with the current molecule.\n     */\n\n  }, {\n    key: \"getRing\",\n    value: function getRing(ringId) {\n      for (var i = 0; i < this.rings.length; i++) {\n        if (this.rings[i].id == ringId) {\n          return this.rings[i];\n        }\n      }\n    }\n    /**\n     * Add a ring connection to this representation of a molecule.\n     *\n     * @param {RingConnection} ringConnection A new ringConnection.\n     * @returns {Number} The ring connection id of the new ring connection.\n     */\n\n  }, {\n    key: \"addRingConnection\",\n    value: function addRingConnection(ringConnection) {\n      ringConnection.id = this.ringConnectionIdCounter++;\n      this.ringConnections.push(ringConnection);\n      return ringConnection.id;\n    }\n    /**\n     * Removes a ring connection from the array of rings connections associated with the current molecule.\n     *\n     * @param {Number} ringConnectionId A ring connection id.\n     */\n\n  }, {\n    key: \"removeRingConnection\",\n    value: function removeRingConnection(ringConnectionId) {\n      this.ringConnections = this.ringConnections.filter(function (item) {\n        return item.id !== ringConnectionId;\n      });\n    }\n    /**\n     * Removes all ring connections between two vertices.\n     *\n     * @param {Number} vertexIdA A vertex id.\n     * @param {Number} vertexIdB A vertex id.\n     */\n\n  }, {\n    key: \"removeRingConnectionsBetween\",\n    value: function removeRingConnectionsBetween(vertexIdA, vertexIdB) {\n      var toRemove = Array();\n\n      for (var i = 0; i < this.ringConnections.length; i++) {\n        var ringConnection = this.ringConnections[i];\n\n        if (ringConnection.firstRingId === vertexIdA && ringConnection.secondRingId === vertexIdB || ringConnection.firstRingId === vertexIdB && ringConnection.secondRingId === vertexIdA) {\n          toRemove.push(ringConnection.id);\n        }\n      }\n\n      for (var i = 0; i < toRemove.length; i++) {\n        this.removeRingConnection(toRemove[i]);\n      }\n    }\n    /**\n     * Get a ring connection with a given id.\n     * \n     * @param {Number} id \n     * @returns {RingConnection} The ring connection with the specified id.\n     */\n\n  }, {\n    key: \"getRingConnection\",\n    value: function getRingConnection(id) {\n      for (var i = 0; i < this.ringConnections.length; i++) {\n        if (this.ringConnections[i].id == id) {\n          return this.ringConnections[i];\n        }\n      }\n    }\n    /**\n     * Get the ring connections between a ring and a set of rings.\n     *\n     * @param {Number} ringId A ring id.\n     * @param {Number[]} ringIds An array of ring ids.\n     * @returns {Number[]} An array of ring connection ids.\n     */\n\n  }, {\n    key: \"getRingConnections\",\n    value: function getRingConnections(ringId, ringIds) {\n      var ringConnections = Array();\n\n      for (var i = 0; i < this.ringConnections.length; i++) {\n        var rc = this.ringConnections[i];\n\n        for (var j = 0; j < ringIds.length; j++) {\n          var id = ringIds[j];\n\n          if (rc.firstRingId === ringId && rc.secondRingId === id || rc.firstRingId === id && rc.secondRingId === ringId) {\n            ringConnections.push(rc.id);\n          }\n        }\n      }\n\n      return ringConnections;\n    }\n    /**\n     * Returns the overlap score of the current molecule based on its positioned vertices. The higher the score, the more overlaps occur in the structure drawing.\n     *\n     * @returns {Object} Returns the total overlap score and the overlap score of each vertex sorted by score (higher to lower). Example: { total: 99, scores: [ { id: 0, score: 22 }, ... ]  }\n     */\n\n  }, {\n    key: \"getOverlapScore\",\n    value: function getOverlapScore() {\n      var total = 0.0;\n      var overlapScores = new Float32Array(this.graph.vertices.length);\n\n      for (var i = 0; i < this.graph.vertices.length; i++) {\n        overlapScores[i] = 0;\n      }\n\n      for (var i = 0; i < this.graph.vertices.length; i++) {\n        var j = this.graph.vertices.length;\n\n        while (--j > i) {\n          var a = this.graph.vertices[i];\n          var b = this.graph.vertices[j];\n\n          if (!a.value.isDrawn || !b.value.isDrawn) {\n            continue;\n          }\n\n          var dist = Vector2.subtract(a.position, b.position).lengthSq();\n\n          if (dist < this.opts.bondLengthSq) {\n            var weighted = (this.opts.bondLength - Math.sqrt(dist)) / this.opts.bondLength;\n            total += weighted;\n            overlapScores[i] += weighted;\n            overlapScores[j] += weighted;\n          }\n        }\n      }\n\n      var sortable = Array();\n\n      for (var i = 0; i < this.graph.vertices.length; i++) {\n        sortable.push({\n          id: i,\n          score: overlapScores[i]\n        });\n      }\n\n      sortable.sort(function (a, b) {\n        return b.score - a.score;\n      });\n      return {\n        total: total,\n        scores: sortable,\n        vertexScores: overlapScores\n      };\n    }\n    /**\n     * When drawing a double bond, choose the side to place the double bond. E.g. a double bond should always been drawn inside a ring.\n     *\n     * @param {Vertex} vertexA A vertex.\n     * @param {Vertex} vertexB A vertex.\n     * @param {Vector2[]} sides An array containing the two normals of the line spanned by the two provided vertices.\n     * @returns {Object} Returns an object containing the following information: {\n            totalSideCount: Counts the sides of each vertex in the molecule, is an array [ a, b ],\n            totalPosition: Same as position, but based on entire molecule,\n            sideCount: Counts the sides of each neighbour, is an array [ a, b ],\n            position: which side to position the second bond, is 0 or 1, represents the index in the normal array. This is based on only the neighbours\n            anCount: the number of neighbours of vertexA,\n            bnCount: the number of neighbours of vertexB\n        }\n     */\n\n  }, {\n    key: \"chooseSide\",\n    value: function chooseSide(vertexA, vertexB, sides) {\n      // Check which side has more vertices\n      // Get all the vertices connected to the both ends\n      var an = vertexA.getNeighbours(vertexB.id);\n      var bn = vertexB.getNeighbours(vertexA.id);\n      var anCount = an.length;\n      var bnCount = bn.length; // All vertices connected to the edge vertexA to vertexB\n\n      var tn = ArrayHelper.merge(an, bn); // Only considering the connected vertices\n\n      var sideCount = [0, 0];\n\n      for (var i = 0; i < tn.length; i++) {\n        var v = this.graph.vertices[tn[i]].position;\n\n        if (v.sameSideAs(vertexA.position, vertexB.position, sides[0])) {\n          sideCount[0]++;\n        } else {\n          sideCount[1]++;\n        }\n      } // Considering all vertices in the graph, this is to resolve ties\n      // from the above side counts\n\n\n      var totalSideCount = [0, 0];\n\n      for (var i = 0; i < this.graph.vertices.length; i++) {\n        var _v = this.graph.vertices[i].position;\n\n        if (_v.sameSideAs(vertexA.position, vertexB.position, sides[0])) {\n          totalSideCount[0]++;\n        } else {\n          totalSideCount[1]++;\n        }\n      }\n\n      return {\n        totalSideCount: totalSideCount,\n        totalPosition: totalSideCount[0] > totalSideCount[1] ? 0 : 1,\n        sideCount: sideCount,\n        position: sideCount[0] > sideCount[1] ? 0 : 1,\n        anCount: anCount,\n        bnCount: bnCount\n      };\n    }\n    /**\n     * Sets the center for a ring.\n     *\n     * @param {Ring} ring A ring.\n     */\n\n  }, {\n    key: \"setRingCenter\",\n    value: function setRingCenter(ring) {\n      var ringSize = ring.getSize();\n      var total = new Vector2(0, 0);\n\n      for (var i = 0; i < ringSize; i++) {\n        total.add(this.graph.vertices[ring.members[i]].position);\n      }\n\n      ring.center = total.divide(ringSize);\n    }\n    /**\n     * Gets the center of a ring contained within a bridged ring and containing a given vertex.\n     *\n     * @param {Ring} ring A bridged ring.\n     * @param {Vertex} vertex A vertex.\n     * @returns {Vector2} The center of the subring that containing the vertex.\n     */\n\n  }, {\n    key: \"getSubringCenter\",\n    value: function getSubringCenter(ring, vertex) {\n      var rings = vertex.value.originalRings;\n      var center = ring.center;\n      var smallest = Number.MAX_VALUE; // Always get the smallest ring.\n\n      for (var i = 0; i < rings.length; i++) {\n        for (var j = 0; j < ring.rings.length; j++) {\n          if (rings[i] === ring.rings[j].id) {\n            if (ring.rings[j].getSize() < smallest) {\n              center = ring.rings[j].center;\n              smallest = ring.rings[j].getSize();\n            }\n          }\n        }\n      }\n\n      return center;\n    }\n    /**\n     * Draw the actual edges as bonds to the canvas.\n     *\n     * @param {Boolean} debug A boolean indicating whether or not to draw debug helpers.\n     */\n\n  }, {\n    key: \"drawEdges\",\n    value: function drawEdges(debug) {\n      var that = this;\n      var drawn = Array(this.graph.edges.length);\n      drawn.fill(false);\n      this.graph.traverseBF(0, function (vertex) {\n        var edges = that.graph.getEdges(vertex.id);\n\n        for (var i = 0; i < edges.length; i++) {\n          var edgeId = edges[i];\n\n          if (!drawn[edgeId]) {\n            drawn[edgeId] = true;\n            that.drawEdge(edgeId, debug);\n          }\n        }\n      }); // Draw ring for implicitly defined aromatic rings\n\n      if (!this.bridgedRing) {\n        for (var i = 0; i < this.rings.length; i++) {\n          var ring = this.rings[i];\n\n          if (this.isRingAromatic(ring)) {\n            this.canvasWrapper.drawAromaticityRing(ring);\n          }\n        }\n      }\n    }\n    /**\n     * Draw the an edge as a bonds to the canvas.\n     *\n     * @param {Number} edgeId An edge id.\n     * @param {Boolean} debug A boolean indicating whether or not to draw debug helpers.\n     */\n\n  }, {\n    key: \"drawEdge\",\n    value: function drawEdge(edgeId, debug) {\n      var that = this;\n      var edge = this.graph.edges[edgeId];\n      var vertexA = this.graph.vertices[edge.sourceId];\n      var vertexB = this.graph.vertices[edge.targetId];\n      var elementA = vertexA.value.element;\n      var elementB = vertexB.value.element;\n\n      if ((!vertexA.value.isDrawn || !vertexB.value.isDrawn) && this.opts.atomVisualization === 'default') {\n        return;\n      }\n\n      var a = vertexA.position;\n      var b = vertexB.position;\n      var normals = this.getEdgeNormals(edge); // Create a point on each side of the line\n\n      var sides = ArrayHelper.clone(normals);\n      sides[0].multiplyScalar(10).add(a);\n      sides[1].multiplyScalar(10).add(a);\n\n      if (edge.bondType === '=' || this.getRingbondType(vertexA, vertexB) === '=' || edge.isPartOfAromaticRing && this.bridgedRing) {\n        // Always draw double bonds inside the ring\n        var inRing = this.areVerticesInSameRing(vertexA, vertexB);\n        var s = this.chooseSide(vertexA, vertexB, sides);\n\n        if (inRing) {\n          // Always draw double bonds inside a ring\n          // if the bond is shared by two rings, it is drawn in the larger\n          // problem: smaller ring is aromatic, bond is still drawn in larger -> fix this\n          var lcr = this.getLargestOrAromaticCommonRing(vertexA, vertexB);\n          var center = lcr.center;\n          normals[0].multiplyScalar(that.opts.bondSpacing);\n          normals[1].multiplyScalar(that.opts.bondSpacing); // Choose the normal that is on the same side as the center\n\n          var line = null;\n\n          if (center.sameSideAs(vertexA.position, vertexB.position, Vector2.add(a, normals[0]))) {\n            line = new Line(Vector2.add(a, normals[0]), Vector2.add(b, normals[0]), elementA, elementB);\n          } else {\n            line = new Line(Vector2.add(a, normals[1]), Vector2.add(b, normals[1]), elementA, elementB);\n          }\n\n          line.shorten(this.opts.bondLength - this.opts.shortBondLength * this.opts.bondLength); // The shortened edge\n\n          if (edge.isPartOfAromaticRing) {\n            this.canvasWrapper.drawLine(line, true);\n          } else {\n            this.canvasWrapper.drawLine(line);\n          } // The normal edge\n\n\n          this.canvasWrapper.drawLine(new Line(a, b, elementA, elementB));\n        } else if (edge.center || vertexA.isTerminal() && vertexB.isTerminal()) {\n          normals[0].multiplyScalar(that.opts.halfBondSpacing);\n          normals[1].multiplyScalar(that.opts.halfBondSpacing);\n          var lineA = new Line(Vector2.add(a, normals[0]), Vector2.add(b, normals[0]), elementA, elementB);\n          var lineB = new Line(Vector2.add(a, normals[1]), Vector2.add(b, normals[1]), elementA, elementB);\n          this.canvasWrapper.drawLine(lineA);\n          this.canvasWrapper.drawLine(lineB);\n        } else if (s.anCount == 0 && s.bnCount > 1 || s.bnCount == 0 && s.anCount > 1) {\n          // Both lines are the same length here\n          // Add the spacing to the edges (which are of unit length)\n          normals[0].multiplyScalar(that.opts.halfBondSpacing);\n          normals[1].multiplyScalar(that.opts.halfBondSpacing);\n\n          var _lineA = new Line(Vector2.add(a, normals[0]), Vector2.add(b, normals[0]), elementA, elementB);\n\n          var _lineB = new Line(Vector2.add(a, normals[1]), Vector2.add(b, normals[1]), elementA, elementB);\n\n          this.canvasWrapper.drawLine(_lineA);\n          this.canvasWrapper.drawLine(_lineB);\n        } else if (s.sideCount[0] > s.sideCount[1]) {\n          normals[0].multiplyScalar(that.opts.bondSpacing);\n          normals[1].multiplyScalar(that.opts.bondSpacing);\n\n          var _line = new Line(Vector2.add(a, normals[0]), Vector2.add(b, normals[0]), elementA, elementB);\n\n          _line.shorten(this.opts.bondLength - this.opts.shortBondLength * this.opts.bondLength);\n\n          this.canvasWrapper.drawLine(_line);\n          this.canvasWrapper.drawLine(new Line(a, b, elementA, elementB));\n        } else if (s.sideCount[0] < s.sideCount[1]) {\n          normals[0].multiplyScalar(that.opts.bondSpacing);\n          normals[1].multiplyScalar(that.opts.bondSpacing);\n\n          var _line2 = new Line(Vector2.add(a, normals[1]), Vector2.add(b, normals[1]), elementA, elementB);\n\n          _line2.shorten(this.opts.bondLength - this.opts.shortBondLength * this.opts.bondLength);\n\n          this.canvasWrapper.drawLine(_line2);\n          this.canvasWrapper.drawLine(new Line(a, b, elementA, elementB));\n        } else if (s.totalSideCount[0] > s.totalSideCount[1]) {\n          normals[0].multiplyScalar(that.opts.bondSpacing);\n          normals[1].multiplyScalar(that.opts.bondSpacing);\n\n          var _line3 = new Line(Vector2.add(a, normals[0]), Vector2.add(b, normals[0]), elementA, elementB);\n\n          _line3.shorten(this.opts.bondLength - this.opts.shortBondLength * this.opts.bondLength);\n\n          this.canvasWrapper.drawLine(_line3);\n          this.canvasWrapper.drawLine(new Line(a, b, elementA, elementB));\n        } else if (s.totalSideCount[0] <= s.totalSideCount[1]) {\n          normals[0].multiplyScalar(that.opts.bondSpacing);\n          normals[1].multiplyScalar(that.opts.bondSpacing);\n\n          var _line4 = new Line(Vector2.add(a, normals[1]), Vector2.add(b, normals[1]), elementA, elementB);\n\n          _line4.shorten(this.opts.bondLength - this.opts.shortBondLength * this.opts.bondLength);\n\n          this.canvasWrapper.drawLine(_line4);\n          this.canvasWrapper.drawLine(new Line(a, b, elementA, elementB));\n        } else {}\n      } else if (edge.bondType === '#') {\n        normals[0].multiplyScalar(that.opts.bondSpacing / 1.5);\n        normals[1].multiplyScalar(that.opts.bondSpacing / 1.5);\n\n        var _lineA2 = new Line(Vector2.add(a, normals[0]), Vector2.add(b, normals[0]), elementA, elementB);\n\n        var _lineB2 = new Line(Vector2.add(a, normals[1]), Vector2.add(b, normals[1]), elementA, elementB);\n\n        this.canvasWrapper.drawLine(_lineA2);\n        this.canvasWrapper.drawLine(_lineB2);\n        this.canvasWrapper.drawLine(new Line(a, b, elementA, elementB));\n      } else if (edge.bondType === '.') {// TODO: Something... maybe... version 2?\n      } else {\n        var isChiralCenterA = vertexA.value.isStereoCenter;\n        var isChiralCenterB = vertexB.value.isStereoCenter;\n\n        if (edge.wedge === 'up') {\n          this.canvasWrapper.drawWedge(new Line(a, b, elementA, elementB, isChiralCenterA, isChiralCenterB));\n        } else if (edge.wedge === 'down') {\n          this.canvasWrapper.drawDashedWedge(new Line(a, b, elementA, elementB, isChiralCenterA, isChiralCenterB));\n        } else {\n          this.canvasWrapper.drawLine(new Line(a, b, elementA, elementB, isChiralCenterA, isChiralCenterB));\n        }\n      }\n\n      if (debug) {\n        var midpoint = Vector2.midpoint(a, b);\n        this.canvasWrapper.drawDebugText(midpoint.x, midpoint.y, 'e: ' + edgeId);\n      }\n    }\n    /**\n     * Draws the vertices representing atoms to the canvas.\n     *\n     * @param {Boolean} debug A boolean indicating whether or not to draw debug messages to the canvas.\n     */\n\n  }, {\n    key: \"drawVertices\",\n    value: function drawVertices(debug) {\n      var i = this.graph.vertices.length;\n\n      for (var i = 0; i < this.graph.vertices.length; i++) {\n        var vertex = this.graph.vertices[i];\n        var atom = vertex.value;\n        var charge = 0;\n        var isotope = 0;\n        var bondCount = vertex.value.bondCount;\n        var element = atom.element;\n        var hydrogens = Atom.maxBonds[element] - bondCount;\n        var dir = vertex.getTextDirection(this.graph.vertices);\n        var isTerminal = this.opts.terminalCarbons || element !== 'C' || atom.hasAttachedPseudoElements ? vertex.isTerminal() : false;\n        var isCarbon = atom.element === 'C'; // This is a HACK to remove all hydrogens from nitrogens in aromatic rings, as this\n        // should be the most common state. This has to be fixed by kekulization\n\n        if (atom.element === 'N' && atom.isPartOfAromaticRing) {\n          hydrogens = 0;\n        }\n\n        if (atom.bracket) {\n          hydrogens = atom.bracket.hcount;\n          charge = atom.bracket.charge;\n          isotope = atom.bracket.isotope;\n        }\n\n        if (this.opts.atomVisualization === 'allballs') {\n          this.canvasWrapper.drawBall(vertex.position.x, vertex.position.y, element);\n        } else if (atom.isDrawn && (!isCarbon || atom.drawExplicit || isTerminal || atom.hasAttachedPseudoElements) || this.graph.vertices.length === 1) {\n          if (this.opts.atomVisualization === 'default') {\n            this.canvasWrapper.drawText(vertex.position.x, vertex.position.y, element, hydrogens, dir, isTerminal, charge, isotope, atom.getAttachedPseudoElements());\n          } else if (this.opts.atomVisualization === 'balls') {\n            this.canvasWrapper.drawBall(vertex.position.x, vertex.position.y, element);\n          }\n        } else if (vertex.getNeighbourCount() === 2 && vertex.forcePositioned == true) {\n          // If there is a carbon which bonds are in a straight line, draw a dot\n          var a = this.graph.vertices[vertex.neighbours[0]].position;\n          var b = this.graph.vertices[vertex.neighbours[1]].position;\n          var angle = Vector2.threePointangle(vertex.position, a, b);\n\n          if (Math.abs(Math.PI - angle) < 0.1) {\n            this.canvasWrapper.drawPoint(vertex.position.x, vertex.position.y, element);\n          }\n        }\n\n        if (debug) {\n          var value = 'v: ' + vertex.id + ' ' + ArrayHelper.print(atom.ringbonds);\n          this.canvasWrapper.drawDebugText(vertex.position.x, vertex.position.y, value);\n        } else {// this.canvasWrapper.drawDebugText(vertex.position.x, vertex.position.y, vertex.value.chirality);\n        }\n      } // Draw the ring centers for debug purposes\n\n\n      if (this.opts.debug) {\n        for (var i = 0; i < this.rings.length; i++) {\n          var center = this.rings[i].center;\n          this.canvasWrapper.drawDebugPoint(center.x, center.y, 'r: ' + this.rings[i].id);\n        }\n      }\n    }\n    /**\n     * Position the vertices according to their bonds and properties.\n     */\n\n  }, {\n    key: \"position\",\n    value: function position() {\n      var startVertex = null; // Always start drawing at a bridged ring if there is one\n      // If not, start with a ring\n      // else, start with 0\n\n      for (var i = 0; i < this.graph.vertices.length; i++) {\n        if (this.graph.vertices[i].value.bridgedRing !== null) {\n          startVertex = this.graph.vertices[i];\n          break;\n        }\n      }\n\n      for (var i = 0; i < this.rings.length; i++) {\n        if (this.rings[i].isBridged) {\n          startVertex = this.graph.vertices[this.rings[i].members[0]];\n        }\n      }\n\n      if (this.rings.length > 0 && startVertex === null) {\n        startVertex = this.graph.vertices[this.rings[0].members[0]];\n      }\n\n      if (startVertex === null) {\n        startVertex = this.graph.vertices[0];\n      }\n\n      this.createNextBond(startVertex, null, 0.0);\n    }\n    /**\n     * Stores the current information associated with rings.\n     */\n\n  }, {\n    key: \"backupRingInformation\",\n    value: function backupRingInformation() {\n      this.originalRings = Array();\n      this.originalRingConnections = Array();\n\n      for (var i = 0; i < this.rings.length; i++) {\n        this.originalRings.push(this.rings[i]);\n      }\n\n      for (var i = 0; i < this.ringConnections.length; i++) {\n        this.originalRingConnections.push(this.ringConnections[i]);\n      }\n\n      for (var i = 0; i < this.graph.vertices.length; i++) {\n        this.graph.vertices[i].value.backupRings();\n      }\n    }\n    /**\n     * Restores the most recently backed up information associated with rings.\n     */\n\n  }, {\n    key: \"restoreRingInformation\",\n    value: function restoreRingInformation() {\n      // Get the subring centers from the bridged rings\n      var bridgedRings = this.getBridgedRings();\n      this.rings = Array();\n      this.ringConnections = Array();\n\n      for (var i = 0; i < bridgedRings.length; i++) {\n        var bridgedRing = bridgedRings[i];\n\n        for (var j = 0; j < bridgedRing.rings.length; j++) {\n          var ring = bridgedRing.rings[j];\n          this.originalRings[ring.id].center = ring.center;\n        }\n      }\n\n      for (var i = 0; i < this.originalRings.length; i++) {\n        this.rings.push(this.originalRings[i]);\n      }\n\n      for (var i = 0; i < this.originalRingConnections.length; i++) {\n        this.ringConnections.push(this.originalRingConnections[i]);\n      }\n\n      for (var i = 0; i < this.graph.vertices.length; i++) {\n        this.graph.vertices[i].value.restoreRings();\n      }\n    } // TODO: This needs some cleaning up\n\n    /**\n     * Creates a new ring, that is, positiones all the vertices inside a ring.\n     *\n     * @param {Ring} ring The ring to position.\n     * @param {(Vector2|null)} [center=null] The center of the ring to be created.\n     * @param {(Vertex|null)} [startVertex=null] The first vertex to be positioned inside the ring.\n     * @param {(Vertex|null)} [previousVertex=null] The last vertex that was positioned.\n     * @param {Boolean} [previousVertex=false] A boolean indicating whether or not this ring was force positioned already - this is needed after force layouting a ring, in order to draw rings connected to it.\n     */\n\n  }, {\n    key: \"createRing\",\n    value: function createRing(ring) {\n      var center = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var startVertex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var previousVertex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n      if (ring.positioned) {\n        return;\n      }\n\n      center = center ? center : new Vector2(0, 0);\n      var orderedNeighbours = ring.getOrderedNeighbours(this.ringConnections);\n      var startingAngle = startVertex ? Vector2.subtract(startVertex.position, center).angle() : 0;\n      var radius = MathHelper.polyCircumradius(this.opts.bondLength, ring.getSize());\n      var angle = MathHelper.centralAngle(ring.getSize());\n      ring.centralAngle = angle;\n      var a = startingAngle;\n      var that = this;\n      var startVertexId = startVertex ? startVertex.id : null;\n\n      if (ring.members.indexOf(startVertexId) === -1) {\n        if (startVertex) {\n          startVertex.positioned = false;\n        }\n\n        startVertexId = ring.members[0];\n      } // If the ring is bridged, then draw the vertices inside the ring\n      // using a force based approach\n\n\n      if (ring.isBridged) {\n        this.graph.kkLayout(ring.members.slice(), center, startVertex.id, ring, this.opts.bondLength, this.opts.kkThreshold, this.opts.kkInnerThreshold, this.opts.kkMaxIteration, this.opts.kkMaxInnerIteration, this.opts.kkMaxEnergy);\n        ring.positioned = true; // Update the center of the bridged ring\n\n        this.setRingCenter(ring);\n        center = ring.center; // Setting the centers for the subrings\n\n        for (var i = 0; i < ring.rings.length; i++) {\n          this.setRingCenter(ring.rings[i]);\n        }\n      } else {\n        ring.eachMember(this.graph.vertices, function (v) {\n          var vertex = that.graph.vertices[v];\n\n          if (!vertex.positioned) {\n            vertex.setPosition(center.x + Math.cos(a) * radius, center.y + Math.sin(a) * radius);\n          }\n\n          a += angle;\n\n          if (!ring.isBridged || ring.rings.length < 3) {\n            vertex.angle = a;\n            vertex.positioned = true;\n          }\n        }, startVertexId, previousVertex ? previousVertex.id : null);\n      }\n\n      ring.positioned = true;\n      ring.center = center; // Draw neighbours in decreasing order of connectivity\n\n      for (var i = 0; i < orderedNeighbours.length; i++) {\n        var neighbour = this.getRing(orderedNeighbours[i].neighbour);\n\n        if (neighbour.positioned) {\n          continue;\n        }\n\n        var vertices = RingConnection.getVertices(this.ringConnections, ring.id, neighbour.id);\n\n        if (vertices.length === 2) {\n          // This ring is a fused ring\n          ring.isFused = true;\n          neighbour.isFused = true;\n          var vertexA = this.graph.vertices[vertices[0]];\n          var vertexB = this.graph.vertices[vertices[1]]; // Get middle between vertex A and B\n\n          var midpoint = Vector2.midpoint(vertexA.position, vertexB.position); // Get the normals to the line between A and B\n\n          var normals = Vector2.normals(vertexA.position, vertexB.position); // Normalize the normals\n\n          normals[0].normalize();\n          normals[1].normalize(); // Set length from middle of side to center (the apothem)\n\n          var r = MathHelper.polyCircumradius(this.opts.bondLength, neighbour.getSize());\n          var apothem = MathHelper.apothem(r, neighbour.getSize());\n          normals[0].multiplyScalar(apothem).add(midpoint);\n          normals[1].multiplyScalar(apothem).add(midpoint); // Pick the normal which results in a larger distance to the previous center\n          // Also check whether it's inside another ring\n\n          var nextCenter = normals[0];\n\n          if (Vector2.subtract(center, normals[1]).lengthSq() > Vector2.subtract(center, normals[0]).lengthSq()) {\n            nextCenter = normals[1];\n          } // Get the vertex (A or B) which is in clock-wise direction of the other\n\n\n          var posA = Vector2.subtract(vertexA.position, nextCenter);\n          var posB = Vector2.subtract(vertexB.position, nextCenter);\n\n          if (posA.clockwise(posB) === -1) {\n            if (!neighbour.positioned) {\n              this.createRing(neighbour, nextCenter, vertexA, vertexB);\n            }\n          } else {\n            if (!neighbour.positioned) {\n              this.createRing(neighbour, nextCenter, vertexB, vertexA);\n            }\n          }\n        } else if (vertices.length === 1) {\n          // This ring is a spiro\n          ring.isSpiro = true;\n          neighbour.isSpiro = true;\n          var _vertexA = this.graph.vertices[vertices[0]]; // Get the vector pointing from the shared vertex to the new centpositioner\n\n          var _nextCenter = Vector2.subtract(center, _vertexA.position);\n\n          _nextCenter.invert();\n\n          _nextCenter.normalize(); // Get the distance from the vertex to the center\n\n\n          var _r = MathHelper.polyCircumradius(this.opts.bondLength, neighbour.getSize());\n\n          _nextCenter.multiplyScalar(_r);\n\n          _nextCenter.add(_vertexA.position);\n\n          if (!neighbour.positioned) {\n            this.createRing(neighbour, _nextCenter, _vertexA);\n          }\n        }\n      } // Next, draw atoms that are not part of a ring that are directly attached to this ring\n\n\n      for (var i = 0; i < ring.members.length; i++) {\n        var ringMember = this.graph.vertices[ring.members[i]];\n        var ringMemberNeighbours = ringMember.neighbours; // If there are multiple, the ovlerap will be resolved in the appropriate step\n\n        for (var j = 0; j < ringMemberNeighbours.length; j++) {\n          var v = this.graph.vertices[ringMemberNeighbours[j]];\n\n          if (v.positioned) {\n            continue;\n          }\n\n          v.value.isConnectedToRing = true;\n          this.createNextBond(v, ringMember, 0.0);\n        }\n      }\n    }\n    /**\n     * Rotate an entire subtree by an angle around a center.\n     *\n     * @param {Number} vertexId A vertex id (the root of the sub-tree).\n     * @param {Number} parentVertexId A vertex id in the previous direction of the subtree that is to rotate.\n     * @param {Number} angle An angle in randians.\n     * @param {Vector2} center The rotational center.\n     */\n\n  }, {\n    key: \"rotateSubtree\",\n    value: function rotateSubtree(vertexId, parentVertexId, angle, center) {\n      var that = this;\n      this.graph.traverseTree(vertexId, parentVertexId, function (vertex) {\n        vertex.position.rotateAround(angle, center);\n\n        for (var i = 0; i < vertex.value.anchoredRings.length; i++) {\n          var ring = that.rings[vertex.value.anchoredRings[i]];\n\n          if (ring) {\n            ring.center.rotateAround(angle, center);\n          }\n        }\n      });\n    }\n    /**\n     * Gets the overlap score of a subtree.\n     *\n     * @param {Number} vertexId A vertex id (the root of the sub-tree).\n     * @param {Number} parentVertexId A vertex id in the previous direction of the subtree.\n     * @param {Number[]} vertexOverlapScores An array containing the vertex overlap scores indexed by vertex id.\n     * @returns {Object} An object containing the total overlap score and the center of mass of the subtree weighted by overlap score { value: 0.2, center: new Vector2() }.\n     */\n\n  }, {\n    key: \"getSubtreeOverlapScore\",\n    value: function getSubtreeOverlapScore(vertexId, parentVertexId, vertexOverlapScores) {\n      var that = this;\n      var score = 0;\n      var center = new Vector2(0, 0);\n      var count = 0;\n      this.graph.traverseTree(vertexId, parentVertexId, function (vertex) {\n        if (!vertex.value.isDrawn) {\n          return;\n        }\n\n        var s = vertexOverlapScores[vertex.id];\n\n        if (s > that.opts.overlapSensitivity) {\n          score += s;\n          count++;\n        }\n\n        var position = that.graph.vertices[vertex.id].position.clone();\n        position.multiplyScalar(s);\n        center.add(position);\n      });\n      center.divide(score);\n      return {\n        value: score / count,\n        center: center\n      };\n    }\n    /**\n     * Returns the current (positioned vertices so far) center of mass.\n     * \n     * @returns {Vector2} The current center of mass.\n     */\n\n  }, {\n    key: \"getCurrentCenterOfMass\",\n    value: function getCurrentCenterOfMass() {\n      var total = new Vector2(0, 0);\n      var count = 0;\n\n      for (var i = 0; i < this.graph.vertices.length; i++) {\n        var vertex = this.graph.vertices[i];\n\n        if (vertex.positioned) {\n          total.add(vertex.position);\n          count++;\n        }\n      }\n\n      return total.divide(count);\n    }\n    /**\n     * Returns the current (positioned vertices so far) center of mass in the neighbourhood of a given position.\n     *\n     * @param {Vector2} vec The point at which to look for neighbours.\n     * @param {Number} [r=currentBondLength*2.0] The radius of vertices to include.\n     * @returns {Vector2} The current center of mass.\n     */\n\n  }, {\n    key: \"getCurrentCenterOfMassInNeigbourhood\",\n    value: function getCurrentCenterOfMassInNeigbourhood(vec) {\n      var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.opts.bondLength * 2.0;\n      var total = new Vector2(0, 0);\n      var count = 0;\n      var rSq = r * r;\n\n      for (var i = 0; i < this.graph.vertices.length; i++) {\n        var vertex = this.graph.vertices[i];\n\n        if (vertex.positioned && vec.distanceSq(vertex.position) < rSq) {\n          total.add(vertex.position);\n          count++;\n        }\n      }\n\n      return total.divide(count);\n    }\n    /**\n     * Resolve primary (exact) overlaps, such as two vertices that are connected to the same ring vertex.\n     */\n\n  }, {\n    key: \"resolvePrimaryOverlaps\",\n    value: function resolvePrimaryOverlaps() {\n      var overlaps = Array();\n      var done = Array(this.graph.vertices.length); // Looking for overlaps created by two bonds coming out of a ring atom, which both point straight\n      // away from the ring and are thus perfectly overlapping.\n\n      for (var i = 0; i < this.rings.length; i++) {\n        var ring = this.rings[i];\n\n        for (var j = 0; j < ring.members.length; j++) {\n          var vertex = this.graph.vertices[ring.members[j]];\n\n          if (done[vertex.id]) {\n            continue;\n          }\n\n          done[vertex.id] = true;\n          var nonRingNeighbours = this.getNonRingNeighbours(vertex.id);\n\n          if (nonRingNeighbours.length > 1) {\n            // Look for rings where there are atoms with two bonds outside the ring (overlaps)\n            var rings = Array();\n\n            for (var k = 0; k < vertex.value.rings.length; k++) {\n              rings.push(vertex.value.rings[k]);\n            }\n\n            overlaps.push({\n              common: vertex,\n              rings: rings,\n              vertices: nonRingNeighbours\n            });\n          } else if (nonRingNeighbours.length === 1 && vertex.value.rings.length === 2) {\n            // Look for bonds coming out of joined rings to adjust the angle, an example is: C1=CC(=CC=C1)[C@]12SCCN1CC1=CC=CC=C21\n            // where the angle has to be adjusted to account for fused ring\n            var _rings = Array();\n\n            for (var k = 0; k < vertex.value.rings.length; k++) {\n              _rings.push(vertex.value.rings[k]);\n            }\n\n            overlaps.push({\n              common: vertex,\n              rings: _rings,\n              vertices: nonRingNeighbours\n            });\n          }\n        }\n      }\n\n      for (var i = 0; i < overlaps.length; i++) {\n        var overlap = overlaps[i];\n\n        if (overlap.vertices.length === 2) {\n          var a = overlap.vertices[0];\n          var b = overlap.vertices[1];\n\n          if (!a.value.isDrawn || !b.value.isDrawn) {\n            continue;\n          }\n\n          var angle = (2 * Math.PI - this.getRing(overlap.rings[0]).getAngle()) / 6.0;\n          this.rotateSubtree(a.id, overlap.common.id, angle, overlap.common.position);\n          this.rotateSubtree(b.id, overlap.common.id, -angle, overlap.common.position); // Decide which way to rotate the vertices depending on the effect it has on the overlap score\n\n          var overlapScore = this.getOverlapScore();\n          var subTreeOverlapA = this.getSubtreeOverlapScore(a.id, overlap.common.id, overlapScore.vertexScores);\n          var subTreeOverlapB = this.getSubtreeOverlapScore(b.id, overlap.common.id, overlapScore.vertexScores);\n          var total = subTreeOverlapA.value + subTreeOverlapB.value;\n          this.rotateSubtree(a.id, overlap.common.id, -2.0 * angle, overlap.common.position);\n          this.rotateSubtree(b.id, overlap.common.id, 2.0 * angle, overlap.common.position);\n          overlapScore = this.getOverlapScore();\n          subTreeOverlapA = this.getSubtreeOverlapScore(a.id, overlap.common.id, overlapScore.vertexScores);\n          subTreeOverlapB = this.getSubtreeOverlapScore(b.id, overlap.common.id, overlapScore.vertexScores);\n\n          if (subTreeOverlapA.value + subTreeOverlapB.value > total) {\n            this.rotateSubtree(a.id, overlap.common.id, 2.0 * angle, overlap.common.position);\n            this.rotateSubtree(b.id, overlap.common.id, -2.0 * angle, overlap.common.position);\n          }\n        } else if (overlap.vertices.length === 1) {\n          if (overlap.rings.length === 2) {// TODO: Implement for more overlap resolution\n            // console.log(overlap);\n          }\n        }\n      }\n    }\n    /**\n     * Resolve secondary overlaps. Those overlaps are due to the structure turning back on itself.\n     *\n     * @param {Object[]} scores An array of objects sorted descending by score.\n     * @param {Number} scores[].id A vertex id.\n     * @param {Number} scores[].score The overlap score associated with the vertex id.\n     */\n\n  }, {\n    key: \"resolveSecondaryOverlaps\",\n    value: function resolveSecondaryOverlaps(scores) {\n      for (var i = 0; i < scores.length; i++) {\n        if (scores[i].score > this.opts.overlapSensitivity) {\n          var vertex = this.graph.vertices[scores[i].id];\n\n          if (vertex.isTerminal()) {\n            var closest = this.getClosestVertex(vertex);\n\n            if (closest) {\n              // If one of the vertices is the first one, the previous vertex is not the central vertex but the dummy\n              // so take the next rather than the previous, which is vertex 1\n              var closestPosition = null;\n\n              if (closest.isTerminal()) {\n                closestPosition = closest.id === 0 ? this.graph.vertices[1].position : closest.previousPosition;\n              } else {\n                closestPosition = closest.id === 0 ? this.graph.vertices[1].position : closest.position;\n              }\n\n              var vertexPreviousPosition = vertex.id === 0 ? this.graph.vertices[1].position : vertex.previousPosition;\n              vertex.position.rotateAwayFrom(closestPosition, vertexPreviousPosition, MathHelper.toRad(20));\n            }\n          }\n        }\n      }\n    }\n    /**\n     * Get the last non-null or 0 angle vertex.\n     * @param {Number} vertexId A vertex id.\n     * @returns {Vertex} The last vertex with an angle that was not 0 or null.\n     */\n\n  }, {\n    key: \"getLastVertexWithAngle\",\n    value: function getLastVertexWithAngle(vertexId) {\n      var angle = 0;\n      var vertex = null;\n\n      while (!angle && vertexId) {\n        vertex = this.graph.vertices[vertexId];\n        angle = vertex.angle;\n        vertexId = vertex.parentVertexId;\n      }\n\n      return vertex;\n    }\n    /**\n     * Positiones the next vertex thus creating a bond.\n     *\n     * @param {Vertex} vertex A vertex.\n     * @param {Vertex} [previousVertex=null] The previous vertex which has been positioned.\n     * @param {Number} [angle=0.0] The (global) angle of the vertex.\n     * @param {Boolean} [originShortest=false] Whether the origin is the shortest subtree in the branch.\n     * @param {Boolean} [skipPositioning=false] Whether or not to skip positioning and just check the neighbours.\n     */\n\n  }, {\n    key: \"createNextBond\",\n    value: function createNextBond(vertex) {\n      var previousVertex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var angle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.0;\n      var originShortest = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var skipPositioning = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n      if (vertex.positioned && !skipPositioning) {\n        return;\n      } // If the double bond config was set on this vertex, do not check later\n\n\n      var doubleBondConfigSet = false; // Keeping track of configurations around double bonds\n\n      if (previousVertex) {\n        var edge = this.graph.getEdge(vertex.id, previousVertex.id);\n\n        if ((edge.bondType === '/' || edge.bondType === '\\\\') && ++this.doubleBondConfigCount % 2 === 1) {\n          if (this.doubleBondConfig === null) {\n            this.doubleBondConfig = edge.bondType;\n            doubleBondConfigSet = true; // Switch if the bond is a branch bond and previous vertex is the first\n            // TODO: Why is it different with the first vertex?\n\n            if (previousVertex.parentVertexId === null && vertex.value.branchBond) {\n              if (this.doubleBondConfig === '/') {\n                this.doubleBondConfig = '\\\\';\n              } else if (this.doubleBondConfig === '\\\\') {\n                this.doubleBondConfig = '/';\n              }\n            }\n          }\n        }\n      } // If the current node is the member of one ring, then point straight away\n      // from the center of the ring. However, if the current node is a member of\n      // two rings, point away from the middle of the centers of the two rings\n\n\n      if (!skipPositioning) {\n        if (!previousVertex) {\n          // Add a (dummy) previous position if there is no previous vertex defined\n          // Since the first vertex is at (0, 0), create a vector at (bondLength, 0)\n          // and rotate it by 90°\n          var dummy = new Vector2(this.opts.bondLength, 0);\n          dummy.rotate(MathHelper.toRad(-60));\n          vertex.previousPosition = dummy;\n          vertex.setPosition(this.opts.bondLength, 0);\n          vertex.angle = MathHelper.toRad(-60); // Do not position the vertex if it belongs to a bridged ring that is positioned using a layout algorithm.\n\n          if (vertex.value.bridgedRing === null) {\n            vertex.positioned = true;\n          }\n        } else if (previousVertex.value.rings.length > 0) {\n          var neighbours = previousVertex.neighbours;\n          var joinedVertex = null;\n          var pos = new Vector2(0.0, 0.0);\n\n          if (previousVertex.value.bridgedRing === null && previousVertex.value.rings.length > 1) {\n            for (var i = 0; i < neighbours.length; i++) {\n              var neighbour = this.graph.vertices[neighbours[i]];\n\n              if (ArrayHelper.containsAll(neighbour.value.rings, previousVertex.value.rings)) {\n                joinedVertex = neighbour;\n                break;\n              }\n            }\n          }\n\n          if (joinedVertex === null) {\n            for (var i = 0; i < neighbours.length; i++) {\n              var v = this.graph.vertices[neighbours[i]];\n\n              if (v.positioned && this.areVerticesInSameRing(v, previousVertex)) {\n                pos.add(Vector2.subtract(v.position, previousVertex.position));\n              }\n            }\n\n            pos.invert().normalize().multiplyScalar(this.opts.bondLength).add(previousVertex.position);\n          } else {\n            pos = joinedVertex.position.clone().rotateAround(Math.PI, previousVertex.position);\n          }\n\n          vertex.previousPosition = previousVertex.position;\n          vertex.setPositionFromVector(pos);\n          vertex.positioned = true;\n        } else {\n          // If the previous vertex was not part of a ring, draw a bond based\n          // on the global angle of the previous bond\n          var _v2 = new Vector2(this.opts.bondLength, 0);\n\n          _v2.rotate(angle);\n\n          _v2.add(previousVertex.position);\n\n          vertex.setPositionFromVector(_v2);\n          vertex.previousPosition = previousVertex.position;\n          vertex.positioned = true;\n        }\n      } // Go to next vertex\n      // If two rings are connected by a bond ...\n\n\n      if (vertex.value.bridgedRing !== null) {\n        var nextRing = this.getRing(vertex.value.bridgedRing);\n\n        if (!nextRing.positioned) {\n          var nextCenter = Vector2.subtract(vertex.previousPosition, vertex.position);\n          nextCenter.invert();\n          nextCenter.normalize();\n          var r = MathHelper.polyCircumradius(this.opts.bondLength, nextRing.members.length);\n          nextCenter.multiplyScalar(r);\n          nextCenter.add(vertex.position);\n          this.createRing(nextRing, nextCenter, vertex);\n        }\n      } else if (vertex.value.rings.length > 0) {\n        var _nextRing = this.getRing(vertex.value.rings[0]);\n\n        if (!_nextRing.positioned) {\n          var _nextCenter2 = Vector2.subtract(vertex.previousPosition, vertex.position);\n\n          _nextCenter2.invert();\n\n          _nextCenter2.normalize();\n\n          var _r2 = MathHelper.polyCircumradius(this.opts.bondLength, _nextRing.getSize());\n\n          _nextCenter2.multiplyScalar(_r2);\n\n          _nextCenter2.add(vertex.position);\n\n          this.createRing(_nextRing, _nextCenter2, vertex);\n        }\n      } else {\n        // Draw the non-ring vertices connected to this one  \n        var isStereoCenter = vertex.value.isStereoCenter;\n        var tmpNeighbours = vertex.getNeighbours();\n\n        var _neighbours = Array(); // Remove neighbours that are not drawn\n\n\n        for (var i = 0; i < tmpNeighbours.length; i++) {\n          if (this.graph.vertices[tmpNeighbours[i]].value.isDrawn) {\n            _neighbours.push(tmpNeighbours[i]);\n          }\n        } // Remove the previous vertex (which has already been drawn)\n\n\n        if (previousVertex) {\n          _neighbours = ArrayHelper.remove(_neighbours, previousVertex.id);\n        }\n\n        var previousAngle = vertex.getAngle();\n\n        if (_neighbours.length === 1) {\n          var nextVertex = this.graph.vertices[_neighbours[0]]; // Make a single chain always cis except when there's a tribble (yes, this is a Star Trek reference) bond\n          // or if there are successive double bonds. Added a ring check because if there is an aromatic ring the ring bond inside the ring counts as a double bond and leads to =-= being straight.\n\n          if (vertex.value.bondType === '#' || previousVertex && previousVertex.value.bondType === '#' || vertex.value.bondType === '=' && previousVertex && previousVertex.value.rings.length === 0 && previousVertex.value.bondType === '=' && vertex.value.branchBond !== '-') {\n            vertex.value.drawExplicit = false;\n\n            if (previousVertex) {\n              var straightEdge1 = this.graph.getEdge(vertex.id, previousVertex.id);\n              straightEdge1.center = true;\n            }\n\n            var straightEdge2 = this.graph.getEdge(vertex.id, nextVertex.id);\n            straightEdge2.center = true;\n\n            if (vertex.value.bondType === '#' || previousVertex && previousVertex.value.bondType === '#') {\n              nextVertex.angle = 0.0;\n            }\n\n            nextVertex.drawExplicit = true;\n            this.createNextBond(nextVertex, vertex, previousAngle + nextVertex.angle);\n          } else if (previousVertex && previousVertex.value.rings.length > 0) {\n            // If coming out of a ring, always draw away from the center of mass\n            var proposedAngleA = MathHelper.toRad(60);\n            var proposedAngleB = -proposedAngleA;\n            var proposedVectorA = new Vector2(this.opts.bondLength, 0);\n            var proposedVectorB = new Vector2(this.opts.bondLength, 0);\n            proposedVectorA.rotate(proposedAngleA).add(vertex.position);\n            proposedVectorB.rotate(proposedAngleB).add(vertex.position); // let centerOfMass = this.getCurrentCenterOfMassInNeigbourhood(vertex.position, 100);\n\n            var centerOfMass = this.getCurrentCenterOfMass();\n            var distanceA = proposedVectorA.distanceSq(centerOfMass);\n            var distanceB = proposedVectorB.distanceSq(centerOfMass);\n            nextVertex.angle = distanceA < distanceB ? proposedAngleB : proposedAngleA;\n            this.createNextBond(nextVertex, vertex, previousAngle + nextVertex.angle);\n          } else {\n            var a = vertex.angle; // Take the min and max if the previous angle was in a 4-neighbourhood (90° angles)\n            // TODO: If a is null or zero, it should be checked whether or not this one should go cis or trans, that is,\n            //       it should go into the oposite direction of the last non-null or 0 previous vertex / angle.\n\n            if (previousVertex && previousVertex.neighbours.length > 3) {\n              if (a > 0) {\n                a = Math.min(1.0472, a);\n              } else if (a < 0) {\n                a = Math.max(-1.0472, a);\n              } else {\n                a = 1.0472;\n              }\n            } else if (!a) {\n              var _v3 = this.getLastVertexWithAngle(vertex.id);\n\n              a = _v3.angle;\n\n              if (!a) {\n                a = 1.0472;\n              }\n            } // Handle configuration around double bonds\n\n\n            if (previousVertex && !doubleBondConfigSet) {\n              var bondType = this.graph.getEdge(vertex.id, nextVertex.id).bondType;\n\n              if (bondType === '/') {\n                if (this.doubleBondConfig === '/') {// Nothing to do since it will be trans per default\n                } else if (this.doubleBondConfig === '\\\\') {\n                  a = -a;\n                }\n\n                this.doubleBondConfig = null;\n              } else if (bondType === '\\\\') {\n                if (this.doubleBondConfig === '/') {\n                  a = -a;\n                } else if (this.doubleBondConfig === '\\\\') {// Nothing to do since it will be trans per default\n                }\n\n                this.doubleBondConfig = null;\n              }\n            }\n\n            if (originShortest) {\n              nextVertex.angle = a;\n            } else {\n              nextVertex.angle = -a;\n            }\n\n            this.createNextBond(nextVertex, vertex, previousAngle + nextVertex.angle);\n          }\n        } else if (_neighbours.length === 2) {\n          // If the previous vertex comes out of a ring, it doesn't have an angle set\n          var _a = vertex.angle;\n\n          if (!_a) {\n            _a = 1.0472;\n          } // Check for the longer subtree - always go with cis for the longer subtree\n\n\n          var subTreeDepthA = this.graph.getTreeDepth(_neighbours[0], vertex.id);\n          var subTreeDepthB = this.graph.getTreeDepth(_neighbours[1], vertex.id);\n          var l = this.graph.vertices[_neighbours[0]];\n          var _r3 = this.graph.vertices[_neighbours[1]];\n          l.value.subtreeDepth = subTreeDepthA;\n          _r3.value.subtreeDepth = subTreeDepthB; // Also get the subtree for the previous direction (this is important when\n          // the previous vertex is the shortest path)\n\n          var subTreeDepthC = this.graph.getTreeDepth(previousVertex ? previousVertex.id : null, vertex.id);\n\n          if (previousVertex) {\n            previousVertex.value.subtreeDepth = subTreeDepthC;\n          }\n\n          var cis = 0;\n          var trans = 1; // Carbons go always cis\n\n          if (_r3.value.element === 'C' && l.value.element !== 'C' && subTreeDepthB > 1 && subTreeDepthA < 5) {\n            cis = 1;\n            trans = 0;\n          } else if (_r3.value.element !== 'C' && l.value.element === 'C' && subTreeDepthA > 1 && subTreeDepthB < 5) {\n            cis = 0;\n            trans = 1;\n          } else if (subTreeDepthB > subTreeDepthA) {\n            cis = 1;\n            trans = 0;\n          }\n\n          var cisVertex = this.graph.vertices[_neighbours[cis]];\n          var transVertex = this.graph.vertices[_neighbours[trans]];\n          var edgeCis = this.graph.getEdge(vertex.id, cisVertex.id);\n          var edgeTrans = this.graph.getEdge(vertex.id, transVertex.id); // If the origin tree is the shortest, make them the main chain\n\n          var _originShortest = false;\n\n          if (subTreeDepthC < subTreeDepthA && subTreeDepthC < subTreeDepthB) {\n            _originShortest = true;\n          }\n\n          transVertex.angle = _a;\n          cisVertex.angle = -_a;\n\n          if (this.doubleBondConfig === '\\\\') {\n            if (transVertex.value.branchBond === '\\\\') {\n              transVertex.angle = -_a;\n              cisVertex.angle = _a;\n            }\n          } else if (this.doubleBondConfig === '/') {\n            if (transVertex.value.branchBond === '/') {\n              transVertex.angle = -_a;\n              cisVertex.angle = _a;\n            }\n          }\n\n          this.createNextBond(transVertex, vertex, previousAngle + transVertex.angle, _originShortest);\n          this.createNextBond(cisVertex, vertex, previousAngle + cisVertex.angle, _originShortest);\n        } else if (_neighbours.length === 3) {\n          // The vertex with the longest sub-tree should always go straight\n          var d1 = this.graph.getTreeDepth(_neighbours[0], vertex.id);\n          var d2 = this.graph.getTreeDepth(_neighbours[1], vertex.id);\n          var d3 = this.graph.getTreeDepth(_neighbours[2], vertex.id);\n          var s = this.graph.vertices[_neighbours[0]];\n          var _l = this.graph.vertices[_neighbours[1]];\n          var _r4 = this.graph.vertices[_neighbours[2]];\n          s.value.subtreeDepth = d1;\n          _l.value.subtreeDepth = d2;\n          _r4.value.subtreeDepth = d3;\n\n          if (d2 > d1 && d2 > d3) {\n            s = this.graph.vertices[_neighbours[1]];\n            _l = this.graph.vertices[_neighbours[0]];\n            _r4 = this.graph.vertices[_neighbours[2]];\n          } else if (d3 > d1 && d3 > d2) {\n            s = this.graph.vertices[_neighbours[2]];\n            _l = this.graph.vertices[_neighbours[0]];\n            _r4 = this.graph.vertices[_neighbours[1]];\n          } // Create a cross if more than one subtree is of length > 1\n          // or the vertex is connected to a ring\n\n\n          if (previousVertex && previousVertex.value.rings.length < 1 && s.value.rings.length < 1 && _l.value.rings.length < 1 && _r4.value.rings.length < 1 && this.graph.getTreeDepth(_l.id, vertex.id) === 1 && this.graph.getTreeDepth(_r4.id, vertex.id) === 1 && this.graph.getTreeDepth(s.id, vertex.id) > 1) {\n            s.angle = -vertex.angle;\n\n            if (vertex.angle >= 0) {\n              _l.angle = MathHelper.toRad(30);\n              _r4.angle = MathHelper.toRad(90);\n            } else {\n              _l.angle = -MathHelper.toRad(30);\n              _r4.angle = -MathHelper.toRad(90);\n            }\n\n            this.createNextBond(s, vertex, previousAngle + s.angle);\n            this.createNextBond(_l, vertex, previousAngle + _l.angle);\n            this.createNextBond(_r4, vertex, previousAngle + _r4.angle);\n          } else {\n            s.angle = 0.0;\n            _l.angle = MathHelper.toRad(90);\n            _r4.angle = -MathHelper.toRad(90);\n            this.createNextBond(s, vertex, previousAngle + s.angle);\n            this.createNextBond(_l, vertex, previousAngle + _l.angle);\n            this.createNextBond(_r4, vertex, previousAngle + _r4.angle);\n          }\n        } else if (_neighbours.length === 4) {\n          // The vertex with the longest sub-tree should always go to the reflected opposide direction\n          var _d = this.graph.getTreeDepth(_neighbours[0], vertex.id);\n\n          var _d2 = this.graph.getTreeDepth(_neighbours[1], vertex.id);\n\n          var _d3 = this.graph.getTreeDepth(_neighbours[2], vertex.id);\n\n          var d4 = this.graph.getTreeDepth(_neighbours[3], vertex.id);\n          var w = this.graph.vertices[_neighbours[0]];\n          var x = this.graph.vertices[_neighbours[1]];\n          var y = this.graph.vertices[_neighbours[2]];\n          var z = this.graph.vertices[_neighbours[3]];\n          w.value.subtreeDepth = _d;\n          x.value.subtreeDepth = _d2;\n          y.value.subtreeDepth = _d3;\n          z.value.subtreeDepth = d4;\n\n          if (_d2 > _d && _d2 > _d3 && _d2 > d4) {\n            w = this.graph.vertices[_neighbours[1]];\n            x = this.graph.vertices[_neighbours[0]];\n            y = this.graph.vertices[_neighbours[2]];\n            z = this.graph.vertices[_neighbours[3]];\n          } else if (_d3 > _d && _d3 > _d2 && _d3 > d4) {\n            w = this.graph.vertices[_neighbours[2]];\n            x = this.graph.vertices[_neighbours[0]];\n            y = this.graph.vertices[_neighbours[1]];\n            z = this.graph.vertices[_neighbours[3]];\n          } else if (d4 > _d && d4 > _d2 && d4 > _d3) {\n            w = this.graph.vertices[_neighbours[3]];\n            x = this.graph.vertices[_neighbours[0]];\n            y = this.graph.vertices[_neighbours[1]];\n            z = this.graph.vertices[_neighbours[2]];\n          }\n\n          w.angle = -MathHelper.toRad(36);\n          x.angle = MathHelper.toRad(36);\n          y.angle = -MathHelper.toRad(108);\n          z.angle = MathHelper.toRad(108);\n          this.createNextBond(w, vertex, previousAngle + w.angle);\n          this.createNextBond(x, vertex, previousAngle + x.angle);\n          this.createNextBond(y, vertex, previousAngle + y.angle);\n          this.createNextBond(z, vertex, previousAngle + z.angle);\n        }\n      }\n    }\n    /**\n     * Gets the vetex sharing the edge that is the common bond of two rings.\n     *\n     * @param {Vertex} vertex A vertex.\n     * @returns {(Number|null)} The id of a vertex sharing the edge that is the common bond of two rings with the vertex provided or null, if none.\n     */\n\n  }, {\n    key: \"getCommonRingbondNeighbour\",\n    value: function getCommonRingbondNeighbour(vertex) {\n      var neighbours = vertex.neighbours;\n\n      for (var i = 0; i < neighbours.length; i++) {\n        var neighbour = this.graph.vertices[neighbours[i]];\n\n        if (ArrayHelper.containsAll(neighbour.value.rings, vertex.value.rings)) {\n          return neighbour;\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Check if a vector is inside any ring.\n     *\n     * @param {Vector2} vec A vector.\n     * @returns {Boolean} A boolean indicating whether or not the point (vector) is inside any of the rings associated with the current molecule.\n     */\n\n  }, {\n    key: \"isPointInRing\",\n    value: function isPointInRing(vec) {\n      for (var i = 0; i < this.rings.length; i++) {\n        var ring = this.rings[i];\n\n        if (!ring.positioned) {\n          continue;\n        }\n\n        var radius = MathHelper.polyCircumradius(this.opts.bondLength, ring.getSize());\n        var radiusSq = radius * radius;\n\n        if (vec.distanceSq(ring.center) < radiusSq) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Check whether or not an edge is part of a ring.\n     *\n     * @param {Edge} edge An edge.\n     * @returns {Boolean} A boolean indicating whether or not the edge is part of a ring.\n     */\n\n  }, {\n    key: \"isEdgeInRing\",\n    value: function isEdgeInRing(edge) {\n      var source = this.graph.vertices[edge.sourceId];\n      var target = this.graph.vertices[edge.targetId];\n      return this.areVerticesInSameRing(source, target);\n    }\n    /**\n     * Check whether or not an edge is rotatable.\n     *\n     * @param {Edge} edge An edge.\n     * @returns {Boolean} A boolean indicating whether or not the edge is rotatable.\n     */\n\n  }, {\n    key: \"isEdgeRotatable\",\n    value: function isEdgeRotatable(edge) {\n      var vertexA = this.graph.vertices[edge.sourceId];\n      var vertexB = this.graph.vertices[edge.targetId]; // Only single bonds are rotatable\n\n      if (edge.bondType !== '-') {\n        return false;\n      } // Do not rotate edges that have a further single bond to each side - do that!\n      // If the bond is terminal, it doesn't make sense to rotate it\n      // if (vertexA.getNeighbourCount() + vertexB.getNeighbourCount() < 5) {\n      //   return false;\n      // }\n\n\n      if (vertexA.isTerminal() || vertexB.isTerminal()) {\n        return false;\n      } // Ringbonds are not rotatable\n\n\n      if (vertexA.value.rings.length > 0 && vertexB.value.rings.length > 0 && this.areVerticesInSameRing(vertexA, vertexB)) {\n        return false;\n      }\n\n      return true;\n    }\n    /**\n     * Check whether or not a ring is an implicitly defined aromatic ring (lower case smiles).\n     *\n     * @param {Ring} ring A ring.\n     * @returns {Boolean} A boolean indicating whether or not a ring is implicitly defined as aromatic.\n     */\n\n  }, {\n    key: \"isRingAromatic\",\n    value: function isRingAromatic(ring) {\n      for (var i = 0; i < ring.members.length; i++) {\n        var vertex = this.graph.vertices[ring.members[i]];\n\n        if (!vertex.value.isPartOfAromaticRing) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    /**\n     * Get the normals of an edge.\n     *\n     * @param {Edge} edge An edge.\n     * @returns {Vector2[]} An array containing two vectors, representing the normals.\n     */\n\n  }, {\n    key: \"getEdgeNormals\",\n    value: function getEdgeNormals(edge) {\n      var v1 = this.graph.vertices[edge.sourceId].position;\n      var v2 = this.graph.vertices[edge.targetId].position; // Get the normalized normals for the edge\n\n      var normals = Vector2.units(v1, v2);\n      return normals;\n    }\n    /**\n     * Returns an array of vertices that are neighbouring a vertix but are not members of a ring (including bridges).\n     *\n     * @param {Number} vertexId A vertex id.\n     * @returns {Vertex[]} An array of vertices.\n     */\n\n  }, {\n    key: \"getNonRingNeighbours\",\n    value: function getNonRingNeighbours(vertexId) {\n      var nrneighbours = Array();\n      var vertex = this.graph.vertices[vertexId];\n      var neighbours = vertex.neighbours;\n\n      for (var i = 0; i < neighbours.length; i++) {\n        var neighbour = this.graph.vertices[neighbours[i]];\n        var nIntersections = ArrayHelper.intersection(vertex.value.rings, neighbour.value.rings).length;\n\n        if (nIntersections === 0 && neighbour.value.isBridge == false) {\n          nrneighbours.push(neighbour);\n        }\n      }\n\n      return nrneighbours;\n    }\n    /**\n     * Annotaed stereochemistry information for visualization.\n     */\n\n  }, {\n    key: \"annotateStereochemistry\",\n    value: function annotateStereochemistry() {\n      var maxDepth = 10; // For each stereo-center\n\n      for (var i = 0; i < this.graph.vertices.length; i++) {\n        var vertex = this.graph.vertices[i];\n\n        if (!vertex.value.isStereoCenter) {\n          continue;\n        }\n\n        var neighbours = vertex.getNeighbours();\n        var nNeighbours = neighbours.length;\n        var priorities = Array(nNeighbours);\n\n        for (var j = 0; j < nNeighbours; j++) {\n          var visited = new Uint8Array(this.graph.vertices.length);\n          var priority = Array(Array());\n          visited[vertex.id] = 1;\n          this.visitStereochemistry(neighbours[j], vertex.id, visited, priority, maxDepth, 0); // Sort each level according to atomic number\n\n          for (var k = 0; k < priority.length; k++) {\n            priority[k].sort(function (a, b) {\n              return b - a;\n            });\n          }\n\n          priorities[j] = [j, priority];\n        }\n\n        var maxLevels = 0;\n        var maxEntries = 0;\n\n        for (var j = 0; j < priorities.length; j++) {\n          if (priorities[j][1].length > maxLevels) {\n            maxLevels = priorities[j][1].length;\n          }\n\n          for (var k = 0; k < priorities[j][1].length; k++) {\n            if (priorities[j][1][k].length > maxEntries) {\n              maxEntries = priorities[j][1][k].length;\n            }\n          }\n        }\n\n        for (var j = 0; j < priorities.length; j++) {\n          var diff = maxLevels - priorities[j][1].length;\n\n          for (var k = 0; k < diff; k++) {\n            priorities[j][1].push([]);\n          } // Break ties by the position in the SMILES string as per specification\n\n\n          priorities[j][1].push([neighbours[j]]); // Make all same length. Fill with zeroes.\n\n          for (var k = 0; k < priorities[j][1].length; k++) {\n            var _diff = maxEntries - priorities[j][1][k].length;\n\n            for (var l = 0; l < _diff; l++) {\n              priorities[j][1][k].push(0);\n            }\n          }\n        }\n\n        priorities.sort(function (a, b) {\n          for (var j = 0; j < a[1].length; j++) {\n            for (var k = 0; k < a[1][j].length; k++) {\n              if (a[1][j][k] > b[1][j][k]) {\n                return -1;\n              } else if (a[1][j][k] < b[1][j][k]) {\n                return 1;\n              }\n            }\n          }\n\n          return 0;\n        });\n        var order = new Uint8Array(nNeighbours);\n\n        for (var j = 0; j < nNeighbours; j++) {\n          order[j] = priorities[j][0];\n          vertex.value.priority = j;\n        } // Check the angles between elements 0 and 1, and 0 and 2 to determine whether they are\n        // drawn cw or ccw\n        // TODO: OC(Cl)=[C@]=C(C)F currently fails here, however this is, IMHO, not a valid SMILES.\n\n\n        var posA = this.graph.vertices[neighbours[order[0]]].position;\n        var posB = this.graph.vertices[neighbours[order[1]]].position;\n        var posC = this.graph.vertices[neighbours[order[2]]].position;\n        var cwA = posA.relativeClockwise(posB, vertex.position);\n        var cwB = posA.relativeClockwise(posC, vertex.position); // If the second priority is clockwise from the first, the ligands are drawn clockwise, since\n        // The hydrogen can be drawn on either side\n\n        var isCw = cwA === -1;\n        var rotation = vertex.value.bracket.chirality === '@' ? -1 : 1;\n        var rs = MathHelper.parityOfPermutation(order) * rotation === 1 ? 'R' : 'S'; // Flip the hydrogen direction when the drawing doesn't match the chirality.\n\n        var wedgeA = 'down';\n        var wedgeB = 'up';\n\n        if (isCw && rs !== 'R' || !isCw && rs !== 'S') {\n          vertex.value.hydrogenDirection = 'up';\n          wedgeA = 'up';\n          wedgeB = 'down';\n        }\n\n        if (vertex.value.hasHydrogen) {\n          this.graph.getEdge(vertex.id, neighbours[order[order.length - 1]]).wedge = wedgeA;\n        } // Get the shortest subtree to flip up / down. Ignore lowest priority\n        // The rules are following:\n        // 1. Do not draw wedge between two stereocenters\n        // 2. Heteroatoms\n        // 3. Draw outside ring\n        // 4. Shortest subtree\n\n\n        var wedgeOrder = new Array(neighbours.length - 1);\n        var showHydrogen = vertex.value.rings.length > 1 && vertex.value.hasHydrogen;\n        var offset = vertex.value.hasHydrogen ? 1 : 0;\n\n        for (var j = 0; j < order.length - offset; j++) {\n          wedgeOrder[j] = new Uint32Array(2);\n          var neighbour = this.graph.vertices[neighbours[order[j]]];\n          wedgeOrder[j][0] += neighbour.value.isStereoCenter ? 0 : 100000; // wedgeOrder[j][0] += neighbour.value.rings.length > 0 ? 0 : 10000;\n          // Only add if in same ring, unlike above\n\n          wedgeOrder[j][0] += this.areVerticesInSameRing(neighbour, vertex) ? 0 : 10000;\n          wedgeOrder[j][0] += neighbour.value.isHeteroAtom() ? 1000 : 0;\n          wedgeOrder[j][0] -= neighbour.value.subtreeDepth === 0 ? 1000 : 0;\n          wedgeOrder[j][0] += 1000 - neighbour.value.subtreeDepth;\n          wedgeOrder[j][1] = neighbours[order[j]];\n        }\n\n        wedgeOrder.sort(function (a, b) {\n          if (a[0] > b[0]) {\n            return -1;\n          } else if (a[0] < b[0]) {\n            return 1;\n          }\n\n          return 0;\n        }); // If all neighbours are in a ring, do not draw wedge, the hydrogen will be drawn.\n\n        if (!showHydrogen) {\n          var wedgeId = wedgeOrder[0][1];\n\n          if (vertex.value.hasHydrogen) {\n            this.graph.getEdge(vertex.id, wedgeId).wedge = wedgeB;\n          } else {\n            var wedge = wedgeB;\n\n            for (var j = order.length - 1; j >= 0; j--) {\n              if (wedge === wedgeA) {\n                wedge = wedgeB;\n              } else {\n                wedge = wedgeA;\n              }\n\n              if (neighbours[order[j]] === wedgeId) {\n                break;\n              }\n            }\n\n            this.graph.getEdge(vertex.id, wedgeId).wedge = wedge;\n          }\n        }\n\n        vertex.value.chirality = rs;\n      }\n    }\n    /**\n     * \n     * \n     * @param {Number} vertexId The id of a vertex.\n     * @param {(Number|null)} previousVertexId The id of the parent vertex of the vertex.\n     * @param {Uint8Array} visited An array containing the visited flag for all vertices in the graph.\n     * @param {Array} priority An array of arrays storing the atomic numbers for each level.\n     * @param {Number} maxDepth The maximum depth.\n     * @param {Number} depth The current depth.\n     */\n\n  }, {\n    key: \"visitStereochemistry\",\n    value: function visitStereochemistry(vertexId, previousVertexId, visited, priority, maxDepth, depth) {\n      var parentAtomicNumber = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n      visited[vertexId] = 1;\n      var vertex = this.graph.vertices[vertexId];\n      var atomicNumber = vertex.value.getAtomicNumber();\n\n      if (priority.length <= depth) {\n        priority.push(Array());\n      }\n\n      for (var i = 0; i < this.graph.getEdge(vertexId, previousVertexId).weight; i++) {\n        priority[depth].push(parentAtomicNumber * 1000 + atomicNumber);\n      }\n\n      var neighbours = this.graph.vertices[vertexId].neighbours;\n\n      for (var i = 0; i < neighbours.length; i++) {\n        if (visited[neighbours[i]] !== 1 && depth < maxDepth - 1) {\n          this.visitStereochemistry(neighbours[i], vertexId, visited.slice(), priority, maxDepth, depth + 1, atomicNumber);\n        }\n      } // Valences are filled with hydrogens and passed to the next level.\n\n\n      if (depth < maxDepth - 1) {\n        var bonds = 0;\n\n        for (var i = 0; i < neighbours.length; i++) {\n          bonds += this.graph.getEdge(vertexId, neighbours[i]).weight;\n        }\n\n        for (var i = 0; i < vertex.value.getMaxBonds() - bonds; i++) {\n          if (priority.length <= depth + 1) {\n            priority.push(Array());\n          }\n\n          priority[depth + 1].push(atomicNumber * 1000 + 1);\n        }\n      }\n    }\n    /**\n     * Creates pseudo-elements (such as Et, Me, Ac, Bz, ...) at the position of the carbon sets\n     * the involved atoms not to be displayed.\n     */\n\n  }, {\n    key: \"initPseudoElements\",\n    value: function initPseudoElements() {\n      for (var i = 0; i < this.graph.vertices.length; i++) {\n        var vertex = this.graph.vertices[i];\n        var neighbourIds = vertex.neighbours;\n        var neighbours = Array(neighbourIds.length);\n\n        for (var j = 0; j < neighbourIds.length; j++) {\n          neighbours[j] = this.graph.vertices[neighbourIds[j]];\n        } // Ignore atoms that have less than 3 neighbours, except if\n        // the vertex is connected to a ring and has two neighbours\n\n\n        if (vertex.getNeighbourCount() < 3 || vertex.value.rings.length > 0) {\n          continue;\n        } // TODO: This exceptions should be handled more elegantly (via config file?)\n        // Ignore phosphates (especially for triphosphates)\n\n\n        if (vertex.value.element === 'P') {\n          continue;\n        } // Ignore also guanidine\n\n\n        if (vertex.value.element === 'C' && neighbours.length === 3 && neighbours[0].value.element === 'N' && neighbours[1].value.element === 'N' && neighbours[2].value.element === 'N') {\n          continue;\n        } // Continue if there are less than two heteroatoms\n        // or if a neighbour has more than 1 neighbour\n\n\n        var heteroAtomCount = 0;\n        var ctn = 0;\n\n        for (var j = 0; j < neighbours.length; j++) {\n          var neighbour = neighbours[j];\n          var neighbouringElement = neighbour.value.element;\n          var neighbourCount = neighbour.getNeighbourCount();\n\n          if (neighbouringElement !== 'C' && neighbouringElement !== 'H' && neighbourCount === 1) {\n            heteroAtomCount++;\n          }\n\n          if (neighbourCount > 1) {\n            ctn++;\n          }\n        }\n\n        if (ctn > 1 || heteroAtomCount < 2) {\n          continue;\n        } // Get the previous atom (the one which is not terminal)\n\n\n        var previous = null;\n\n        for (var j = 0; j < neighbours.length; j++) {\n          var _neighbour = neighbours[j];\n\n          if (_neighbour.getNeighbourCount() > 1) {\n            previous = _neighbour;\n          }\n        }\n\n        for (var j = 0; j < neighbours.length; j++) {\n          var _neighbour2 = neighbours[j];\n\n          if (_neighbour2.getNeighbourCount() > 1) {\n            continue;\n          }\n\n          _neighbour2.value.isDrawn = false;\n          var hydrogens = Atom.maxBonds[_neighbour2.value.element] - _neighbour2.value.bondCount;\n          var charge = '';\n\n          if (_neighbour2.value.bracket) {\n            hydrogens = _neighbour2.value.bracket.hcount;\n            charge = _neighbour2.value.bracket.charge || 0;\n          }\n\n          vertex.value.attachPseudoElement(_neighbour2.value.element, previous ? previous.value.element : null, hydrogens, charge);\n        }\n      } // The second pass\n\n\n      for (var i = 0; i < this.graph.vertices.length; i++) {\n        var _vertex4 = this.graph.vertices[i];\n        var atom = _vertex4.value;\n        var element = atom.element;\n\n        if (element === 'C' || element === 'H' || !atom.isDrawn) {\n          continue;\n        }\n\n        var _neighbourIds = _vertex4.neighbours;\n\n        var _neighbours2 = Array(_neighbourIds.length);\n\n        for (var j = 0; j < _neighbourIds.length; j++) {\n          _neighbours2[j] = this.graph.vertices[_neighbourIds[j]];\n        }\n\n        for (var j = 0; j < _neighbours2.length; j++) {\n          var _neighbour3 = _neighbours2[j].value;\n\n          if (!_neighbour3.hasAttachedPseudoElements || _neighbour3.getAttachedPseudoElementsCount() !== 2) {\n            continue;\n          }\n\n          var pseudoElements = _neighbour3.getAttachedPseudoElements();\n\n          if (pseudoElements.hasOwnProperty('0O') && pseudoElements.hasOwnProperty('3C')) {\n            _neighbour3.isDrawn = false;\n\n            _vertex4.value.attachPseudoElement('Ac', '', 0);\n          }\n        }\n      }\n    }\n  }]);\n\n  return Drawer;\n}();\n\nmodule.exports = Drawer;","map":{"version":3,"sources":["/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/smiles-drawer/src/Drawer.js"],"names":["MathHelper","require","ArrayHelper","Vector2","Line","Vertex","Edge","Atom","Ring","RingConnection","CanvasWrapper","Graph","SSSR","ThemeManager","Drawer","options","graph","doubleBondConfigCount","doubleBondConfig","ringIdCounter","ringConnectionIdCounter","canvasWrapper","totalOverlapScore","defaultOptions","width","height","bondThickness","bondLength","shortBondLength","bondSpacing","atomVisualization","isomeric","debug","terminalCarbons","explicitHydrogens","overlapSensitivity","overlapResolutionIterations","compactDrawing","fontSizeLarge","fontSizeSmall","padding","experimentalSSSR","kkThreshold","kkInnerThreshold","kkMaxIteration","kkMaxInnerIteration","kkMaxEnergy","themes","dark","C","O","N","F","CL","BR","I","P","S","B","SI","H","BACKGROUND","light","opts","extend","halfBondSpacing","bondLengthSq","halfFontSizeLarge","quarterFontSizeLarge","fifthFontSizeSmall","theme","that","extended","deep","i","length","arguments","Object","prototype","toString","call","merge","obj","prop","hasOwnProperty","data","target","themeName","infoOnly","initDraw","themeManager","processGraph","scale","vertices","drawEdges","drawVertices","reset","console","log","rings","ringConnections","edgeId","edge","edges","a","sourceId","b","targetId","Math","min","value","bridgedRings","Array","isBridged","push","fusedRings","isFused","spiros","isSpiro","result","ring","id","members","neighbours","maxDist","vertexA","isDrawn","j","vertexB","dist","position","distanceSq","angle","subtract","isNaN","remainder","rotateAround","center","bridgedRing","hac","element","molecularFormula","counts","Map","atom","has","set","get","bracket","chirality","hcount","nHydrogens","maxBonds","bondCount","isPartOfAromaticRing","count","delete","elements","keys","atomicNumbers","sort","map","e","getRingbondCount","ringbonds","bondType","bond","originalRings","originalRingConnections","initRings","initHydrogens","restoreRingInformation","resolvePrimaryOverlaps","overlapScore","getOverlapScore","total","o","isEdgeRotatable","subTreeDepthA","getTreeDepth","subTreeDepthB","subTreeOverlap","getSubtreeOverlapScore","vertexScores","neighboursB","getNeighbours","neighbour","getRotateAwayFromAngle","toRad","rotateSubtree","newTotalOverlapScore","neighbourA","neighbourB","angleA","angleB","resolveSecondaryOverlaps","scores","annotateStereochemistry","initPseudoElements","rotateDrawing","openBonds","vertex","ringbondId","ringbondBond","sourceVertexId","targetVertexId","targetRingbondBond","setBondType","addEdge","targetVertex","addRingbondChild","addNeighbouringElement","getRings","ringVertices","ringId","addRing","ringConnection","size","addRingConnection","addAnchoredRing","backupRingInformation","isPartOfBridgedRing","getRing","involvedRings","getBridgedRingRings","createBridgedRing","removeRing","hasHydrogen","isStereoCenter","recurse","r","n","indexOf","isBridge","unique","containsRing","ringIds","ringMembers","Set","isPartOfBridged","add","leftovers","intersection","tmp","insideRing","onRing","edgeRingCount","isBridgeNode","clone","removeAll","removeRingConnectionsBetween","connections","getRingConnections","getRingConnection","updateOther","commonRings","getCommonRings","maxSize","largestCommonRing","getSize","isBenzeneLike","radius","excludeVertexId","locals","positioned","distance","minDist","minVertex","v","distSq","filter","item","firstRingId","secondRingId","ringConnectionId","vertexIdA","vertexIdB","toRemove","removeRingConnection","rc","overlapScores","Float32Array","lengthSq","weighted","sqrt","sortable","score","sides","an","bn","anCount","bnCount","tn","sideCount","sameSideAs","totalSideCount","totalPosition","ringSize","divide","smallest","Number","MAX_VALUE","drawn","fill","traverseBF","getEdges","drawEdge","isRingAromatic","drawAromaticityRing","elementA","elementB","normals","getEdgeNormals","multiplyScalar","getRingbondType","inRing","areVerticesInSameRing","s","chooseSide","lcr","getLargestOrAromaticCommonRing","line","shorten","drawLine","isTerminal","lineA","lineB","isChiralCenterA","isChiralCenterB","wedge","drawWedge","drawDashedWedge","midpoint","drawDebugText","x","y","charge","isotope","hydrogens","dir","getTextDirection","hasAttachedPseudoElements","isCarbon","drawBall","drawExplicit","drawText","getAttachedPseudoElements","getNeighbourCount","forcePositioned","threePointangle","abs","PI","drawPoint","print","drawDebugPoint","startVertex","createNextBond","backupRings","getBridgedRings","restoreRings","previousVertex","orderedNeighbours","getOrderedNeighbours","startingAngle","polyCircumradius","centralAngle","startVertexId","kkLayout","slice","setRingCenter","eachMember","setPosition","cos","sin","getVertices","normalize","apothem","nextCenter","posA","posB","clockwise","createRing","invert","ringMember","ringMemberNeighbours","isConnectedToRing","vertexId","parentVertexId","traverseTree","anchoredRings","vertexOverlapScores","vec","rSq","overlaps","done","nonRingNeighbours","getNonRingNeighbours","k","common","overlap","getAngle","subTreeOverlapA","subTreeOverlapB","closest","getClosestVertex","closestPosition","previousPosition","vertexPreviousPosition","rotateAwayFrom","originShortest","skipPositioning","doubleBondConfigSet","getEdge","branchBond","dummy","rotate","joinedVertex","pos","containsAll","setPositionFromVector","nextRing","tmpNeighbours","remove","previousAngle","nextVertex","straightEdge1","straightEdge2","proposedAngleA","proposedAngleB","proposedVectorA","proposedVectorB","centerOfMass","getCurrentCenterOfMass","distanceA","distanceB","max","getLastVertexWithAngle","l","subtreeDepth","subTreeDepthC","cis","trans","cisVertex","transVertex","edgeCis","edgeTrans","d1","d2","d3","d4","w","z","radiusSq","source","v1","v2","units","nrneighbours","nIntersections","maxDepth","nNeighbours","priorities","visited","Uint8Array","priority","visitStereochemistry","maxLevels","maxEntries","diff","order","posC","cwA","relativeClockwise","cwB","isCw","rotation","rs","parityOfPermutation","wedgeA","wedgeB","hydrogenDirection","wedgeOrder","showHydrogen","offset","Uint32Array","isHeteroAtom","wedgeId","previousVertexId","depth","parentAtomicNumber","atomicNumber","getAtomicNumber","weight","bonds","getMaxBonds","neighbourIds","heteroAtomCount","ctn","neighbouringElement","neighbourCount","previous","attachPseudoElement","getAttachedPseudoElementsCount","pseudoElements","module","exports"],"mappings":"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","sourcesContent":["//@ts-check\nconst MathHelper = require('./MathHelper')\nconst ArrayHelper = require('./ArrayHelper')\nconst Vector2 = require('./Vector2')\nconst Line = require('./Line')\nconst Vertex = require('./Vertex')\nconst Edge = require('./Edge')\nconst Atom = require('./Atom')\nconst Ring = require('./Ring')\nconst RingConnection = require('./RingConnection')\nconst CanvasWrapper = require('./CanvasWrapper')\nconst Graph = require('./Graph')\nconst SSSR = require('./SSSR')\nconst ThemeManager = require('./ThemeManager')\n\n/** \n * The main class of the application representing the smiles drawer \n * \n * @property {Graph} graph The graph associated with this SmilesDrawer.Drawer instance.\n * @property {Number} ringIdCounter An internal counter to keep track of ring ids.\n * @property {Number} ringConnectionIdCounter An internal counter to keep track of ring connection ids.\n * @property {CanvasWrapper} canvasWrapper The CanvasWrapper associated with this SmilesDrawer.Drawer instance.\n * @property {Number} totalOverlapScore The current internal total overlap score.\n * @property {Object} defaultOptions The default options.\n * @property {Object} opts The merged options.\n * @property {Object} theme The current theme.\n */\nclass Drawer {\n  /**\n   * The constructor for the class SmilesDrawer.\n   *\n   * @param {Object} options An object containing custom values for different options. It is merged with the default options.\n   */\n  constructor(options) {\n    this.graph = null;\n    this.doubleBondConfigCount = 0;\n    this.doubleBondConfig = null;\n    this.ringIdCounter = 0;\n    this.ringConnectionIdCounter = 0;\n    this.canvasWrapper = null;\n    this.totalOverlapScore = 0;\n\n    this.defaultOptions = {\n      width: 500,\n      height: 500,\n      bondThickness: 0.6,\n      bondLength: 15,\n      shortBondLength: 0.85,\n      bondSpacing: 0.18 * 15,\n      atomVisualization: 'default',\n      isomeric: true,\n      debug: false,\n      terminalCarbons: false,\n      explicitHydrogens: true,\n      overlapSensitivity: 0.42,\n      overlapResolutionIterations: 1,\n      compactDrawing: true,\n      fontSizeLarge: 5,\n      fontSizeSmall: 3,\n      padding: 20.0,\n      experimentalSSSR: false,\n      kkThreshold: 0.1,\n      kkInnerThreshold: 0.1,\n      kkMaxIteration: 20000,\n      kkMaxInnerIteration: 50,\n      kkMaxEnergy: 1e9,\n      themes: {\n        dark: {\n          C: '#fff',\n          O: '#e74c3c',\n          N: '#3498db',\n          F: '#27ae60',\n          CL: '#16a085',\n          BR: '#d35400',\n          I: '#8e44ad',\n          P: '#d35400',\n          S: '#f1c40f',\n          B: '#e67e22',\n          SI: '#e67e22',\n          H: '#fff',\n          BACKGROUND: '#141414'\n        },\n        light: {\n          C: '#222',\n          O: '#e74c3c',\n          N: '#3498db',\n          F: '#27ae60',\n          CL: '#16a085',\n          BR: '#d35400',\n          I: '#8e44ad',\n          P: '#d35400',\n          S: '#f1c40f',\n          B: '#e67e22',\n          SI: '#e67e22',\n          H: '#222',\n          BACKGROUND: '#fff'\n        }\n      }\n    };\n\n    this.opts = this.extend(true, this.defaultOptions, options);\n    this.opts.halfBondSpacing = this.opts.bondSpacing / 2.0;\n    this.opts.bondLengthSq = this.opts.bondLength * this.opts.bondLength;\n    this.opts.halfFontSizeLarge = this.opts.fontSizeLarge / 2.0;\n    this.opts.quarterFontSizeLarge = this.opts.fontSizeLarge / 4.0;\n    this.opts.fifthFontSizeSmall = this.opts.fontSizeSmall / 5.0;\n\n    // Set the default theme.\n    this.theme = this.opts.themes.dark;\n  }\n\n  /**\n   * A helper method to extend the default options with user supplied ones.\n   */\n  extend() {\n    let that = this;\n    let extended = {};\n    let deep = false;\n    let i = 0;\n    let length = arguments.length;\n\n    if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {\n      deep = arguments[0];\n      i++;\n    }\n\n    let merge = function (obj) {\n      for (var prop in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n          if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\n            extended[prop] = that.extend(true, extended[prop], obj[prop]);\n          } else {\n            extended[prop] = obj[prop];\n          }\n        }\n      }\n    };\n\n    for (; i < length; i++) {\n      let obj = arguments[i];\n      merge(obj);\n    }\n\n    return extended;\n  };\n\n\n  /**\n   * Draws the parsed smiles data to a canvas element.\n   *\n   * @param {Object} data The tree returned by the smiles parser.\n   * @param {(String|HTMLElement)} target The id of the HTML canvas element the structure is drawn to - or the element itself.\n   * @param {String} themeName='dark' The name of the theme to use. Built-in themes are 'light' and 'dark'.\n   * @param {Boolean} infoOnly=false Only output info on the molecule without drawing anything to the canvas.\n   */\n  draw(data, target, themeName = 'light', infoOnly = false) {\n    this.initDraw(data, themeName, infoOnly);\n\n    if (!this.infoOnly) {\n      this.themeManager = new ThemeManager(this.opts.themes, themeName);\n      this.canvasWrapper = new CanvasWrapper(target, this.themeManager, this.opts);\n    }\n\n    if (!infoOnly) {\n      this.processGraph();\n\n      // Set the canvas to the appropriate size\n      this.canvasWrapper.scale(this.graph.vertices);\n\n      // Do the actual drawing\n      this.drawEdges(this.opts.debug);\n      this.drawVertices(this.opts.debug);\n      this.canvasWrapper.reset();\n\n      if (this.opts.debug) {\n        console.log(this.graph);\n        console.log(this.rings);\n        console.log(this.ringConnections);\n      }\n    }\n  }\n\n  /**\n   * Returns the number of rings this edge is a part of.\n   *\n   * @param {Number} edgeId The id of an edge.\n   * @returns {Number} The number of rings the provided edge is part of.\n   */\n  edgeRingCount(edgeId) {\n    let edge = this.graph.edges[edgeId];\n    let a = this.graph.vertices[edge.sourceId];\n    let b = this.graph.vertices[edge.targetId];\n\n    return Math.min(a.value.rings.length, b.value.rings.length);\n  }\n\n  /**\n   * Returns an array containing the bridged rings associated with this  molecule.\n   *\n   * @returns {Ring[]} An array containing all bridged rings associated with this molecule.\n   */\n  getBridgedRings() {\n    let bridgedRings = Array();\n\n    for (var i = 0; i < this.rings.length; i++) {\n      if (this.rings[i].isBridged) {\n        bridgedRings.push(this.rings[i]);\n      }\n    }\n\n    return bridgedRings;\n  }\n\n  /**\n   * Returns an array containing all fused rings associated with this molecule.\n   *\n   * @returns {Ring[]} An array containing all fused rings associated with this molecule.\n   */\n  getFusedRings() {\n    let fusedRings = Array();\n\n    for (var i = 0; i < this.rings.length; i++) {\n      if (this.rings[i].isFused) {\n        fusedRings.push(this.rings[i]);\n      }\n    }\n\n    return fusedRings;\n  }\n\n  /**\n   * Returns an array containing all spiros associated with this molecule.\n   *\n   * @returns {Ring[]} An array containing all spiros associated with this molecule.\n   */\n  getSpiros() {\n    let spiros = Array();\n\n    for (var i = 0; i < this.rings.length; i++) {\n      if (this.rings[i].isSpiro) {\n        spiros.push(this.rings[i]);\n      }\n    }\n\n    return spiros;\n  }\n\n  /**\n   * Returns a string containing a semicolon and new-line separated list of ring properties: Id; Members Count; Neighbours Count; IsSpiro; IsFused; IsBridged; Ring Count (subrings of bridged rings)\n   *\n   * @returns {String} A string as described in the method description.\n   */\n  printRingInfo() {\n    let result = '';\n    for (var i = 0; i < this.rings.length; i++) {\n      const ring = this.rings[i];\n\n      result += ring.id + ';';\n      result += ring.members.length + ';';\n      result += ring.neighbours.length + ';';\n      result += ring.isSpiro ? 'true;' : 'false;'\n      result += ring.isFused ? 'true;' : 'false;'\n      result += ring.isBridged ? 'true;' : 'false;'\n      result += ring.rings.length + ';';\n      result += '\\n';\n    }\n\n    return result;\n  }\n\n  /**\n   * Rotates the drawing to make the widest dimension horizontal.\n   */\n  rotateDrawing() {\n    // Rotate the vertices to make the molecule align horizontally\n    // Find the longest distance\n    let a = 0;\n    let b = 0;\n    let maxDist = 0;\n    for (var i = 0; i < this.graph.vertices.length; i++) {\n      let vertexA = this.graph.vertices[i];\n\n      if (!vertexA.value.isDrawn) {\n        continue;\n      }\n\n      for (var j = i + 1; j < this.graph.vertices.length; j++) {\n        let vertexB = this.graph.vertices[j];\n\n        if (!vertexB.value.isDrawn) {\n          continue;\n        }\n\n        let dist = vertexA.position.distanceSq(vertexB.position);\n\n        if (dist > maxDist) {\n          maxDist = dist;\n          a = i;\n          b = j;\n        }\n      }\n    }\n\n    let angle = -Vector2.subtract(this.graph.vertices[a].position, this.graph.vertices[b].position).angle();\n\n    if (!isNaN(angle)) {\n      // Round to 30 degrees\n      let remainder = angle % 0.523599;\n\n      // Round either up or down in 30 degree steps\n      if (remainder < 0.2617995) {\n        angle = angle - remainder;\n      } else {\n        angle += 0.523599 - remainder;\n      }\n\n      // Finally, rotate everything\n      for (var i = 0; i < this.graph.vertices.length; i++) {\n        if (i === b) {\n          continue;\n        }\n\n        this.graph.vertices[i].position.rotateAround(angle, this.graph.vertices[b].position);\n      }\n\n      for (var i = 0; i < this.rings.length; i++) {\n        this.rings[i].center.rotateAround(angle, this.graph.vertices[b].position);\n      }\n    }\n  }\n\n  /**\n   * Returns the total overlap score of the current molecule.\n   *\n   * @returns {Number} The overlap score.\n   */\n  getTotalOverlapScore() {\n    return this.totalOverlapScore;\n  }\n\n  /**\n   * Returns the ring count of the current molecule.\n   *\n   * @returns {Number} The ring count.\n   */\n  getRingCount() {\n    return this.rings.length;\n  }\n\n  /**\n   * Checks whether or not the current molecule  a bridged ring.\n   *\n   * @returns {Boolean} A boolean indicating whether or not the current molecule  a bridged ring.\n   */\n  hasBridgedRing() {\n    return this.bridgedRing;\n  }\n\n  /**\n   * Returns the number of heavy atoms (non-hydrogen) in the current molecule.\n   *\n   * @returns {Number} The heavy atom count.\n   */\n  getHeavyAtomCount() {\n    let hac = 0;\n\n    for (var i = 0; i < this.graph.vertices.length; i++) {\n      if (this.graph.vertices[i].value.element !== 'H') {\n        hac++;\n      }\n    }\n\n    return hac;\n  }\n\n  /**\n   * Returns the molecular formula of the loaded molecule as a string.\n   * \n   * @returns {String} The molecular formula.\n   */\n  getMolecularFormula() {\n    let molecularFormula = '';\n    let counts = new Map();\n\n    // Initialize element count\n    for (var i = 0; i < this.graph.vertices.length; i++) {\n      let atom = this.graph.vertices[i].value;\n\n      if (counts.has(atom.element)) {\n        counts.set(atom.element, counts.get(atom.element) + 1);\n      } else {\n        counts.set(atom.element, 1);\n      }\n\n      // Hydrogens attached to a chiral center were added as vertices,\n      // those in non chiral brackets are added here\n      if (atom.bracket && !atom.bracket.chirality) {\n        if (counts.has('H')) {\n          counts.set('H', counts.get('H') + atom.bracket.hcount);\n        } else {\n          counts.set('H', atom.bracket.hcount);\n        }\n      }\n\n      // Add the implicit hydrogens according to valency, exclude\n      // bracket atoms as they were handled and always have the number\n      // of hydrogens specified explicitly\n      if (!atom.bracket) {\n        let nHydrogens = Atom.maxBonds[atom.element] - atom.bondCount;\n\n        if (atom.isPartOfAromaticRing) {\n          nHydrogens--;\n        }\n\n        if (counts.has('H')) {\n          counts.set('H', counts.get('H') + nHydrogens);\n        } else {\n          counts.set('H', nHydrogens);\n        }\n      }\n    }\n\n    if (counts.has('C')) {\n      let count = counts.get('C');\n      molecularFormula += 'C' + (count > 1 ? count : '');\n      counts.delete('C');\n    }\n\n    if (counts.has('H')) {\n      let count = counts.get('H');\n      molecularFormula += 'H' + (count > 1 ? count : '');\n      counts.delete('H');\n    }\n\n    let elements = Object.keys(Atom.atomicNumbers).sort();\n\n    elements.map(e => {\n      if (counts.has(e)) {\n        let count = counts.get(e);\n        molecularFormula += e + (count > 1 ? count : '');\n      }\n    });\n\n    return molecularFormula;\n  }\n\n  /**\n   * Returns the type of the ringbond (e.g. '=' for a double bond). The ringbond represents the break in a ring introduced when creating the MST. If the two vertices supplied as arguments are not part of a common ringbond, the method returns null.\n   *\n   * @param {Vertex} vertexA A vertex.\n   * @param {Vertex} vertexB A vertex.\n   * @returns {(String|null)} Returns the ringbond type or null, if the two supplied vertices are not connected by a ringbond.\n   */\n  getRingbondType(vertexA, vertexB) {\n    // Checks whether the two vertices are the ones connecting the ring\n    // and what the bond type should be.\n    if (vertexA.value.getRingbondCount() < 1 || vertexB.value.getRingbondCount() < 1) {\n      return null;\n    }\n\n    for (var i = 0; i < vertexA.value.ringbonds.length; i++) {\n      for (var j = 0; j < vertexB.value.ringbonds.length; j++) {\n        // if(i != j) continue;\n        if (vertexA.value.ringbonds[i].id === vertexB.value.ringbonds[j].id) {\n          // If the bonds are equal, it doesn't matter which bond is returned.\n          // if they are not equal, return the one that is not the default (\"-\")\n          if (vertexA.value.ringbonds[i].bondType === '-') {\n            return vertexB.value.ringbonds[j].bond;\n          } else {\n            return vertexA.value.ringbonds[i].bond;\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  initDraw(data, themeName, infoOnly) {\n    this.data = data;\n    this.infoOnly = infoOnly;\n\n    this.ringIdCounter = 0;\n    this.ringConnectionIdCounter = 0;\n\n    this.graph = new Graph(data, this.opts.isomeric);\n    this.rings = Array();\n    this.ringConnections = Array();\n\n    this.originalRings = Array();\n    this.originalRingConnections = Array();\n\n    this.bridgedRing = false;\n\n    // Reset those, in case the previous drawn SMILES had a dangling \\ or /\n    this.doubleBondConfigCount = null;\n    this.doubleBondConfig = null;\n\n    this.initRings();\n    this.initHydrogens();\n  }\n\n  processGraph() {\n    this.position();\n\n    // Restore the ring information (removes bridged rings and replaces them with the original, multiple, rings)\n    this.restoreRingInformation();\n\n    // Atoms bonded to the same ring atom\n    this.resolvePrimaryOverlaps();\n\n    let overlapScore = this.getOverlapScore();\n\n    this.totalOverlapScore = this.getOverlapScore().total;\n\n    for (var o = 0; o < this.opts.overlapResolutionIterations; o++) {\n      for (var i = 0; i < this.graph.edges.length; i++) {\n        let edge = this.graph.edges[i];\n        if (this.isEdgeRotatable(edge)) {\n          let subTreeDepthA = this.graph.getTreeDepth(edge.sourceId, edge.targetId);\n          let subTreeDepthB = this.graph.getTreeDepth(edge.targetId, edge.sourceId);\n\n          // Only rotate the shorter subtree\n          let a = edge.targetId;\n          let b = edge.sourceId;\n\n          if (subTreeDepthA > subTreeDepthB) {\n            a = edge.sourceId;\n            b = edge.targetId;\n          }\n\n          let subTreeOverlap = this.getSubtreeOverlapScore(b, a, overlapScore.vertexScores);\n          if (subTreeOverlap.value > this.opts.overlapSensitivity) {\n            let vertexA = this.graph.vertices[a];\n            let vertexB = this.graph.vertices[b];\n            let neighboursB = vertexB.getNeighbours(a);\n\n            if (neighboursB.length === 1) {\n              let neighbour = this.graph.vertices[neighboursB[0]];\n              let angle = neighbour.position.getRotateAwayFromAngle(vertexA.position, vertexB.position, MathHelper.toRad(120));\n\n              this.rotateSubtree(neighbour.id, vertexB.id, angle, vertexB.position);\n              // If the new overlap is bigger, undo change\n              let newTotalOverlapScore = this.getOverlapScore().total;\n\n              if (newTotalOverlapScore > this.totalOverlapScore) {\n                this.rotateSubtree(neighbour.id, vertexB.id, -angle, vertexB.position);\n              } else {\n                this.totalOverlapScore = newTotalOverlapScore;\n              }\n            } else if (neighboursB.length === 2) {\n              // Switch places / sides\n              // If vertex a is in a ring, do nothing\n              if (vertexB.value.rings.length !== 0 && vertexA.value.rings.length !== 0) {\n                continue;\n              }\n\n              let neighbourA = this.graph.vertices[neighboursB[0]];\n              let neighbourB = this.graph.vertices[neighboursB[1]];\n\n              if (neighbourA.value.rings.length === 1 && neighbourB.value.rings.length === 1) {\n                // Both neighbours in same ring. TODO: does this create problems with wedges? (up = down and vice versa?)\n                if (neighbourA.value.rings[0] !== neighbourB.value.rings[0]) {\n                  continue;\n                }\n                // TODO: Rotate circle\n              } else if (neighbourA.value.rings.length !== 0 || neighbourB.value.rings.length !== 0) {\n                continue;\n              } else {\n                let angleA = neighbourA.position.getRotateAwayFromAngle(vertexA.position, vertexB.position, MathHelper.toRad(120));\n                let angleB = neighbourB.position.getRotateAwayFromAngle(vertexA.position, vertexB.position, MathHelper.toRad(120));\n\n                this.rotateSubtree(neighbourA.id, vertexB.id, angleA, vertexB.position);\n                this.rotateSubtree(neighbourB.id, vertexB.id, angleB, vertexB.position);\n\n                let newTotalOverlapScore = this.getOverlapScore().total;\n\n                if (newTotalOverlapScore > this.totalOverlapScore) {\n                  this.rotateSubtree(neighbourA.id, vertexB.id, -angleA, vertexB.position);\n                  this.rotateSubtree(neighbourB.id, vertexB.id, -angleB, vertexB.position);\n                } else {\n                  this.totalOverlapScore = newTotalOverlapScore;\n                }\n              }\n            }\n\n            overlapScore = this.getOverlapScore();\n          }\n        }\n      }\n    }\n\n    this.resolveSecondaryOverlaps(overlapScore.scores);\n\n    if (this.opts.isomeric) {\n      this.annotateStereochemistry();\n    }\n\n    // Initialize pseudo elements or shortcuts\n    if (this.opts.compactDrawing && this.opts.atomVisualization === 'default') {\n      this.initPseudoElements();\n    }\n\n    this.rotateDrawing();\n  }\n\n  /**\n   * Initializes rings and ringbonds for the current molecule.\n   */\n  initRings() {\n    let openBonds = new Map();\n\n    // Close the open ring bonds (spanning tree -> graph)\n    for (var i = this.graph.vertices.length - 1; i >= 0; i--) {\n      let vertex = this.graph.vertices[i];\n\n      if (vertex.value.ringbonds.length === 0) {\n        continue;\n      }\n\n      for (var j = 0; j < vertex.value.ringbonds.length; j++) {\n        let ringbondId = vertex.value.ringbonds[j].id;\n        let ringbondBond = vertex.value.ringbonds[j].bond;\n\n        // If the other ringbond id has not been discovered,\n        // add it to the open bonds map and continue.\n        // if the other ringbond id has already been discovered,\n        // create a bond between the two atoms.\n        if (!openBonds.has(ringbondId)) {\n          openBonds.set(ringbondId, [vertex.id, ringbondBond]);\n        } else {\n          let sourceVertexId = vertex.id;\n          let targetVertexId = openBonds.get(ringbondId)[0];\n          let targetRingbondBond = openBonds.get(ringbondId)[1];\n          let edge = new Edge(sourceVertexId, targetVertexId, 1);\n          edge.setBondType(targetRingbondBond || ringbondBond || '-');\n          let edgeId = this.graph.addEdge(edge);\n          let targetVertex = this.graph.vertices[targetVertexId];\n\n          vertex.addRingbondChild(targetVertexId, j);\n          vertex.value.addNeighbouringElement(targetVertex.value.element);\n          targetVertex.addRingbondChild(sourceVertexId, j);\n          targetVertex.value.addNeighbouringElement(vertex.value.element);\n          vertex.edges.push(edgeId);\n          targetVertex.edges.push(edgeId);\n\n          openBonds.delete(ringbondId);\n        }\n      }\n    }\n\n    // Get the rings in the graph (the SSSR)\n    let rings = SSSR.getRings(this.graph, this.opts.experimentalSSSR);\n\n    if (rings === null) {\n      return;\n    }\n\n    for (var i = 0; i < rings.length; i++) {\n      let ringVertices = [...rings[i]];\n      let ringId = this.addRing(new Ring(ringVertices));\n\n      // Add the ring to the atoms\n      for (var j = 0; j < ringVertices.length; j++) {\n        this.graph.vertices[ringVertices[j]].value.rings.push(ringId);\n      }\n    }\n\n    // Find connection between rings\n    // Check for common vertices and create ring connections. This is a bit\n    // ugly, but the ringcount is always fairly low (< 100)\n    for (var i = 0; i < this.rings.length - 1; i++) {\n      for (var j = i + 1; j < this.rings.length; j++) {\n        let a = this.rings[i];\n        let b = this.rings[j];\n        let ringConnection = new RingConnection(a, b);\n\n        // If there are no vertices in the ring connection, then there\n        // is no ring connection\n        if (ringConnection.vertices.size > 0) {\n          this.addRingConnection(ringConnection);\n        }\n      }\n    }\n\n    // Add neighbours to the rings\n    for (var i = 0; i < this.rings.length; i++) {\n      let ring = this.rings[i];\n      ring.neighbours = RingConnection.getNeighbours(this.ringConnections, ring.id);\n    }\n\n    // Anchor the ring to one of it's members, so that the ring center will always\n    // be tied to a single vertex when doing repositionings\n    for (var i = 0; i < this.rings.length; i++) {\n      let ring = this.rings[i];\n      this.graph.vertices[ring.members[0]].value.addAnchoredRing(ring.id);\n    }\n\n    // Backup the ring information to restore after placing the bridged ring.\n    // This is needed in order to identify aromatic rings and stuff like this in\n    // rings that are member of the superring.\n    this.backupRingInformation();\n\n\n    // Replace rings contained by a larger bridged ring with a bridged ring\n    while (this.rings.length > 0) {\n      let id = -1;\n      for (var i = 0; i < this.rings.length; i++) {\n        let ring = this.rings[i];\n\n        if (this.isPartOfBridgedRing(ring.id) && !ring.isBridged) {\n          id = ring.id;\n        }\n      }\n\n      if (id === -1) {\n        break;\n      }\n\n      let ring = this.getRing(id);\n\n      let involvedRings = this.getBridgedRingRings(ring.id);\n\n      this.bridgedRing = true;\n      this.createBridgedRing(involvedRings, ring.members[0]);\n\n      // Remove the rings\n      for (var i = 0; i < involvedRings.length; i++) {\n        this.removeRing(involvedRings[i]);\n      }\n    }\n  }\n\n  initHydrogens() {\n    // Do not draw hydrogens except when they are connected to a stereocenter connected to two or more rings.\n    if (!this.opts.explicitHydrogens) {\n      for (var i = 0; i < this.graph.vertices.length; i++) {\n        let vertex = this.graph.vertices[i];\n\n        if (vertex.value.element !== 'H') {\n          continue;\n        }\n\n        // Hydrogens should have only one neighbour, so just take the first\n        // Also set hasHydrogen true on connected atom\n        let neighbour = this.graph.vertices[vertex.neighbours[0]];\n        neighbour.value.hasHydrogen = true;\n\n        if (!neighbour.value.isStereoCenter || neighbour.value.rings.length < 2 && !neighbour.value.bridgedRing ||\n          neighbour.value.bridgedRing && neighbour.value.originalRings.length < 2) {\n          vertex.value.isDrawn = false;\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns all rings connected by bridged bonds starting from the ring with the supplied ring id.\n   *\n   * @param {Number} ringId A ring id.\n   * @returns {Number[]} An array containing all ring ids of rings part of a bridged ring system.\n   */\n  getBridgedRingRings(ringId) {\n    let involvedRings = Array();\n    let that = this;\n\n    let recurse = function (r) {\n      let ring = that.getRing(r);\n\n      involvedRings.push(r);\n\n      for (var i = 0; i < ring.neighbours.length; i++) {\n        let n = ring.neighbours[i];\n\n        if (involvedRings.indexOf(n) === -1 &&\n          n !== r &&\n          RingConnection.isBridge(that.ringConnections, that.graph.vertices, r, n)) {\n          recurse(n);\n        }\n      }\n    };\n\n    recurse(ringId);\n\n    return ArrayHelper.unique(involvedRings);\n  }\n\n  /**\n   * Checks whether or not a ring is part of a bridged ring.\n   *\n   * @param {Number} ringId A ring id.\n   * @returns {Boolean} A boolean indicating whether or not the supplied ring (by id) is part of a bridged ring system.\n   */\n  isPartOfBridgedRing(ringId) {\n    for (var i = 0; i < this.ringConnections.length; i++) {\n      if (this.ringConnections[i].containsRing(ringId) &&\n        this.ringConnections[i].isBridge(this.graph.vertices)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Creates a bridged ring.\n   *\n   * @param {Number[]} ringIds An array of ids of rings involved in the bridged ring.\n   * @param {Number} sourceVertexId The vertex id to start the bridged ring discovery from.\n   * @returns {Ring} The bridged ring.\n   */\n  createBridgedRing(ringIds, sourceVertexId) {\n    let ringMembers = new Set();\n    let vertices = new Set();\n    let neighbours = new Set();\n\n    for (var i = 0; i < ringIds.length; i++) {\n      let ring = this.getRing(ringIds[i]);\n      ring.isPartOfBridged = true;\n\n      for (var j = 0; j < ring.members.length; j++) {\n        vertices.add(ring.members[j]);\n      }\n\n      for (var j = 0; j < ring.neighbours.length; j++) {\n        let id = ring.neighbours[j];\n\n        if (ringIds.indexOf(id) === -1) {\n          neighbours.add(ring.neighbours[j]);\n        }\n      }\n    }\n\n    // A vertex is part of the bridged ring if it only belongs to\n    // one of the rings (or to another ring\n    // which is not part of the bridged ring).\n    let leftovers = new Set();\n\n    for (let id of vertices) {\n      let vertex = this.graph.vertices[id];\n      let intersection = ArrayHelper.intersection(ringIds, vertex.value.rings);\n\n      if (vertex.value.rings.length === 1 || intersection.length === 1) {\n        ringMembers.add(vertex.id);\n      } else {\n        leftovers.add(vertex.id);\n      }\n    }\n\n    // Vertices can also be part of multiple rings and lay on the bridged ring,\n    // however, they have to have at least two neighbours that are not part of\n    // two rings\n    let tmp = Array();\n    let insideRing = Array();\n\n    for (let id of leftovers) {\n      let vertex = this.graph.vertices[id];\n      let onRing = false;\n\n      for (let j = 0; j < vertex.edges.length; j++) {\n        if (this.edgeRingCount(vertex.edges[j]) === 1) {\n          onRing = true;\n        }\n      }\n\n      if (onRing) {\n        vertex.value.isBridgeNode = true;\n        ringMembers.add(vertex.id);\n      } else {\n        vertex.value.isBridge = true;\n        ringMembers.add(vertex.id);\n      }\n    }\n\n    // Create the ring\n    let ring = new Ring([...ringMembers]);\n    this.addRing(ring);\n\n    ring.isBridged = true;\n    ring.neighbours = [...neighbours];\n\n    for (var i = 0; i < ringIds.length; i++) {\n      ring.rings.push(this.getRing(ringIds[i]).clone());\n    }\n\n    for (var i = 0; i < ring.members.length; i++) {\n      this.graph.vertices[ring.members[i]].value.bridgedRing = ring.id;\n    }\n\n    // Atoms inside the ring are no longer part of a ring but are now\n    // associated with the bridged ring\n    for (var i = 0; i < insideRing.length; i++) {\n      let vertex = this.graph.vertices[insideRing[i]];\n      vertex.value.rings = Array();\n    }\n\n    // Remove former rings from members of the bridged ring and add the bridged ring\n    for (let id of ringMembers) {\n      let vertex = this.graph.vertices[id];\n      vertex.value.rings = ArrayHelper.removeAll(vertex.value.rings, ringIds);\n      vertex.value.rings.push(ring.id);\n    }\n\n    // Remove all the ring connections no longer used\n    for (var i = 0; i < ringIds.length; i++) {\n      for (var j = i + 1; j < ringIds.length; j++) {\n        this.removeRingConnectionsBetween(ringIds[i], ringIds[j]);\n      }\n    }\n\n    // Update the ring connections and add this ring to the neighbours neighbours\n    for (let id of neighbours) {\n      let connections = this.getRingConnections(id, ringIds);\n\n      for (var j = 0; j < connections.length; j++) {\n        this.getRingConnection(connections[j]).updateOther(ring.id, id);\n      }\n\n      this.getRing(id).neighbours.push(ring.id);\n    }\n\n    return ring;\n  }\n\n  /**\n   * Checks whether or not two vertices are in the same ring.\n   *\n   * @param {Vertex} vertexA A vertex.\n   * @param {Vertex} vertexB A vertex.\n   * @returns {Boolean} A boolean indicating whether or not the two vertices are in the same ring.\n   */\n  areVerticesInSameRing(vertexA, vertexB) {\n    // This is a little bit lighter (without the array and push) than\n    // getCommonRings().length > 0\n    for (var i = 0; i < vertexA.value.rings.length; i++) {\n      for (var j = 0; j < vertexB.value.rings.length; j++) {\n        if (vertexA.value.rings[i] === vertexB.value.rings[j]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns an array of ring ids shared by both vertices.\n   *\n   * @param {Vertex} vertexA A vertex.\n   * @param {Vertex} vertexB A vertex.\n   * @returns {Number[]} An array of ids of rings shared by the two vertices.\n   */\n  getCommonRings(vertexA, vertexB) {\n    let commonRings = Array();\n\n    for (var i = 0; i < vertexA.value.rings.length; i++) {\n      for (var j = 0; j < vertexB.value.rings.length; j++) {\n        if (vertexA.value.rings[i] == vertexB.value.rings[j]) {\n          commonRings.push(vertexA.value.rings[i]);\n        }\n      }\n    }\n\n    return commonRings;\n  }\n\n  /**\n   * Returns the aromatic or largest ring shared by the two vertices.\n   *\n   * @param {Vertex} vertexA A vertex.\n   * @param {Vertex} vertexB A vertex.\n   * @returns {(Ring|null)} If an aromatic common ring exists, that ring, else the largest (non-aromatic) ring, else null.\n   */\n  getLargestOrAromaticCommonRing(vertexA, vertexB) {\n    let commonRings = this.getCommonRings(vertexA, vertexB);\n    let maxSize = 0;\n    let largestCommonRing = null;\n\n    for (var i = 0; i < commonRings.length; i++) {\n      let ring = this.getRing(commonRings[i]);\n      let size = ring.getSize();\n\n      if (ring.isBenzeneLike(this.graph.vertices)) {\n        return ring;\n      } else if (size > maxSize) {\n        maxSize = size;\n        largestCommonRing = ring;\n      }\n    }\n\n    return largestCommonRing;\n  }\n\n  /**\n   * Returns an array of vertices positioned at a specified location.\n   *\n   * @param {Vector2} position The position to search for vertices.\n   * @param {Number} radius The radius within to search.\n   * @param {Number} excludeVertexId A vertex id to be excluded from the search results.\n   * @returns {Number[]} An array containing vertex ids in a given location.\n   */\n  getVerticesAt(position, radius, excludeVertexId) {\n    let locals = Array();\n\n    for (var i = 0; i < this.graph.vertices.length; i++) {\n      let vertex = this.graph.vertices[i];\n\n      if (vertex.id === excludeVertexId || !vertex.positioned) {\n        continue;\n      }\n\n      let distance = position.distanceSq(vertex.position);\n\n      if (distance <= radius * radius) {\n        locals.push(vertex.id);\n      }\n    }\n\n    return locals;\n  }\n\n  /**\n   * Returns the closest vertex (connected as well as unconnected).\n   *\n   * @param {Vertex} vertex The vertex of which to find the closest other vertex.\n   * @returns {Vertex} The closest vertex.\n   */\n  getClosestVertex(vertex) {\n    let minDist = 99999;\n    let minVertex = null;\n\n    for (var i = 0; i < this.graph.vertices.length; i++) {\n      let v = this.graph.vertices[i];\n\n      if (v.id === vertex.id) {\n        continue;\n      }\n\n      let distSq = vertex.position.distanceSq(v.position);\n\n      if (distSq < minDist) {\n        minDist = distSq;\n        minVertex = v;\n      }\n    }\n\n    return minVertex;\n  }\n\n  /**\n   * Add a ring to this representation of a molecule.\n   *\n   * @param {Ring} ring A new ring.\n   * @returns {Number} The ring id of the new ring.\n   */\n  addRing(ring) {\n    ring.id = this.ringIdCounter++;\n    this.rings.push(ring);\n\n    return ring.id;\n  }\n\n  /**\n   * Removes a ring from the array of rings associated with the current molecule.\n   *\n   * @param {Number} ringId A ring id.\n   */\n  removeRing(ringId) {\n    this.rings = this.rings.filter(function (item) {\n      return item.id !== ringId;\n    });\n\n    // Also remove ring connections involving this ring\n    this.ringConnections = this.ringConnections.filter(function (item) {\n      return item.firstRingId !== ringId && item.secondRingId !== ringId;\n    });\n\n    // Remove the ring as neighbour of other rings\n    for (var i = 0; i < this.rings.length; i++) {\n      let r = this.rings[i];\n      r.neighbours = r.neighbours.filter(function (item) {\n        return item !== ringId;\n      });\n    }\n  }\n\n  /**\n   * Gets a ring object from the array of rings associated with the current molecule by its id. The ring id is not equal to the index, since rings can be added and removed when processing bridged rings.\n   *\n   * @param {Number} ringId A ring id.\n   * @returns {Ring} A ring associated with the current molecule.\n   */\n  getRing(ringId) {\n    for (var i = 0; i < this.rings.length; i++) {\n      if (this.rings[i].id == ringId) {\n        return this.rings[i];\n      }\n    }\n  }\n\n  /**\n   * Add a ring connection to this representation of a molecule.\n   *\n   * @param {RingConnection} ringConnection A new ringConnection.\n   * @returns {Number} The ring connection id of the new ring connection.\n   */\n  addRingConnection(ringConnection) {\n    ringConnection.id = this.ringConnectionIdCounter++;\n    this.ringConnections.push(ringConnection);\n\n    return ringConnection.id;\n  }\n\n  /**\n   * Removes a ring connection from the array of rings connections associated with the current molecule.\n   *\n   * @param {Number} ringConnectionId A ring connection id.\n   */\n  removeRingConnection(ringConnectionId) {\n    this.ringConnections = this.ringConnections.filter(function (item) {\n      return item.id !== ringConnectionId;\n    });\n  }\n\n  /**\n   * Removes all ring connections between two vertices.\n   *\n   * @param {Number} vertexIdA A vertex id.\n   * @param {Number} vertexIdB A vertex id.\n   */\n  removeRingConnectionsBetween(vertexIdA, vertexIdB) {\n    let toRemove = Array();\n    for (var i = 0; i < this.ringConnections.length; i++) {\n      let ringConnection = this.ringConnections[i];\n\n      if (ringConnection.firstRingId === vertexIdA && ringConnection.secondRingId === vertexIdB ||\n        ringConnection.firstRingId === vertexIdB && ringConnection.secondRingId === vertexIdA) {\n        toRemove.push(ringConnection.id);\n      }\n    }\n\n    for (var i = 0; i < toRemove.length; i++) {\n      this.removeRingConnection(toRemove[i]);\n    }\n  }\n\n  /**\n   * Get a ring connection with a given id.\n   * \n   * @param {Number} id \n   * @returns {RingConnection} The ring connection with the specified id.\n   */\n  getRingConnection(id) {\n    for (var i = 0; i < this.ringConnections.length; i++) {\n      if (this.ringConnections[i].id == id) {\n        return this.ringConnections[i];\n      }\n    }\n  }\n\n  /**\n   * Get the ring connections between a ring and a set of rings.\n   *\n   * @param {Number} ringId A ring id.\n   * @param {Number[]} ringIds An array of ring ids.\n   * @returns {Number[]} An array of ring connection ids.\n   */\n  getRingConnections(ringId, ringIds) {\n    let ringConnections = Array();\n\n    for (var i = 0; i < this.ringConnections.length; i++) {\n      let rc = this.ringConnections[i];\n\n      for (var j = 0; j < ringIds.length; j++) {\n        let id = ringIds[j];\n\n        if (rc.firstRingId === ringId && rc.secondRingId === id ||\n          rc.firstRingId === id && rc.secondRingId === ringId) {\n          ringConnections.push(rc.id);\n        }\n      }\n    }\n\n    return ringConnections;\n  }\n\n  /**\n   * Returns the overlap score of the current molecule based on its positioned vertices. The higher the score, the more overlaps occur in the structure drawing.\n   *\n   * @returns {Object} Returns the total overlap score and the overlap score of each vertex sorted by score (higher to lower). Example: { total: 99, scores: [ { id: 0, score: 22 }, ... ]  }\n   */\n  getOverlapScore() {\n    let total = 0.0;\n    let overlapScores = new Float32Array(this.graph.vertices.length);\n\n    for (var i = 0; i < this.graph.vertices.length; i++) {\n      overlapScores[i] = 0;\n    }\n\n    for (var i = 0; i < this.graph.vertices.length; i++) {\n      var j = this.graph.vertices.length;\n      while (--j > i) {\n        let a = this.graph.vertices[i];\n        let b = this.graph.vertices[j];\n\n        if (!a.value.isDrawn || !b.value.isDrawn) {\n          continue;\n        }\n\n        let dist = Vector2.subtract(a.position, b.position).lengthSq();\n\n        if (dist < this.opts.bondLengthSq) {\n          let weighted = (this.opts.bondLength - Math.sqrt(dist)) / this.opts.bondLength;\n          total += weighted;\n          overlapScores[i] += weighted;\n          overlapScores[j] += weighted;\n        }\n      }\n    }\n\n    let sortable = Array();\n\n    for (var i = 0; i < this.graph.vertices.length; i++) {\n      sortable.push({\n        id: i,\n        score: overlapScores[i]\n      });\n    }\n\n    sortable.sort(function (a, b) {\n      return b.score - a.score;\n    });\n\n    return {\n      total: total,\n      scores: sortable,\n      vertexScores: overlapScores\n    };\n  }\n\n  /**\n   * When drawing a double bond, choose the side to place the double bond. E.g. a double bond should always been drawn inside a ring.\n   *\n   * @param {Vertex} vertexA A vertex.\n   * @param {Vertex} vertexB A vertex.\n   * @param {Vector2[]} sides An array containing the two normals of the line spanned by the two provided vertices.\n   * @returns {Object} Returns an object containing the following information: {\n          totalSideCount: Counts the sides of each vertex in the molecule, is an array [ a, b ],\n          totalPosition: Same as position, but based on entire molecule,\n          sideCount: Counts the sides of each neighbour, is an array [ a, b ],\n          position: which side to position the second bond, is 0 or 1, represents the index in the normal array. This is based on only the neighbours\n          anCount: the number of neighbours of vertexA,\n          bnCount: the number of neighbours of vertexB\n      }\n   */\n  chooseSide(vertexA, vertexB, sides) {\n    // Check which side has more vertices\n    // Get all the vertices connected to the both ends\n    let an = vertexA.getNeighbours(vertexB.id);\n    let bn = vertexB.getNeighbours(vertexA.id);\n    let anCount = an.length;\n    let bnCount = bn.length;\n\n    // All vertices connected to the edge vertexA to vertexB\n    let tn = ArrayHelper.merge(an, bn);\n\n    // Only considering the connected vertices\n    let sideCount = [0, 0];\n\n    for (var i = 0; i < tn.length; i++) {\n      let v = this.graph.vertices[tn[i]].position;\n\n      if (v.sameSideAs(vertexA.position, vertexB.position, sides[0])) {\n        sideCount[0]++;\n      } else {\n        sideCount[1]++;\n      }\n    }\n\n    // Considering all vertices in the graph, this is to resolve ties\n    // from the above side counts\n    let totalSideCount = [0, 0];\n\n    for (var i = 0; i < this.graph.vertices.length; i++) {\n      let v = this.graph.vertices[i].position;\n\n      if (v.sameSideAs(vertexA.position, vertexB.position, sides[0])) {\n        totalSideCount[0]++;\n      } else {\n        totalSideCount[1]++;\n      }\n    }\n\n    return {\n      totalSideCount: totalSideCount,\n      totalPosition: totalSideCount[0] > totalSideCount[1] ? 0 : 1,\n      sideCount: sideCount,\n      position: sideCount[0] > sideCount[1] ? 0 : 1,\n      anCount: anCount,\n      bnCount: bnCount\n    };\n  }\n\n  /**\n   * Sets the center for a ring.\n   *\n   * @param {Ring} ring A ring.\n   */\n  setRingCenter(ring) {\n    let ringSize = ring.getSize();\n    let total = new Vector2(0, 0);\n\n    for (var i = 0; i < ringSize; i++) {\n      total.add(this.graph.vertices[ring.members[i]].position);\n    }\n\n    ring.center = total.divide(ringSize);\n  }\n\n  /**\n   * Gets the center of a ring contained within a bridged ring and containing a given vertex.\n   *\n   * @param {Ring} ring A bridged ring.\n   * @param {Vertex} vertex A vertex.\n   * @returns {Vector2} The center of the subring that containing the vertex.\n   */\n  getSubringCenter(ring, vertex) {\n    let rings = vertex.value.originalRings;\n    let center = ring.center;\n    let smallest = Number.MAX_VALUE;\n\n    // Always get the smallest ring.\n    for (var i = 0; i < rings.length; i++) {\n      for (var j = 0; j < ring.rings.length; j++) {\n        if (rings[i] === ring.rings[j].id) {\n          if (ring.rings[j].getSize() < smallest) {\n            center = ring.rings[j].center;\n            smallest = ring.rings[j].getSize();\n          }\n        }\n      }\n    }\n\n    return center;\n  }\n\n  /**\n   * Draw the actual edges as bonds to the canvas.\n   *\n   * @param {Boolean} debug A boolean indicating whether or not to draw debug helpers.\n   */\n  drawEdges(debug) {\n    let that = this;\n    let drawn = Array(this.graph.edges.length);\n    drawn.fill(false);\n\n    this.graph.traverseBF(0, function (vertex) {\n      let edges = that.graph.getEdges(vertex.id);\n      for (var i = 0; i < edges.length; i++) {\n        let edgeId = edges[i];\n        if (!drawn[edgeId]) {\n          drawn[edgeId] = true;\n          that.drawEdge(edgeId, debug);\n        }\n      }\n    });\n\n    // Draw ring for implicitly defined aromatic rings\n    if (!this.bridgedRing) {\n      for (var i = 0; i < this.rings.length; i++) {\n        let ring = this.rings[i];\n\n        if (this.isRingAromatic(ring)) {\n          this.canvasWrapper.drawAromaticityRing(ring);\n        }\n      }\n    }\n  }\n\n  /**\n   * Draw the an edge as a bonds to the canvas.\n   *\n   * @param {Number} edgeId An edge id.\n   * @param {Boolean} debug A boolean indicating whether or not to draw debug helpers.\n   */\n  drawEdge(edgeId, debug) {\n    let that = this;\n    let edge = this.graph.edges[edgeId];\n    let vertexA = this.graph.vertices[edge.sourceId];\n    let vertexB = this.graph.vertices[edge.targetId];\n    let elementA = vertexA.value.element;\n    let elementB = vertexB.value.element;\n\n    if ((!vertexA.value.isDrawn || !vertexB.value.isDrawn) && this.opts.atomVisualization === 'default') {\n      return;\n    }\n\n    let a = vertexA.position;\n    let b = vertexB.position;\n    let normals = this.getEdgeNormals(edge);\n\n    // Create a point on each side of the line\n    let sides = ArrayHelper.clone(normals);\n\n    sides[0].multiplyScalar(10).add(a);\n    sides[1].multiplyScalar(10).add(a);\n\n    if (edge.bondType === '=' || this.getRingbondType(vertexA, vertexB) === '=' ||\n      (edge.isPartOfAromaticRing && this.bridgedRing)) {\n      // Always draw double bonds inside the ring\n      let inRing = this.areVerticesInSameRing(vertexA, vertexB);\n      let s = this.chooseSide(vertexA, vertexB, sides);\n\n      if (inRing) {\n        // Always draw double bonds inside a ring\n        // if the bond is shared by two rings, it is drawn in the larger\n        // problem: smaller ring is aromatic, bond is still drawn in larger -> fix this\n        let lcr = this.getLargestOrAromaticCommonRing(vertexA, vertexB);\n        let center = lcr.center;\n\n        normals[0].multiplyScalar(that.opts.bondSpacing);\n        normals[1].multiplyScalar(that.opts.bondSpacing);\n\n        // Choose the normal that is on the same side as the center\n        let line = null;\n\n        if (center.sameSideAs(vertexA.position, vertexB.position, Vector2.add(a, normals[0]))) {\n          line = new Line(Vector2.add(a, normals[0]), Vector2.add(b, normals[0]), elementA, elementB);\n        } else {\n          line = new Line(Vector2.add(a, normals[1]), Vector2.add(b, normals[1]), elementA, elementB);\n        }\n\n        line.shorten(this.opts.bondLength - this.opts.shortBondLength * this.opts.bondLength);\n\n        // The shortened edge\n        if (edge.isPartOfAromaticRing) {\n          this.canvasWrapper.drawLine(line, true);\n        } else {\n          this.canvasWrapper.drawLine(line);\n        }\n\n        // The normal edge\n        this.canvasWrapper.drawLine(new Line(a, b, elementA, elementB));\n      } else if (edge.center || vertexA.isTerminal() && vertexB.isTerminal()) {\n        normals[0].multiplyScalar(that.opts.halfBondSpacing);\n        normals[1].multiplyScalar(that.opts.halfBondSpacing);\n\n        let lineA = new Line(Vector2.add(a, normals[0]), Vector2.add(b, normals[0]), elementA, elementB);\n        let lineB = new Line(Vector2.add(a, normals[1]), Vector2.add(b, normals[1]), elementA, elementB);\n\n        this.canvasWrapper.drawLine(lineA);\n        this.canvasWrapper.drawLine(lineB);\n      } else if (s.anCount == 0 && s.bnCount > 1 || s.bnCount == 0 && s.anCount > 1) {\n        // Both lines are the same length here\n        // Add the spacing to the edges (which are of unit length)\n        normals[0].multiplyScalar(that.opts.halfBondSpacing);\n        normals[1].multiplyScalar(that.opts.halfBondSpacing);\n\n        let lineA = new Line(Vector2.add(a, normals[0]), Vector2.add(b, normals[0]), elementA, elementB);\n        let lineB = new Line(Vector2.add(a, normals[1]), Vector2.add(b, normals[1]), elementA, elementB);\n\n        this.canvasWrapper.drawLine(lineA);\n        this.canvasWrapper.drawLine(lineB);\n      } else if (s.sideCount[0] > s.sideCount[1]) {\n        normals[0].multiplyScalar(that.opts.bondSpacing);\n        normals[1].multiplyScalar(that.opts.bondSpacing);\n\n        let line = new Line(Vector2.add(a, normals[0]), Vector2.add(b, normals[0]), elementA, elementB);\n\n        line.shorten(this.opts.bondLength - this.opts.shortBondLength * this.opts.bondLength);\n        this.canvasWrapper.drawLine(line);\n        this.canvasWrapper.drawLine(new Line(a, b, elementA, elementB));\n      } else if (s.sideCount[0] < s.sideCount[1]) {\n        normals[0].multiplyScalar(that.opts.bondSpacing);\n        normals[1].multiplyScalar(that.opts.bondSpacing);\n\n        let line = new Line(Vector2.add(a, normals[1]), Vector2.add(b, normals[1]), elementA, elementB);\n\n        line.shorten(this.opts.bondLength - this.opts.shortBondLength * this.opts.bondLength);\n        this.canvasWrapper.drawLine(line);\n        this.canvasWrapper.drawLine(new Line(a, b, elementA, elementB));\n      } else if (s.totalSideCount[0] > s.totalSideCount[1]) {\n        normals[0].multiplyScalar(that.opts.bondSpacing);\n        normals[1].multiplyScalar(that.opts.bondSpacing);\n\n        let line = new Line(Vector2.add(a, normals[0]), Vector2.add(b, normals[0]), elementA, elementB);\n\n        line.shorten(this.opts.bondLength - this.opts.shortBondLength * this.opts.bondLength);\n        this.canvasWrapper.drawLine(line);\n        this.canvasWrapper.drawLine(new Line(a, b, elementA, elementB));\n      } else if (s.totalSideCount[0] <= s.totalSideCount[1]) {\n        normals[0].multiplyScalar(that.opts.bondSpacing);\n        normals[1].multiplyScalar(that.opts.bondSpacing);\n\n        let line = new Line(Vector2.add(a, normals[1]), Vector2.add(b, normals[1]), elementA, elementB);\n\n        line.shorten(this.opts.bondLength - this.opts.shortBondLength * this.opts.bondLength);\n        this.canvasWrapper.drawLine(line);\n        this.canvasWrapper.drawLine(new Line(a, b, elementA, elementB));\n      } else {\n\n      }\n    } else if (edge.bondType === '#') {\n      normals[0].multiplyScalar(that.opts.bondSpacing / 1.5);\n      normals[1].multiplyScalar(that.opts.bondSpacing / 1.5);\n\n      let lineA = new Line(Vector2.add(a, normals[0]), Vector2.add(b, normals[0]), elementA, elementB);\n      let lineB = new Line(Vector2.add(a, normals[1]), Vector2.add(b, normals[1]), elementA, elementB);\n\n      this.canvasWrapper.drawLine(lineA);\n      this.canvasWrapper.drawLine(lineB);\n\n      this.canvasWrapper.drawLine(new Line(a, b, elementA, elementB));\n    } else if (edge.bondType === '.') {\n      // TODO: Something... maybe... version 2?\n    } else {\n      let isChiralCenterA = vertexA.value.isStereoCenter;\n      let isChiralCenterB = vertexB.value.isStereoCenter;\n\n      if (edge.wedge === 'up') {\n        this.canvasWrapper.drawWedge(new Line(a, b, elementA, elementB, isChiralCenterA, isChiralCenterB));\n      } else if (edge.wedge === 'down') {\n        this.canvasWrapper.drawDashedWedge(new Line(a, b, elementA, elementB, isChiralCenterA, isChiralCenterB));\n      } else {\n        this.canvasWrapper.drawLine(new Line(a, b, elementA, elementB, isChiralCenterA, isChiralCenterB));\n      }\n    }\n\n    if (debug) {\n      let midpoint = Vector2.midpoint(a, b);\n      this.canvasWrapper.drawDebugText(midpoint.x, midpoint.y, 'e: ' + edgeId);\n    }\n  }\n\n  /**\n   * Draws the vertices representing atoms to the canvas.\n   *\n   * @param {Boolean} debug A boolean indicating whether or not to draw debug messages to the canvas.\n   */\n  drawVertices(debug) {\n    var i = this.graph.vertices.length;\n    for (var i = 0; i < this.graph.vertices.length; i++) {\n      let vertex = this.graph.vertices[i];\n      let atom = vertex.value;\n      let charge = 0;\n      let isotope = 0;\n      let bondCount = vertex.value.bondCount;\n      let element = atom.element;\n      let hydrogens = Atom.maxBonds[element] - bondCount;\n      let dir = vertex.getTextDirection(this.graph.vertices);\n      let isTerminal = this.opts.terminalCarbons || element !== 'C' || atom.hasAttachedPseudoElements ? vertex.isTerminal() : false;\n      let isCarbon = atom.element === 'C';\n\n      // This is a HACK to remove all hydrogens from nitrogens in aromatic rings, as this\n      // should be the most common state. This has to be fixed by kekulization\n      if (atom.element === 'N' && atom.isPartOfAromaticRing) {\n        hydrogens = 0;\n      }\n\n      if (atom.bracket) {\n        hydrogens = atom.bracket.hcount;\n        charge = atom.bracket.charge;\n        isotope = atom.bracket.isotope;\n      }\n\n      if (this.opts.atomVisualization === 'allballs') {\n        this.canvasWrapper.drawBall(vertex.position.x, vertex.position.y, element);\n      } else if ((atom.isDrawn && (!isCarbon || atom.drawExplicit || isTerminal || atom.hasAttachedPseudoElements)) || this.graph.vertices.length === 1) {\n        if (this.opts.atomVisualization === 'default') {\n          this.canvasWrapper.drawText(vertex.position.x, vertex.position.y,\n            element, hydrogens, dir, isTerminal, charge, isotope, atom.getAttachedPseudoElements());\n        } else if (this.opts.atomVisualization === 'balls') {\n          this.canvasWrapper.drawBall(vertex.position.x, vertex.position.y, element);\n        }\n      } else if (vertex.getNeighbourCount() === 2 && vertex.forcePositioned == true) {\n        // If there is a carbon which bonds are in a straight line, draw a dot\n        let a = this.graph.vertices[vertex.neighbours[0]].position;\n        let b = this.graph.vertices[vertex.neighbours[1]].position;\n        let angle = Vector2.threePointangle(vertex.position, a, b);\n\n        if (Math.abs(Math.PI - angle) < 0.1) {\n          this.canvasWrapper.drawPoint(vertex.position.x, vertex.position.y, element);\n        }\n      }\n\n      if (debug) {\n        let value = 'v: ' + vertex.id + ' ' + ArrayHelper.print(atom.ringbonds);\n        this.canvasWrapper.drawDebugText(vertex.position.x, vertex.position.y, value);\n      } else {\n        // this.canvasWrapper.drawDebugText(vertex.position.x, vertex.position.y, vertex.value.chirality);\n      }\n    }\n\n    // Draw the ring centers for debug purposes\n    if (this.opts.debug) {\n      for (var i = 0; i < this.rings.length; i++) {\n        let center = this.rings[i].center;\n        this.canvasWrapper.drawDebugPoint(center.x, center.y, 'r: ' + this.rings[i].id);\n      }\n    }\n  }\n\n  /**\n   * Position the vertices according to their bonds and properties.\n   */\n  position() {\n    let startVertex = null;\n\n    // Always start drawing at a bridged ring if there is one\n    // If not, start with a ring\n    // else, start with 0\n    for (var i = 0; i < this.graph.vertices.length; i++) {\n      if (this.graph.vertices[i].value.bridgedRing !== null) {\n        startVertex = this.graph.vertices[i];\n        break;\n      }\n    }\n\n    for (var i = 0; i < this.rings.length; i++) {\n      if (this.rings[i].isBridged) {\n        startVertex = this.graph.vertices[this.rings[i].members[0]];\n      }\n    }\n\n    if (this.rings.length > 0 && startVertex === null) {\n      startVertex = this.graph.vertices[this.rings[0].members[0]];\n    }\n\n    if (startVertex === null) {\n      startVertex = this.graph.vertices[0];\n    }\n\n    this.createNextBond(startVertex, null, 0.0);\n  }\n\n  /**\n   * Stores the current information associated with rings.\n   */\n  backupRingInformation() {\n    this.originalRings = Array();\n    this.originalRingConnections = Array();\n\n    for (var i = 0; i < this.rings.length; i++) {\n      this.originalRings.push(this.rings[i]);\n    }\n\n    for (var i = 0; i < this.ringConnections.length; i++) {\n      this.originalRingConnections.push(this.ringConnections[i]);\n    }\n\n    for (var i = 0; i < this.graph.vertices.length; i++) {\n      this.graph.vertices[i].value.backupRings();\n    }\n  }\n\n  /**\n   * Restores the most recently backed up information associated with rings.\n   */\n  restoreRingInformation() {\n    // Get the subring centers from the bridged rings\n    let bridgedRings = this.getBridgedRings();\n\n    this.rings = Array();\n    this.ringConnections = Array();\n\n    for (var i = 0; i < bridgedRings.length; i++) {\n      let bridgedRing = bridgedRings[i];\n\n      for (var j = 0; j < bridgedRing.rings.length; j++) {\n        let ring = bridgedRing.rings[j];\n        this.originalRings[ring.id].center = ring.center;\n      }\n    }\n\n    for (var i = 0; i < this.originalRings.length; i++) {\n      this.rings.push(this.originalRings[i]);\n    }\n\n    for (var i = 0; i < this.originalRingConnections.length; i++) {\n      this.ringConnections.push(this.originalRingConnections[i]);\n    }\n\n    for (var i = 0; i < this.graph.vertices.length; i++) {\n      this.graph.vertices[i].value.restoreRings();\n    }\n  }\n\n  // TODO: This needs some cleaning up\n\n  /**\n   * Creates a new ring, that is, positiones all the vertices inside a ring.\n   *\n   * @param {Ring} ring The ring to position.\n   * @param {(Vector2|null)} [center=null] The center of the ring to be created.\n   * @param {(Vertex|null)} [startVertex=null] The first vertex to be positioned inside the ring.\n   * @param {(Vertex|null)} [previousVertex=null] The last vertex that was positioned.\n   * @param {Boolean} [previousVertex=false] A boolean indicating whether or not this ring was force positioned already - this is needed after force layouting a ring, in order to draw rings connected to it.\n   */\n  createRing(ring, center = null, startVertex = null, previousVertex = null) {\n    if (ring.positioned) {\n      return;\n    }\n\n    center = center ? center : new Vector2(0, 0);\n\n    let orderedNeighbours = ring.getOrderedNeighbours(this.ringConnections);\n    let startingAngle = startVertex ? Vector2.subtract(startVertex.position, center).angle() : 0;\n\n    let radius = MathHelper.polyCircumradius(this.opts.bondLength, ring.getSize());\n    let angle = MathHelper.centralAngle(ring.getSize());\n\n    ring.centralAngle = angle;\n\n    let a = startingAngle;\n    let that = this;\n    let startVertexId = (startVertex) ? startVertex.id : null;\n\n    if (ring.members.indexOf(startVertexId) === -1) {\n      if (startVertex) {\n        startVertex.positioned = false;\n      }\n\n      startVertexId = ring.members[0];\n    }\n\n    // If the ring is bridged, then draw the vertices inside the ring\n    // using a force based approach\n    if (ring.isBridged) {\n      this.graph.kkLayout(ring.members.slice(), center, startVertex.id, ring, this.opts.bondLength,\n        this.opts.kkThreshold, this.opts.kkInnerThreshold, this.opts.kkMaxIteration,\n        this.opts.kkMaxInnerIteration, this.opts.kkMaxEnergy);\n      ring.positioned = true;\n\n      // Update the center of the bridged ring\n      this.setRingCenter(ring);\n      center = ring.center;\n\n      // Setting the centers for the subrings\n      for (var i = 0; i < ring.rings.length; i++) {\n        this.setRingCenter(ring.rings[i]);\n      }\n    } else {\n      ring.eachMember(this.graph.vertices, function (v) {\n        let vertex = that.graph.vertices[v];\n\n        if (!vertex.positioned) {\n          vertex.setPosition(center.x + Math.cos(a) * radius, center.y + Math.sin(a) * radius);\n        }\n\n        a += angle;\n\n        if (!ring.isBridged || ring.rings.length < 3) {\n          vertex.angle = a;\n          vertex.positioned = true;\n        }\n      }, startVertexId, (previousVertex) ? previousVertex.id : null);\n    }\n\n    ring.positioned = true;\n    ring.center = center;\n\n    // Draw neighbours in decreasing order of connectivity\n    for (var i = 0; i < orderedNeighbours.length; i++) {\n      let neighbour = this.getRing(orderedNeighbours[i].neighbour);\n\n      if (neighbour.positioned) {\n        continue;\n      }\n\n      let vertices = RingConnection.getVertices(this.ringConnections, ring.id, neighbour.id);\n\n      if (vertices.length === 2) {\n        // This ring is a fused ring\n        ring.isFused = true;\n        neighbour.isFused = true;\n\n        let vertexA = this.graph.vertices[vertices[0]];\n        let vertexB = this.graph.vertices[vertices[1]];\n\n        // Get middle between vertex A and B\n        let midpoint = Vector2.midpoint(vertexA.position, vertexB.position);\n\n        // Get the normals to the line between A and B\n        let normals = Vector2.normals(vertexA.position, vertexB.position);\n\n        // Normalize the normals\n        normals[0].normalize();\n        normals[1].normalize();\n\n        // Set length from middle of side to center (the apothem)\n        let r = MathHelper.polyCircumradius(this.opts.bondLength, neighbour.getSize());\n        let apothem = MathHelper.apothem(r, neighbour.getSize());\n\n        normals[0].multiplyScalar(apothem).add(midpoint);\n        normals[1].multiplyScalar(apothem).add(midpoint);\n\n        // Pick the normal which results in a larger distance to the previous center\n        // Also check whether it's inside another ring\n        let nextCenter = normals[0];\n        if (Vector2.subtract(center, normals[1]).lengthSq() > Vector2.subtract(center, normals[0]).lengthSq()) {\n          nextCenter = normals[1];\n        }\n\n        // Get the vertex (A or B) which is in clock-wise direction of the other\n        let posA = Vector2.subtract(vertexA.position, nextCenter);\n        let posB = Vector2.subtract(vertexB.position, nextCenter);\n\n        if (posA.clockwise(posB) === -1) {\n          if (!neighbour.positioned) {\n            this.createRing(neighbour, nextCenter, vertexA, vertexB);\n          }\n        } else {\n          if (!neighbour.positioned) {\n            this.createRing(neighbour, nextCenter, vertexB, vertexA);\n          }\n        }\n      } else if (vertices.length === 1) {\n        // This ring is a spiro\n        ring.isSpiro = true;\n        neighbour.isSpiro = true;\n\n        let vertexA = this.graph.vertices[vertices[0]];\n\n        // Get the vector pointing from the shared vertex to the new centpositioner\n        let nextCenter = Vector2.subtract(center, vertexA.position);\n\n        nextCenter.invert();\n        nextCenter.normalize();\n\n        // Get the distance from the vertex to the center\n        let r = MathHelper.polyCircumradius(this.opts.bondLength, neighbour.getSize());\n\n        nextCenter.multiplyScalar(r);\n        nextCenter.add(vertexA.position);\n\n        if (!neighbour.positioned) {\n          this.createRing(neighbour, nextCenter, vertexA);\n        }\n      }\n    }\n\n    // Next, draw atoms that are not part of a ring that are directly attached to this ring\n    for (var i = 0; i < ring.members.length; i++) {\n      let ringMember = this.graph.vertices[ring.members[i]];\n      let ringMemberNeighbours = ringMember.neighbours;\n\n      // If there are multiple, the ovlerap will be resolved in the appropriate step\n      for (var j = 0; j < ringMemberNeighbours.length; j++) {\n        let v = this.graph.vertices[ringMemberNeighbours[j]];\n\n        if (v.positioned) {\n          continue;\n        }\n\n        v.value.isConnectedToRing = true;\n        this.createNextBond(v, ringMember, 0.0);\n      }\n    }\n  }\n\n  /**\n   * Rotate an entire subtree by an angle around a center.\n   *\n   * @param {Number} vertexId A vertex id (the root of the sub-tree).\n   * @param {Number} parentVertexId A vertex id in the previous direction of the subtree that is to rotate.\n   * @param {Number} angle An angle in randians.\n   * @param {Vector2} center The rotational center.\n   */\n  rotateSubtree(vertexId, parentVertexId, angle, center) {\n    let that = this;\n\n    this.graph.traverseTree(vertexId, parentVertexId, function (vertex) {\n      vertex.position.rotateAround(angle, center);\n\n      for (var i = 0; i < vertex.value.anchoredRings.length; i++) {\n        let ring = that.rings[vertex.value.anchoredRings[i]];\n\n        if (ring) {\n          ring.center.rotateAround(angle, center);\n        }\n      }\n    });\n  }\n\n  /**\n   * Gets the overlap score of a subtree.\n   *\n   * @param {Number} vertexId A vertex id (the root of the sub-tree).\n   * @param {Number} parentVertexId A vertex id in the previous direction of the subtree.\n   * @param {Number[]} vertexOverlapScores An array containing the vertex overlap scores indexed by vertex id.\n   * @returns {Object} An object containing the total overlap score and the center of mass of the subtree weighted by overlap score { value: 0.2, center: new Vector2() }.\n   */\n  getSubtreeOverlapScore(vertexId, parentVertexId, vertexOverlapScores) {\n    let that = this;\n    let score = 0;\n    let center = new Vector2(0, 0);\n    let count = 0;\n\n    this.graph.traverseTree(vertexId, parentVertexId, function (vertex) {\n      if (!vertex.value.isDrawn) {\n        return;\n      }\n\n      let s = vertexOverlapScores[vertex.id];\n      if (s > that.opts.overlapSensitivity) {\n        score += s;\n        count++;\n      }\n\n      let position = that.graph.vertices[vertex.id].position.clone();\n      position.multiplyScalar(s)\n      center.add(position);\n    });\n\n    center.divide(score);\n\n    return {\n      value: score / count,\n      center: center\n    };\n  }\n\n  /**\n   * Returns the current (positioned vertices so far) center of mass.\n   * \n   * @returns {Vector2} The current center of mass.\n   */\n  getCurrentCenterOfMass() {\n    let total = new Vector2(0, 0);\n    let count = 0;\n\n    for (var i = 0; i < this.graph.vertices.length; i++) {\n      let vertex = this.graph.vertices[i];\n\n      if (vertex.positioned) {\n        total.add(vertex.position);\n        count++;\n      }\n    }\n\n    return total.divide(count);\n  }\n\n  /**\n   * Returns the current (positioned vertices so far) center of mass in the neighbourhood of a given position.\n   *\n   * @param {Vector2} vec The point at which to look for neighbours.\n   * @param {Number} [r=currentBondLength*2.0] The radius of vertices to include.\n   * @returns {Vector2} The current center of mass.\n   */\n  getCurrentCenterOfMassInNeigbourhood(vec, r = this.opts.bondLength * 2.0) {\n    let total = new Vector2(0, 0);\n    let count = 0;\n    let rSq = r * r;\n\n    for (var i = 0; i < this.graph.vertices.length; i++) {\n      let vertex = this.graph.vertices[i];\n\n      if (vertex.positioned && vec.distanceSq(vertex.position) < rSq) {\n        total.add(vertex.position);\n        count++;\n      }\n    }\n\n    return total.divide(count);\n  }\n\n  /**\n   * Resolve primary (exact) overlaps, such as two vertices that are connected to the same ring vertex.\n   */\n  resolvePrimaryOverlaps() {\n    let overlaps = Array();\n    let done = Array(this.graph.vertices.length);\n\n    // Looking for overlaps created by two bonds coming out of a ring atom, which both point straight\n    // away from the ring and are thus perfectly overlapping.\n    for (var i = 0; i < this.rings.length; i++) {\n      let ring = this.rings[i];\n\n      for (var j = 0; j < ring.members.length; j++) {\n        let vertex = this.graph.vertices[ring.members[j]];\n\n        if (done[vertex.id]) {\n          continue;\n        }\n\n        done[vertex.id] = true;\n\n        let nonRingNeighbours = this.getNonRingNeighbours(vertex.id);\n\n        if (nonRingNeighbours.length > 1) {\n          // Look for rings where there are atoms with two bonds outside the ring (overlaps)\n          let rings = Array();\n\n          for (var k = 0; k < vertex.value.rings.length; k++) {\n            rings.push(vertex.value.rings[k]);\n          }\n\n          overlaps.push({\n            common: vertex,\n            rings: rings,\n            vertices: nonRingNeighbours\n          });\n        } else if (nonRingNeighbours.length === 1 && vertex.value.rings.length === 2) {\n          // Look for bonds coming out of joined rings to adjust the angle, an example is: C1=CC(=CC=C1)[C@]12SCCN1CC1=CC=CC=C21\n          // where the angle has to be adjusted to account for fused ring\n          let rings = Array();\n\n          for (var k = 0; k < vertex.value.rings.length; k++) {\n            rings.push(vertex.value.rings[k]);\n          }\n\n          overlaps.push({\n            common: vertex,\n            rings: rings,\n            vertices: nonRingNeighbours\n          });\n        }\n      }\n    }\n\n    for (var i = 0; i < overlaps.length; i++) {\n      let overlap = overlaps[i];\n\n      if (overlap.vertices.length === 2) {\n        let a = overlap.vertices[0];\n        let b = overlap.vertices[1];\n\n        if (!a.value.isDrawn || !b.value.isDrawn) {\n          continue;\n        }\n\n        let angle = (2 * Math.PI - this.getRing(overlap.rings[0]).getAngle()) / 6.0;\n\n        this.rotateSubtree(a.id, overlap.common.id, angle, overlap.common.position);\n        this.rotateSubtree(b.id, overlap.common.id, -angle, overlap.common.position);\n\n        // Decide which way to rotate the vertices depending on the effect it has on the overlap score\n        let overlapScore = this.getOverlapScore();\n        let subTreeOverlapA = this.getSubtreeOverlapScore(a.id, overlap.common.id, overlapScore.vertexScores);\n        let subTreeOverlapB = this.getSubtreeOverlapScore(b.id, overlap.common.id, overlapScore.vertexScores);\n        let total = subTreeOverlapA.value + subTreeOverlapB.value;\n\n        this.rotateSubtree(a.id, overlap.common.id, -2.0 * angle, overlap.common.position);\n        this.rotateSubtree(b.id, overlap.common.id, 2.0 * angle, overlap.common.position);\n\n        overlapScore = this.getOverlapScore();\n        subTreeOverlapA = this.getSubtreeOverlapScore(a.id, overlap.common.id, overlapScore.vertexScores);\n        subTreeOverlapB = this.getSubtreeOverlapScore(b.id, overlap.common.id, overlapScore.vertexScores);\n\n        if (subTreeOverlapA.value + subTreeOverlapB.value > total) {\n          this.rotateSubtree(a.id, overlap.common.id, 2.0 * angle, overlap.common.position);\n          this.rotateSubtree(b.id, overlap.common.id, -2.0 * angle, overlap.common.position);\n        }\n      } else if (overlap.vertices.length === 1) {\n        if (overlap.rings.length === 2) {\n          // TODO: Implement for more overlap resolution\n          // console.log(overlap);\n        }\n      }\n    }\n  }\n\n  /**\n   * Resolve secondary overlaps. Those overlaps are due to the structure turning back on itself.\n   *\n   * @param {Object[]} scores An array of objects sorted descending by score.\n   * @param {Number} scores[].id A vertex id.\n   * @param {Number} scores[].score The overlap score associated with the vertex id.\n   */\n  resolveSecondaryOverlaps(scores) {\n    for (var i = 0; i < scores.length; i++) {\n      if (scores[i].score > this.opts.overlapSensitivity) {\n        let vertex = this.graph.vertices[scores[i].id];\n\n        if (vertex.isTerminal()) {\n          let closest = this.getClosestVertex(vertex);\n\n          if (closest) {\n            // If one of the vertices is the first one, the previous vertex is not the central vertex but the dummy\n            // so take the next rather than the previous, which is vertex 1\n            let closestPosition = null;\n\n            if (closest.isTerminal()) {\n              closestPosition = closest.id === 0 ? this.graph.vertices[1].position : closest.previousPosition\n            } else {\n              closestPosition = closest.id === 0 ? this.graph.vertices[1].position : closest.position\n            }\n\n            let vertexPreviousPosition = vertex.id === 0 ? this.graph.vertices[1].position : vertex.previousPosition;\n\n            vertex.position.rotateAwayFrom(closestPosition, vertexPreviousPosition, MathHelper.toRad(20));\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get the last non-null or 0 angle vertex.\n   * @param {Number} vertexId A vertex id.\n   * @returns {Vertex} The last vertex with an angle that was not 0 or null.\n   */\n  getLastVertexWithAngle(vertexId) {\n    let angle = 0;\n    let vertex = null;\n\n    while (!angle && vertexId) {\n      vertex = this.graph.vertices[vertexId];\n      angle = vertex.angle;\n      vertexId = vertex.parentVertexId;\n    }\n\n    return vertex;\n  }\n\n  /**\n   * Positiones the next vertex thus creating a bond.\n   *\n   * @param {Vertex} vertex A vertex.\n   * @param {Vertex} [previousVertex=null] The previous vertex which has been positioned.\n   * @param {Number} [angle=0.0] The (global) angle of the vertex.\n   * @param {Boolean} [originShortest=false] Whether the origin is the shortest subtree in the branch.\n   * @param {Boolean} [skipPositioning=false] Whether or not to skip positioning and just check the neighbours.\n   */\n  createNextBond(vertex, previousVertex = null, angle = 0.0, originShortest = false, skipPositioning = false) {\n    if (vertex.positioned && !skipPositioning) {\n      return;\n    }\n\n    // If the double bond config was set on this vertex, do not check later\n    let doubleBondConfigSet = false;\n\n    // Keeping track of configurations around double bonds\n    if (previousVertex) {\n      let edge = this.graph.getEdge(vertex.id, previousVertex.id);\n\n      if ((edge.bondType === '/' || edge.bondType === '\\\\') && ++this.doubleBondConfigCount % 2 === 1) {\n        if (this.doubleBondConfig === null) {\n          this.doubleBondConfig = edge.bondType;\n          doubleBondConfigSet = true;\n\n          // Switch if the bond is a branch bond and previous vertex is the first\n          // TODO: Why is it different with the first vertex?\n          if (previousVertex.parentVertexId === null && vertex.value.branchBond) {\n            if (this.doubleBondConfig === '/') {\n              this.doubleBondConfig = '\\\\';\n            } else if (this.doubleBondConfig === '\\\\') {\n              this.doubleBondConfig = '/';\n            }\n          }\n        }\n      }\n    }\n\n    // If the current node is the member of one ring, then point straight away\n    // from the center of the ring. However, if the current node is a member of\n    // two rings, point away from the middle of the centers of the two rings\n    if (!skipPositioning) {\n      if (!previousVertex) {\n        // Add a (dummy) previous position if there is no previous vertex defined\n        // Since the first vertex is at (0, 0), create a vector at (bondLength, 0)\n        // and rotate it by 90°\n\n        let dummy = new Vector2(this.opts.bondLength, 0);\n        dummy.rotate(MathHelper.toRad(-60));\n\n        vertex.previousPosition = dummy;\n        vertex.setPosition(this.opts.bondLength, 0);\n        vertex.angle = MathHelper.toRad(-60);\n\n        // Do not position the vertex if it belongs to a bridged ring that is positioned using a layout algorithm.\n        if (vertex.value.bridgedRing === null) {\n          vertex.positioned = true;\n        }\n      } else if (previousVertex.value.rings.length > 0) {\n        let neighbours = previousVertex.neighbours;\n        let joinedVertex = null;\n        let pos = new Vector2(0.0, 0.0);\n\n        if (previousVertex.value.bridgedRing === null && previousVertex.value.rings.length > 1) {\n          for (var i = 0; i < neighbours.length; i++) {\n            let neighbour = this.graph.vertices[neighbours[i]];\n            if (ArrayHelper.containsAll(neighbour.value.rings, previousVertex.value.rings)) {\n              joinedVertex = neighbour;\n              break;\n            }\n          }\n        }\n\n        if (joinedVertex === null) {\n          for (var i = 0; i < neighbours.length; i++) {\n            let v = this.graph.vertices[neighbours[i]];\n\n            if (v.positioned && this.areVerticesInSameRing(v, previousVertex)) {\n              pos.add(Vector2.subtract(v.position, previousVertex.position));\n            }\n          }\n\n          pos.invert().normalize().multiplyScalar(this.opts.bondLength).add(previousVertex.position);\n        } else {\n          pos = joinedVertex.position.clone().rotateAround(Math.PI, previousVertex.position);\n        }\n\n        vertex.previousPosition = previousVertex.position;\n        vertex.setPositionFromVector(pos);\n        vertex.positioned = true;\n      } else {\n        // If the previous vertex was not part of a ring, draw a bond based\n        // on the global angle of the previous bond\n        let v = new Vector2(this.opts.bondLength, 0);\n\n        v.rotate(angle);\n        v.add(previousVertex.position);\n\n        vertex.setPositionFromVector(v);\n        vertex.previousPosition = previousVertex.position;\n        vertex.positioned = true;\n      }\n    }\n\n    // Go to next vertex\n    // If two rings are connected by a bond ...\n    if (vertex.value.bridgedRing !== null) {\n      let nextRing = this.getRing(vertex.value.bridgedRing);\n\n      if (!nextRing.positioned) {\n        let nextCenter = Vector2.subtract(vertex.previousPosition, vertex.position);\n\n        nextCenter.invert();\n        nextCenter.normalize();\n\n        let r = MathHelper.polyCircumradius(this.opts.bondLength, nextRing.members.length);\n        nextCenter.multiplyScalar(r);\n        nextCenter.add(vertex.position);\n\n        this.createRing(nextRing, nextCenter, vertex);\n      }\n    } else if (vertex.value.rings.length > 0) {\n      let nextRing = this.getRing(vertex.value.rings[0]);\n\n      if (!nextRing.positioned) {\n        let nextCenter = Vector2.subtract(vertex.previousPosition, vertex.position);\n\n        nextCenter.invert();\n        nextCenter.normalize();\n\n        let r = MathHelper.polyCircumradius(this.opts.bondLength, nextRing.getSize());\n\n        nextCenter.multiplyScalar(r);\n        nextCenter.add(vertex.position);\n\n        this.createRing(nextRing, nextCenter, vertex);\n      }\n    } else {\n      // Draw the non-ring vertices connected to this one  \n      let isStereoCenter = vertex.value.isStereoCenter;\n      let tmpNeighbours = vertex.getNeighbours();\n      let neighbours = Array();\n\n      // Remove neighbours that are not drawn\n      for (var i = 0; i < tmpNeighbours.length; i++) {\n        if (this.graph.vertices[tmpNeighbours[i]].value.isDrawn) {\n          neighbours.push(tmpNeighbours[i]);\n        }\n      }\n\n      // Remove the previous vertex (which has already been drawn)\n      if (previousVertex) {\n        neighbours = ArrayHelper.remove(neighbours, previousVertex.id);\n      }\n\n      let previousAngle = vertex.getAngle();\n\n      if (neighbours.length === 1) {\n        let nextVertex = this.graph.vertices[neighbours[0]];\n\n        // Make a single chain always cis except when there's a tribble (yes, this is a Star Trek reference) bond\n        // or if there are successive double bonds. Added a ring check because if there is an aromatic ring the ring bond inside the ring counts as a double bond and leads to =-= being straight.\n        if ((vertex.value.bondType === '#' || (previousVertex && previousVertex.value.bondType === '#')) ||\n          vertex.value.bondType === '=' && previousVertex && previousVertex.value.rings.length === 0 &&\n          previousVertex.value.bondType === '=' && vertex.value.branchBond !== '-') {\n          vertex.value.drawExplicit = false;\n\n          if (previousVertex) {\n            let straightEdge1 = this.graph.getEdge(vertex.id, previousVertex.id);\n            straightEdge1.center = true;\n          }\n\n          let straightEdge2 = this.graph.getEdge(vertex.id, nextVertex.id);\n          straightEdge2.center = true;\n\n          if (vertex.value.bondType === '#' || previousVertex && previousVertex.value.bondType === '#') {\n            nextVertex.angle = 0.0;\n          }\n\n          nextVertex.drawExplicit = true;\n\n          this.createNextBond(nextVertex, vertex, previousAngle + nextVertex.angle);\n        } else if (previousVertex && previousVertex.value.rings.length > 0) {\n          // If coming out of a ring, always draw away from the center of mass\n          let proposedAngleA = MathHelper.toRad(60);\n          let proposedAngleB = -proposedAngleA;\n\n          let proposedVectorA = new Vector2(this.opts.bondLength, 0);\n          let proposedVectorB = new Vector2(this.opts.bondLength, 0);\n\n          proposedVectorA.rotate(proposedAngleA).add(vertex.position);\n          proposedVectorB.rotate(proposedAngleB).add(vertex.position);\n\n          // let centerOfMass = this.getCurrentCenterOfMassInNeigbourhood(vertex.position, 100);\n          let centerOfMass = this.getCurrentCenterOfMass();\n          let distanceA = proposedVectorA.distanceSq(centerOfMass);\n          let distanceB = proposedVectorB.distanceSq(centerOfMass);\n\n          nextVertex.angle = distanceA < distanceB ? proposedAngleB : proposedAngleA;\n\n          this.createNextBond(nextVertex, vertex, previousAngle + nextVertex.angle);\n        } else {\n          let a = vertex.angle;\n          // Take the min and max if the previous angle was in a 4-neighbourhood (90° angles)\n          // TODO: If a is null or zero, it should be checked whether or not this one should go cis or trans, that is,\n          //       it should go into the oposite direction of the last non-null or 0 previous vertex / angle.\n          if (previousVertex && previousVertex.neighbours.length > 3) {\n            if (a > 0) {\n              a = Math.min(1.0472, a);\n            } else if (a < 0) {\n              a = Math.max(-1.0472, a);\n            } else {\n              a = 1.0472;\n            }\n          } else if (!a) {\n            let v = this.getLastVertexWithAngle(vertex.id);\n            a = v.angle;\n\n            if (!a) {\n              a = 1.0472;\n            }\n          }\n\n          // Handle configuration around double bonds\n          if (previousVertex && !doubleBondConfigSet) {\n            let bondType = this.graph.getEdge(vertex.id, nextVertex.id).bondType;\n\n            if (bondType === '/') {\n              if (this.doubleBondConfig === '/') {\n                // Nothing to do since it will be trans per default\n              } else if (this.doubleBondConfig === '\\\\') {\n                a = -a;\n              }\n              this.doubleBondConfig = null;\n            } else if (bondType === '\\\\') {\n              if (this.doubleBondConfig === '/') {\n                a = -a;\n              } else if (this.doubleBondConfig === '\\\\') {\n                // Nothing to do since it will be trans per default\n              }\n              this.doubleBondConfig = null;\n            }\n          }\n\n          if (originShortest) {\n            nextVertex.angle = a;\n          } else {\n            nextVertex.angle = -a;\n          }\n\n          this.createNextBond(nextVertex, vertex, previousAngle + nextVertex.angle);\n        }\n      } else if (neighbours.length === 2) {\n        // If the previous vertex comes out of a ring, it doesn't have an angle set\n        let a = vertex.angle;\n\n        if (!a) {\n          a = 1.0472;\n        }\n\n        // Check for the longer subtree - always go with cis for the longer subtree\n        let subTreeDepthA = this.graph.getTreeDepth(neighbours[0], vertex.id);\n        let subTreeDepthB = this.graph.getTreeDepth(neighbours[1], vertex.id);\n\n        let l = this.graph.vertices[neighbours[0]];\n        let r = this.graph.vertices[neighbours[1]];\n\n        l.value.subtreeDepth = subTreeDepthA;\n        r.value.subtreeDepth = subTreeDepthB;\n\n        // Also get the subtree for the previous direction (this is important when\n        // the previous vertex is the shortest path)\n        let subTreeDepthC = this.graph.getTreeDepth(previousVertex ? previousVertex.id : null, vertex.id);\n        if (previousVertex) {\n          previousVertex.value.subtreeDepth = subTreeDepthC;\n        }\n\n        let cis = 0;\n        let trans = 1;\n\n        // Carbons go always cis\n        if (r.value.element === 'C' && l.value.element !== 'C' && subTreeDepthB > 1 && subTreeDepthA < 5) {\n          cis = 1;\n          trans = 0;\n        } else if (r.value.element !== 'C' && l.value.element === 'C' && subTreeDepthA > 1 && subTreeDepthB < 5) {\n          cis = 0;\n          trans = 1;\n        } else if (subTreeDepthB > subTreeDepthA) {\n          cis = 1;\n          trans = 0;\n        }\n\n        let cisVertex = this.graph.vertices[neighbours[cis]];\n        let transVertex = this.graph.vertices[neighbours[trans]];\n\n        let edgeCis = this.graph.getEdge(vertex.id, cisVertex.id);\n        let edgeTrans = this.graph.getEdge(vertex.id, transVertex.id);\n\n        // If the origin tree is the shortest, make them the main chain\n        let originShortest = false;\n        if (subTreeDepthC < subTreeDepthA && subTreeDepthC < subTreeDepthB) {\n          originShortest = true;\n        }\n\n        transVertex.angle = a;\n        cisVertex.angle = -a;\n\n        if (this.doubleBondConfig === '\\\\') {\n          if (transVertex.value.branchBond === '\\\\') {\n            transVertex.angle = -a;\n            cisVertex.angle = a;\n          }\n        } else if (this.doubleBondConfig === '/') {\n          if (transVertex.value.branchBond === '/') {\n            transVertex.angle = -a;\n            cisVertex.angle = a;\n          }\n        }\n\n        this.createNextBond(transVertex, vertex, previousAngle + transVertex.angle, originShortest);\n        this.createNextBond(cisVertex, vertex, previousAngle + cisVertex.angle, originShortest);\n      } else if (neighbours.length === 3) {\n        // The vertex with the longest sub-tree should always go straight\n        let d1 = this.graph.getTreeDepth(neighbours[0], vertex.id);\n        let d2 = this.graph.getTreeDepth(neighbours[1], vertex.id);\n        let d3 = this.graph.getTreeDepth(neighbours[2], vertex.id);\n\n        let s = this.graph.vertices[neighbours[0]];\n        let l = this.graph.vertices[neighbours[1]];\n        let r = this.graph.vertices[neighbours[2]];\n\n        s.value.subtreeDepth = d1;\n        l.value.subtreeDepth = d2;\n        r.value.subtreeDepth = d3;\n\n        if (d2 > d1 && d2 > d3) {\n          s = this.graph.vertices[neighbours[1]];\n          l = this.graph.vertices[neighbours[0]];\n          r = this.graph.vertices[neighbours[2]];\n        } else if (d3 > d1 && d3 > d2) {\n          s = this.graph.vertices[neighbours[2]];\n          l = this.graph.vertices[neighbours[0]];\n          r = this.graph.vertices[neighbours[1]];\n        }\n\n        // Create a cross if more than one subtree is of length > 1\n        // or the vertex is connected to a ring\n        if (previousVertex &&\n          previousVertex.value.rings.length < 1 &&\n          s.value.rings.length < 1 &&\n          l.value.rings.length < 1 &&\n          r.value.rings.length < 1 &&\n          this.graph.getTreeDepth(l.id, vertex.id) === 1 &&\n          this.graph.getTreeDepth(r.id, vertex.id) === 1 &&\n          this.graph.getTreeDepth(s.id, vertex.id) > 1) {\n\n          s.angle = -vertex.angle;\n          if (vertex.angle >= 0) {\n            l.angle = MathHelper.toRad(30);\n            r.angle = MathHelper.toRad(90);\n          } else {\n            l.angle = -MathHelper.toRad(30);\n            r.angle = -MathHelper.toRad(90);\n          }\n\n          this.createNextBond(s, vertex, previousAngle + s.angle);\n          this.createNextBond(l, vertex, previousAngle + l.angle);\n          this.createNextBond(r, vertex, previousAngle + r.angle);\n        } else {\n          s.angle = 0.0;\n          l.angle = MathHelper.toRad(90);\n          r.angle = -MathHelper.toRad(90);\n\n          this.createNextBond(s, vertex, previousAngle + s.angle);\n          this.createNextBond(l, vertex, previousAngle + l.angle);\n          this.createNextBond(r, vertex, previousAngle + r.angle);\n        }\n      } else if (neighbours.length === 4) {\n        // The vertex with the longest sub-tree should always go to the reflected opposide direction\n        let d1 = this.graph.getTreeDepth(neighbours[0], vertex.id);\n        let d2 = this.graph.getTreeDepth(neighbours[1], vertex.id);\n        let d3 = this.graph.getTreeDepth(neighbours[2], vertex.id);\n        let d4 = this.graph.getTreeDepth(neighbours[3], vertex.id);\n\n        let w = this.graph.vertices[neighbours[0]];\n        let x = this.graph.vertices[neighbours[1]];\n        let y = this.graph.vertices[neighbours[2]];\n        let z = this.graph.vertices[neighbours[3]];\n\n        w.value.subtreeDepth = d1;\n        x.value.subtreeDepth = d2;\n        y.value.subtreeDepth = d3;\n        z.value.subtreeDepth = d4;\n\n        if (d2 > d1 && d2 > d3 && d2 > d4) {\n          w = this.graph.vertices[neighbours[1]];\n          x = this.graph.vertices[neighbours[0]];\n          y = this.graph.vertices[neighbours[2]];\n          z = this.graph.vertices[neighbours[3]];\n        } else if (d3 > d1 && d3 > d2 && d3 > d4) {\n          w = this.graph.vertices[neighbours[2]];\n          x = this.graph.vertices[neighbours[0]];\n          y = this.graph.vertices[neighbours[1]];\n          z = this.graph.vertices[neighbours[3]];\n        } else if (d4 > d1 && d4 > d2 && d4 > d3) {\n          w = this.graph.vertices[neighbours[3]];\n          x = this.graph.vertices[neighbours[0]];\n          y = this.graph.vertices[neighbours[1]];\n          z = this.graph.vertices[neighbours[2]];\n        }\n\n        w.angle = -MathHelper.toRad(36);\n        x.angle = MathHelper.toRad(36);\n        y.angle = -MathHelper.toRad(108);\n        z.angle = MathHelper.toRad(108);\n\n        this.createNextBond(w, vertex, previousAngle + w.angle);\n        this.createNextBond(x, vertex, previousAngle + x.angle);\n        this.createNextBond(y, vertex, previousAngle + y.angle);\n        this.createNextBond(z, vertex, previousAngle + z.angle);\n      }\n    }\n  }\n\n  /**\n   * Gets the vetex sharing the edge that is the common bond of two rings.\n   *\n   * @param {Vertex} vertex A vertex.\n   * @returns {(Number|null)} The id of a vertex sharing the edge that is the common bond of two rings with the vertex provided or null, if none.\n   */\n  getCommonRingbondNeighbour(vertex) {\n    let neighbours = vertex.neighbours;\n\n    for (var i = 0; i < neighbours.length; i++) {\n      let neighbour = this.graph.vertices[neighbours[i]];\n\n      if (ArrayHelper.containsAll(neighbour.value.rings, vertex.value.rings)) {\n        return neighbour;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Check if a vector is inside any ring.\n   *\n   * @param {Vector2} vec A vector.\n   * @returns {Boolean} A boolean indicating whether or not the point (vector) is inside any of the rings associated with the current molecule.\n   */\n  isPointInRing(vec) {\n    for (var i = 0; i < this.rings.length; i++) {\n      let ring = this.rings[i];\n\n      if (!ring.positioned) {\n        continue;\n      }\n\n      let radius = MathHelper.polyCircumradius(this.opts.bondLength, ring.getSize());\n      let radiusSq = radius * radius;\n\n      if (vec.distanceSq(ring.center) < radiusSq) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Check whether or not an edge is part of a ring.\n   *\n   * @param {Edge} edge An edge.\n   * @returns {Boolean} A boolean indicating whether or not the edge is part of a ring.\n   */\n  isEdgeInRing(edge) {\n    let source = this.graph.vertices[edge.sourceId];\n    let target = this.graph.vertices[edge.targetId];\n\n    return this.areVerticesInSameRing(source, target);\n  }\n\n  /**\n   * Check whether or not an edge is rotatable.\n   *\n   * @param {Edge} edge An edge.\n   * @returns {Boolean} A boolean indicating whether or not the edge is rotatable.\n   */\n  isEdgeRotatable(edge) {\n    let vertexA = this.graph.vertices[edge.sourceId];\n    let vertexB = this.graph.vertices[edge.targetId];\n\n    // Only single bonds are rotatable\n    if (edge.bondType !== '-') {\n      return false;\n    }\n\n    // Do not rotate edges that have a further single bond to each side - do that!\n    // If the bond is terminal, it doesn't make sense to rotate it\n    // if (vertexA.getNeighbourCount() + vertexB.getNeighbourCount() < 5) {\n    //   return false;\n    // }\n\n    if (vertexA.isTerminal() || vertexB.isTerminal()) {\n      return false;\n    }\n\n    // Ringbonds are not rotatable\n    if (vertexA.value.rings.length > 0 && vertexB.value.rings.length > 0 &&\n      this.areVerticesInSameRing(vertexA, vertexB)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Check whether or not a ring is an implicitly defined aromatic ring (lower case smiles).\n   *\n   * @param {Ring} ring A ring.\n   * @returns {Boolean} A boolean indicating whether or not a ring is implicitly defined as aromatic.\n   */\n  isRingAromatic(ring) {\n    for (var i = 0; i < ring.members.length; i++) {\n      let vertex = this.graph.vertices[ring.members[i]];\n\n      if (!vertex.value.isPartOfAromaticRing) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Get the normals of an edge.\n   *\n   * @param {Edge} edge An edge.\n   * @returns {Vector2[]} An array containing two vectors, representing the normals.\n   */\n  getEdgeNormals(edge) {\n    let v1 = this.graph.vertices[edge.sourceId].position;\n    let v2 = this.graph.vertices[edge.targetId].position;\n\n    // Get the normalized normals for the edge\n    let normals = Vector2.units(v1, v2);\n\n    return normals;\n  }\n\n  /**\n   * Returns an array of vertices that are neighbouring a vertix but are not members of a ring (including bridges).\n   *\n   * @param {Number} vertexId A vertex id.\n   * @returns {Vertex[]} An array of vertices.\n   */\n  getNonRingNeighbours(vertexId) {\n    let nrneighbours = Array();\n    let vertex = this.graph.vertices[vertexId];\n    let neighbours = vertex.neighbours;\n\n    for (var i = 0; i < neighbours.length; i++) {\n      let neighbour = this.graph.vertices[neighbours[i]];\n      let nIntersections = ArrayHelper.intersection(vertex.value.rings, neighbour.value.rings).length;\n\n      if (nIntersections === 0 && neighbour.value.isBridge == false) {\n        nrneighbours.push(neighbour);\n      }\n    }\n\n    return nrneighbours;\n  }\n\n  /**\n   * Annotaed stereochemistry information for visualization.\n   */\n  annotateStereochemistry() {\n    let maxDepth = 10;\n\n    // For each stereo-center\n    for (var i = 0; i < this.graph.vertices.length; i++) {\n      let vertex = this.graph.vertices[i];\n\n      if (!vertex.value.isStereoCenter) {\n        continue;\n      }\n\n      let neighbours = vertex.getNeighbours();\n      let nNeighbours = neighbours.length;\n      let priorities = Array(nNeighbours);\n\n      for (var j = 0; j < nNeighbours; j++) {\n        let visited = new Uint8Array(this.graph.vertices.length);\n        let priority = Array(Array());\n        visited[vertex.id] = 1;\n\n        this.visitStereochemistry(neighbours[j], vertex.id, visited, priority, maxDepth, 0);\n\n        // Sort each level according to atomic number\n        for (var k = 0; k < priority.length; k++) {\n          priority[k].sort(function (a, b) {\n            return b - a\n          });\n        }\n\n        priorities[j] = [j, priority];\n      }\n\n      let maxLevels = 0;\n      let maxEntries = 0;\n      for (var j = 0; j < priorities.length; j++) {\n        if (priorities[j][1].length > maxLevels) {\n          maxLevels = priorities[j][1].length;\n        }\n\n        for (var k = 0; k < priorities[j][1].length; k++) {\n          if (priorities[j][1][k].length > maxEntries) {\n            maxEntries = priorities[j][1][k].length;\n          }\n        }\n      }\n\n      for (var j = 0; j < priorities.length; j++) {\n        let diff = maxLevels - priorities[j][1].length;\n        for (var k = 0; k < diff; k++) {\n          priorities[j][1].push([]);\n        }\n\n        // Break ties by the position in the SMILES string as per specification\n        priorities[j][1].push([neighbours[j]]);\n\n        // Make all same length. Fill with zeroes.\n        for (var k = 0; k < priorities[j][1].length; k++) {\n          let diff = maxEntries - priorities[j][1][k].length;\n\n          for (var l = 0; l < diff; l++) {\n            priorities[j][1][k].push(0);\n          }\n        }\n      }\n\n      priorities.sort(function (a, b) {\n        for (var j = 0; j < a[1].length; j++) {\n          for (var k = 0; k < a[1][j].length; k++) {\n            if (a[1][j][k] > b[1][j][k]) {\n              return -1;\n            } else if (a[1][j][k] < b[1][j][k]) {\n              return 1;\n            }\n          }\n        }\n\n        return 0;\n      });\n\n      let order = new Uint8Array(nNeighbours);\n      for (var j = 0; j < nNeighbours; j++) {\n        order[j] = priorities[j][0];\n        vertex.value.priority = j;\n      }\n\n      // Check the angles between elements 0 and 1, and 0 and 2 to determine whether they are\n      // drawn cw or ccw\n      // TODO: OC(Cl)=[C@]=C(C)F currently fails here, however this is, IMHO, not a valid SMILES.\n      let posA = this.graph.vertices[neighbours[order[0]]].position;\n      let posB = this.graph.vertices[neighbours[order[1]]].position;\n      let posC = this.graph.vertices[neighbours[order[2]]].position;\n\n      let cwA = posA.relativeClockwise(posB, vertex.position);\n      let cwB = posA.relativeClockwise(posC, vertex.position);\n\n      // If the second priority is clockwise from the first, the ligands are drawn clockwise, since\n      // The hydrogen can be drawn on either side\n      let isCw = cwA === -1;\n\n      let rotation = vertex.value.bracket.chirality === '@' ? -1 : 1;\n      let rs = MathHelper.parityOfPermutation(order) * rotation === 1 ? 'R' : 'S';\n\n      // Flip the hydrogen direction when the drawing doesn't match the chirality.\n      let wedgeA = 'down';\n      let wedgeB = 'up';\n      if (isCw && rs !== 'R' || !isCw && rs !== 'S') {\n        vertex.value.hydrogenDirection = 'up';\n        wedgeA = 'up';\n        wedgeB = 'down';\n      }\n\n      if (vertex.value.hasHydrogen) {\n        this.graph.getEdge(vertex.id, neighbours[order[order.length - 1]]).wedge = wedgeA;\n      }\n\n      // Get the shortest subtree to flip up / down. Ignore lowest priority\n      // The rules are following:\n      // 1. Do not draw wedge between two stereocenters\n      // 2. Heteroatoms\n      // 3. Draw outside ring\n      // 4. Shortest subtree\n\n      let wedgeOrder = new Array(neighbours.length - 1);\n      let showHydrogen = vertex.value.rings.length > 1 && vertex.value.hasHydrogen;\n      let offset = vertex.value.hasHydrogen ? 1 : 0;\n\n      for (var j = 0; j < order.length - offset; j++) {\n        wedgeOrder[j] = new Uint32Array(2);\n        let neighbour = this.graph.vertices[neighbours[order[j]]];\n        wedgeOrder[j][0] += neighbour.value.isStereoCenter ? 0 : 100000;\n        // wedgeOrder[j][0] += neighbour.value.rings.length > 0 ? 0 : 10000;\n        // Only add if in same ring, unlike above\n        wedgeOrder[j][0] += this.areVerticesInSameRing(neighbour, vertex) ? 0 : 10000;\n        wedgeOrder[j][0] += neighbour.value.isHeteroAtom() ? 1000 : 0;\n        wedgeOrder[j][0] -= neighbour.value.subtreeDepth === 0 ? 1000 : 0;\n        wedgeOrder[j][0] += 1000 - neighbour.value.subtreeDepth;\n        wedgeOrder[j][1] = neighbours[order[j]];\n      }\n\n\n      wedgeOrder.sort(function (a, b) {\n        if (a[0] > b[0]) {\n          return -1;\n        } else if (a[0] < b[0]) {\n          return 1;\n        }\n        return 0;\n      });\n\n      // If all neighbours are in a ring, do not draw wedge, the hydrogen will be drawn.\n      if (!showHydrogen) {\n        let wedgeId = wedgeOrder[0][1];\n\n        if (vertex.value.hasHydrogen) {\n          this.graph.getEdge(vertex.id, wedgeId).wedge = wedgeB;\n        } else {\n          let wedge = wedgeB;\n\n          for (var j = order.length - 1; j >= 0; j--) {\n            if (wedge === wedgeA) {\n              wedge = wedgeB;\n            } else {\n              wedge = wedgeA;\n            }\n            if (neighbours[order[j]] === wedgeId) {\n              break;\n            }\n          }\n\n          this.graph.getEdge(vertex.id, wedgeId).wedge = wedge;\n        }\n      }\n\n      vertex.value.chirality = rs;\n    }\n  }\n\n  /**\n   * \n   * \n   * @param {Number} vertexId The id of a vertex.\n   * @param {(Number|null)} previousVertexId The id of the parent vertex of the vertex.\n   * @param {Uint8Array} visited An array containing the visited flag for all vertices in the graph.\n   * @param {Array} priority An array of arrays storing the atomic numbers for each level.\n   * @param {Number} maxDepth The maximum depth.\n   * @param {Number} depth The current depth.\n   */\n  visitStereochemistry(vertexId, previousVertexId, visited, priority, maxDepth, depth, parentAtomicNumber = 0) {\n    visited[vertexId] = 1;\n    let vertex = this.graph.vertices[vertexId];\n    let atomicNumber = vertex.value.getAtomicNumber();\n\n    if (priority.length <= depth) {\n      priority.push(Array());\n    }\n\n    for (var i = 0; i < this.graph.getEdge(vertexId, previousVertexId).weight; i++) {\n      priority[depth].push(parentAtomicNumber * 1000 + atomicNumber);\n    }\n\n    let neighbours = this.graph.vertices[vertexId].neighbours;\n\n    for (var i = 0; i < neighbours.length; i++) {\n      if (visited[neighbours[i]] !== 1 && depth < maxDepth - 1) {\n        this.visitStereochemistry(neighbours[i], vertexId, visited.slice(), priority, maxDepth, depth + 1, atomicNumber);\n      }\n    }\n\n    // Valences are filled with hydrogens and passed to the next level.\n    if (depth < maxDepth - 1) {\n      let bonds = 0;\n\n      for (var i = 0; i < neighbours.length; i++) {\n        bonds += this.graph.getEdge(vertexId, neighbours[i]).weight;\n      }\n\n      for (var i = 0; i < vertex.value.getMaxBonds() - bonds; i++) {\n        if (priority.length <= depth + 1) {\n          priority.push(Array());\n        }\n\n        priority[depth + 1].push(atomicNumber * 1000 + 1);\n      }\n    }\n  }\n\n  /**\n   * Creates pseudo-elements (such as Et, Me, Ac, Bz, ...) at the position of the carbon sets\n   * the involved atoms not to be displayed.\n   */\n  initPseudoElements() {\n    for (var i = 0; i < this.graph.vertices.length; i++) {\n      const vertex = this.graph.vertices[i];\n      const neighbourIds = vertex.neighbours;\n      let neighbours = Array(neighbourIds.length);\n\n      for (var j = 0; j < neighbourIds.length; j++) {\n        neighbours[j] = this.graph.vertices[neighbourIds[j]];\n      }\n\n      // Ignore atoms that have less than 3 neighbours, except if\n      // the vertex is connected to a ring and has two neighbours\n      if (vertex.getNeighbourCount() < 3 || vertex.value.rings.length > 0) {\n        continue;\n      }\n\n      // TODO: This exceptions should be handled more elegantly (via config file?)\n\n      // Ignore phosphates (especially for triphosphates)\n      if (vertex.value.element === 'P') {\n        continue;\n      }\n\n      // Ignore also guanidine\n      if (vertex.value.element === 'C' && neighbours.length === 3 &&\n        neighbours[0].value.element === 'N' && neighbours[1].value.element === 'N' && neighbours[2].value.element === 'N') {\n        continue;\n      }\n\n      // Continue if there are less than two heteroatoms\n      // or if a neighbour has more than 1 neighbour\n      let heteroAtomCount = 0;\n      let ctn = 0;\n\n      for (var j = 0; j < neighbours.length; j++) {\n        let neighbour = neighbours[j];\n        let neighbouringElement = neighbour.value.element;\n        let neighbourCount = neighbour.getNeighbourCount();\n\n        if (neighbouringElement !== 'C' && neighbouringElement !== 'H' &&\n          neighbourCount === 1) {\n          heteroAtomCount++;\n        }\n\n        if (neighbourCount > 1) {\n          ctn++;\n        }\n      }\n\n      if (ctn > 1 || heteroAtomCount < 2) {\n        continue;\n      }\n\n      // Get the previous atom (the one which is not terminal)\n      let previous = null;\n\n      for (var j = 0; j < neighbours.length; j++) {\n        let neighbour = neighbours[j];\n\n        if (neighbour.getNeighbourCount() > 1) {\n          previous = neighbour;\n        }\n      }\n\n      for (var j = 0; j < neighbours.length; j++) {\n        let neighbour = neighbours[j];\n\n        if (neighbour.getNeighbourCount() > 1) {\n          continue;\n        }\n\n        neighbour.value.isDrawn = false;\n\n        let hydrogens = Atom.maxBonds[neighbour.value.element] - neighbour.value.bondCount;\n        let charge = '';\n\n        if (neighbour.value.bracket) {\n          hydrogens = neighbour.value.bracket.hcount;\n          charge = neighbour.value.bracket.charge || 0;\n        }\n\n        vertex.value.attachPseudoElement(neighbour.value.element, previous ? previous.value.element : null, hydrogens, charge);\n      }\n    }\n\n    // The second pass\n    for (var i = 0; i < this.graph.vertices.length; i++) {\n      const vertex = this.graph.vertices[i];\n      const atom = vertex.value;\n      const element = atom.element;\n\n      if (element === 'C' || element === 'H' || !atom.isDrawn) {\n        continue;\n      }\n\n      const neighbourIds = vertex.neighbours;\n      let neighbours = Array(neighbourIds.length);\n\n      for (var j = 0; j < neighbourIds.length; j++) {\n        neighbours[j] = this.graph.vertices[neighbourIds[j]];\n      }\n\n      for (var j = 0; j < neighbours.length; j++) {\n        let neighbour = neighbours[j].value;\n\n        if (!neighbour.hasAttachedPseudoElements || neighbour.getAttachedPseudoElementsCount() !== 2) {\n          continue;\n        }\n\n        const pseudoElements = neighbour.getAttachedPseudoElements();\n\n        if (pseudoElements.hasOwnProperty('0O') && pseudoElements.hasOwnProperty('3C')) {\n          neighbour.isDrawn = false;\n          vertex.value.attachPseudoElement('Ac', '', 0);\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = Drawer;"]},"metadata":{},"sourceType":"script"}