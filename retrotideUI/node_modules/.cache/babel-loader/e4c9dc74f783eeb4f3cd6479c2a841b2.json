{"ast":null,"code":"var _classCallCheck = require(\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n/** \r\n * A static class containing helper functions for math-related tasks. \r\n */\nvar MathHelper = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function MathHelper() {\n    _classCallCheck(this, MathHelper);\n  }\n\n  _createClass(MathHelper, null, [{\n    key: \"round\",\n    value:\n    /**\r\n     * Rounds a value to a given number of decimals.\r\n     *\r\n     * @static\r\n     * @param {Number} value A number.\r\n     * @param {Number} decimals The number of decimals.\r\n     * @returns {Number} A number rounded to a given number of decimals.\r\n     */\n    function round(value, decimals) {\n      decimals = decimals ? decimals : 1;\n      return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);\n    }\n    /**\r\n     * Returns the means of the angles contained in an array. In radians.\r\n     *\r\n     * @static\r\n     * @param {Number[]} arr An array containing angles (in radians).\r\n     * @returns {Number} The mean angle in radians.\r\n     */\n\n  }, {\n    key: \"meanAngle\",\n    value: function meanAngle(arr) {\n      var sin = 0.0;\n      var cos = 0.0;\n\n      for (var i = 0; i < arr.length; i++) {\n        sin += Math.sin(arr[i]);\n        cos += Math.cos(arr[i]);\n      }\n\n      return Math.atan2(sin / arr.length, cos / arr.length);\n    }\n    /**\r\n     * Returns the inner angle of a n-sided regular polygon.\r\n     *\r\n     * @static\r\n     * @param {Number} n Number of sides of a regular polygon.\r\n     * @returns {Number} The inner angle of a given regular polygon.\r\n     */\n\n  }, {\n    key: \"innerAngle\",\n    value: function innerAngle(n) {\n      return MathHelper.toRad((n - 2) * 180 / n);\n    }\n    /**\r\n     * Returns the circumradius of a n-sided regular polygon with a given side-length.\r\n     *\r\n     * @static\r\n     * @param {Number} s The side length of the regular polygon.\r\n     * @param {Number} n The number of sides.\r\n     * @returns {Number} The circumradius of the regular polygon.\r\n     */\n\n  }, {\n    key: \"polyCircumradius\",\n    value: function polyCircumradius(s, n) {\n      return s / (2 * Math.sin(Math.PI / n));\n    }\n    /**\r\n     * Returns the apothem of a regular n-sided polygon based on its radius.\r\n     *\r\n     * @static\r\n     * @param {Number} r The radius.\r\n     * @param {Number} n The number of edges of the regular polygon.\r\n     * @returns {Number} The apothem of a n-sided polygon based on its radius.\r\n     */\n\n  }, {\n    key: \"apothem\",\n    value: function apothem(r, n) {\n      return r * Math.cos(Math.PI / n);\n    }\n  }, {\n    key: \"apothemFromSideLength\",\n    value: function apothemFromSideLength(s, n) {\n      var r = MathHelper.polyCircumradius(s, n);\n      return MathHelper.apothem(r, n);\n    }\n    /**\r\n     * The central angle of a n-sided regular polygon. In radians.\r\n     *\r\n     * @static\r\n     * @param {Number} n The number of sides of the regular polygon.\r\n     * @returns {Number} The central angle of the n-sided polygon in radians.\r\n     */\n\n  }, {\n    key: \"centralAngle\",\n    value: function centralAngle(n) {\n      return MathHelper.toRad(360 / n);\n    }\n    /**\r\n     * Convertes radians to degrees.\r\n     *\r\n     * @static\r\n     * @param {Number} rad An angle in radians.\r\n     * @returns {Number} The angle in degrees.\r\n     */\n\n  }, {\n    key: \"toDeg\",\n    value: function toDeg(rad) {\n      return rad * MathHelper.degFactor;\n    }\n    /**\r\n     * Converts degrees to radians.\r\n     *\r\n     * @static\r\n     * @param {Number} deg An angle in degrees.\r\n     * @returns {Number} The angle in radians.\r\n     */\n\n  }, {\n    key: \"toRad\",\n    value: function toRad(deg) {\n      return deg * MathHelper.radFactor;\n    }\n    /**\r\n     * Returns the parity of the permutation (1 or -1)\r\n     * @param {(Array|Uint8Array)} arr An array containing the permutation.\r\n     * @returns {Number} The parity of the permutation (1 or -1), where 1 means even and -1 means odd.\r\n     */\n\n  }, {\n    key: \"parityOfPermutation\",\n    value: function parityOfPermutation(arr) {\n      var visited = new Uint8Array(arr.length);\n      var evenLengthCycleCount = 0;\n\n      var traverseCycle = function traverseCycle(i) {\n        var cycleLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n        if (visited[i] === 1) {\n          return cycleLength;\n        }\n\n        cycleLength++;\n        visited[i] = 1;\n        return traverseCycle(arr[i], cycleLength);\n      };\n\n      for (var i = 0; i < arr.length; i++) {\n        if (visited[i] === 1) {\n          continue;\n        }\n\n        var cycleLength = traverseCycle(i);\n        evenLengthCycleCount += 1 - cycleLength % 2;\n      }\n\n      return evenLengthCycleCount % 2 ? -1 : 1;\n    }\n    /** The factor to convert degrees to radians. */\n\n  }, {\n    key: \"radFactor\",\n    get: function get() {\n      return Math.PI / 180.0;\n    }\n    /** The factor to convert radians to degrees. */\n\n  }, {\n    key: \"degFactor\",\n    get: function get() {\n      return 180.0 / Math.PI;\n    }\n    /** Two times PI. */\n\n  }, {\n    key: \"twoPI\",\n    get: function get() {\n      return 2.0 * Math.PI;\n    }\n  }]);\n\n  return MathHelper;\n}();\n\nmodule.exports = MathHelper;","map":{"version":3,"sources":["/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/smiles-drawer/src/MathHelper.js"],"names":["MathHelper","value","decimals","Number","Math","round","arr","sin","cos","i","length","atan2","n","toRad","s","PI","r","polyCircumradius","apothem","rad","degFactor","deg","radFactor","visited","Uint8Array","evenLengthCycleCount","traverseCycle","cycleLength","module","exports"],"mappings":"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","sourcesContent":["/** \r\n * A static class containing helper functions for math-related tasks. \r\n */\r\nclass MathHelper {\r\n    /**\r\n     * Rounds a value to a given number of decimals.\r\n     *\r\n     * @static\r\n     * @param {Number} value A number.\r\n     * @param {Number} decimals The number of decimals.\r\n     * @returns {Number} A number rounded to a given number of decimals.\r\n     */\r\n    static round(value, decimals) {\r\n        decimals = decimals ? decimals : 1;\r\n        return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);\r\n    }\r\n\r\n    /**\r\n     * Returns the means of the angles contained in an array. In radians.\r\n     *\r\n     * @static\r\n     * @param {Number[]} arr An array containing angles (in radians).\r\n     * @returns {Number} The mean angle in radians.\r\n     */\r\n    static meanAngle(arr) {\r\n        let sin = 0.0;\r\n        let cos = 0.0;\r\n        \r\n        for (var i = 0; i < arr.length; i++) {\r\n            sin += Math.sin(arr[i]);\r\n            cos += Math.cos(arr[i]);\r\n        }\r\n\r\n        return Math.atan2(sin / arr.length, cos / arr.length);\r\n    }\r\n\r\n    /**\r\n     * Returns the inner angle of a n-sided regular polygon.\r\n     *\r\n     * @static\r\n     * @param {Number} n Number of sides of a regular polygon.\r\n     * @returns {Number} The inner angle of a given regular polygon.\r\n     */\r\n    static innerAngle(n) {\r\n        return MathHelper.toRad((n - 2) * 180 / n);\r\n    }\r\n\r\n    /**\r\n     * Returns the circumradius of a n-sided regular polygon with a given side-length.\r\n     *\r\n     * @static\r\n     * @param {Number} s The side length of the regular polygon.\r\n     * @param {Number} n The number of sides.\r\n     * @returns {Number} The circumradius of the regular polygon.\r\n     */\r\n    static polyCircumradius(s, n) {\r\n        return s / (2 * Math.sin(Math.PI / n));\r\n    }\r\n\r\n    /**\r\n     * Returns the apothem of a regular n-sided polygon based on its radius.\r\n     *\r\n     * @static\r\n     * @param {Number} r The radius.\r\n     * @param {Number} n The number of edges of the regular polygon.\r\n     * @returns {Number} The apothem of a n-sided polygon based on its radius.\r\n     */\r\n    static apothem(r, n) {\r\n        return r * Math.cos(Math.PI / n);\r\n    }\r\n\r\n    static apothemFromSideLength(s, n) {\r\n        let r = MathHelper.polyCircumradius(s, n);\r\n        \r\n        return MathHelper.apothem(r, n);\r\n    }\r\n\r\n    /**\r\n     * The central angle of a n-sided regular polygon. In radians.\r\n     *\r\n     * @static\r\n     * @param {Number} n The number of sides of the regular polygon.\r\n     * @returns {Number} The central angle of the n-sided polygon in radians.\r\n     */\r\n    static centralAngle(n) {\r\n        return MathHelper.toRad(360 / n);\r\n    }\r\n\r\n    /**\r\n     * Convertes radians to degrees.\r\n     *\r\n     * @static\r\n     * @param {Number} rad An angle in radians.\r\n     * @returns {Number} The angle in degrees.\r\n     */\r\n    static toDeg(rad) {\r\n        return rad * MathHelper.degFactor;\r\n    }\r\n\r\n    /**\r\n     * Converts degrees to radians.\r\n     *\r\n     * @static\r\n     * @param {Number} deg An angle in degrees.\r\n     * @returns {Number} The angle in radians.\r\n     */\r\n    static toRad(deg) {\r\n        return deg * MathHelper.radFactor;\r\n    }\r\n\r\n    /**\r\n     * Returns the parity of the permutation (1 or -1)\r\n     * @param {(Array|Uint8Array)} arr An array containing the permutation.\r\n     * @returns {Number} The parity of the permutation (1 or -1), where 1 means even and -1 means odd.\r\n     */\r\n    static parityOfPermutation(arr) {\r\n        let visited = new Uint8Array(arr.length);\r\n        let evenLengthCycleCount = 0;\r\n\r\n        let traverseCycle = function(i, cycleLength = 0) {\r\n            if (visited[i] === 1) {\r\n                return cycleLength;\r\n            }\r\n\r\n            cycleLength++;\r\n\r\n            visited[i] = 1;\r\n            return traverseCycle(arr[i], cycleLength);\r\n        }\r\n\r\n        for (var i = 0; i < arr.length; i++) {\r\n            if (visited[i] === 1) {\r\n                continue;\r\n            }\r\n\r\n            let cycleLength = traverseCycle(i);\r\n            evenLengthCycleCount += (1 - cycleLength % 2);\r\n        }\r\n\r\n        return evenLengthCycleCount % 2 ? -1 : 1;\r\n    }\r\n\r\n    /** The factor to convert degrees to radians. */\r\n    static get radFactor() {\r\n      return Math.PI / 180.0;\r\n    }\r\n\r\n    /** The factor to convert radians to degrees. */\r\n    static get degFactor() {\r\n      return 180.0 / Math.PI;\r\n    }\r\n\r\n    /** Two times PI. */\r\n    static get twoPI() {\r\n      return 2.0 * Math.PI;\r\n    }\r\n}\r\n\r\nmodule.exports = MathHelper;"]},"metadata":{},"sourceType":"script"}