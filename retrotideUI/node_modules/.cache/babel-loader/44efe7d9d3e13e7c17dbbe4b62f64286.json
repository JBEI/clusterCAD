{"ast":null,"code":"const {\n  getChargeText\n} = require('./UtilityFunctions');\n\nconst Line = require('./Line');\n\nconst Vector2 = require('./Vector2');\n\nclass SvgWrapper {\n  constructor(themeManager, target, options) {\n    this.svg = document.getElementById(target);\n    this.opts = options;\n    this.gradientId = 0; // maintain a list of line elements and their corresponding gradients\n    // maintain a list of vertex elements\n\n    this.paths = [];\n    this.vertices = [];\n    this.gradients = []; // maintain the offset for drawing purposes\n\n    this.offsetX = 0.0;\n    this.offsetY = 0.0; // maintain the dimensions\n\n    this.drawingWidth = 0;\n    this.drawingHeight = 0;\n    this.halfBondThickness = this.opts.bondThickness / 2.0; // for managing color schemes\n\n    this.themeManager = themeManager; // create the mask\n\n    this.maskElements = [];\n    let mask = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n    mask.setAttributeNS(null, 'x', 0);\n    mask.setAttributeNS(null, 'y', 0);\n    mask.setAttributeNS(null, 'width', '100%');\n    mask.setAttributeNS(null, 'height', '100%');\n    mask.setAttributeNS(null, 'fill', 'white');\n    this.maskElements.push(mask); // clear the svg element\n\n    while (this.svg.firstChild) {\n      this.svg.removeChild(this.svg.firstChild);\n    }\n  }\n\n  constructSvg() {\n    // TODO: add the defs element to put gradients in\n    let defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs'),\n        masks = document.createElementNS('http://www.w3.org/2000/svg', 'mask'),\n        style = document.createElementNS('http://www.w3.org/2000/svg', 'style'),\n        paths = document.createElementNS('http://www.w3.org/2000/svg', 'g'),\n        vertices = document.createElementNS('http://www.w3.org/2000/svg', 'g'),\n        pathChildNodes = this.paths; // give the mask an id\n\n    masks.setAttributeNS(null, 'id', 'text-mask'); // create the css styles\n\n    style.appendChild(document.createTextNode(`\n                .element {\n                    font: ${this.opts.fontSizeLarge}pt Helvetica, Arial, sans-serif;\n                    alignment-baseline: 'middle';\n                }\n                .sub {\n                    font: ${this.opts.fontSizeSmall}pt Helvetica, Arial, sans-serif;\n                }\n            `));\n\n    for (let path of pathChildNodes) {\n      paths.appendChild(path);\n    }\n\n    for (let vertex of this.vertices) {\n      vertices.appendChild(vertex);\n    }\n\n    for (let mask of this.maskElements) {\n      masks.appendChild(mask);\n    }\n\n    for (let gradient of this.gradients) {\n      defs.appendChild(gradient);\n    }\n\n    paths.setAttributeNS(null, 'mask', 'url(#text-mask)');\n\n    if (this.svg) {\n      this.svg.appendChild(defs);\n      this.svg.appendChild(masks);\n      this.svg.appendChild(style);\n      this.svg.appendChild(paths);\n      this.svg.appendChild(vertices);\n      return this.svg;\n    } else {\n      let container = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n      container.appendChild(defs);\n      container.appendChild(masks);\n      container.appendChild(style);\n      container.appendChild(paths);\n      container.appendChild(vertices);\n      return container;\n    }\n  }\n  /**\r\n   * Create a linear gradient to apply to a line\r\n   *\r\n   * @param {Line} line the line to apply the gradiation to.\r\n   */\n\n\n  createGradient(line) {\n    // create the gradient and add it\n    let gradient = document.createElementNS('http://www.w3.org/2000/svg', 'linearGradient'),\n        gradientUrl = `line-${this.gradientId++}`,\n        l = line.getLeftVector(),\n        r = line.getRightVector(),\n        fromX = l.x + this.offsetX,\n        fromY = l.y + this.offsetY,\n        toX = r.x + this.offsetX,\n        toY = r.y + this.offsetY;\n    gradient.setAttributeNS(null, 'id', gradientUrl);\n    gradient.setAttributeNS(null, 'gradientUnits', 'userSpaceOnUse');\n    gradient.setAttributeNS(null, 'x1', fromX);\n    gradient.setAttributeNS(null, 'y1', fromY);\n    gradient.setAttributeNS(null, 'x2', toX);\n    gradient.setAttributeNS(null, 'y2', toY);\n    let firstStop = document.createElementNS('http://www.w3.org/2000/svg', 'stop');\n    firstStop.setAttributeNS(null, 'stop-color', this.themeManager.getColor(line.getLeftElement()) || this.themeManager.getColor('C'));\n    firstStop.setAttributeNS(null, 'offset', '20%');\n    let secondStop = document.createElementNS('http://www.w3.org/2000/svg', 'stop');\n    secondStop.setAttributeNS(null, 'stop-color', this.themeManager.getColor(line.getRightElement() || this.themeManager.getColor('C')));\n    secondStop.setAttributeNS(null, 'offset', '100%');\n    gradient.appendChild(firstStop);\n    gradient.appendChild(secondStop);\n    this.gradients.push(gradient);\n    return gradientUrl;\n  }\n  /**\r\n   * Create a tspan element for sub or super scripts that styles the text\r\n   * appropriately as one of those text types.\r\n   *\r\n   * @param {String} text the actual text\r\n   * @param {String} shift the type of text, either 'sub', or 'super'\r\n   */\n\n\n  createSubSuperScripts(text, shift) {\n    let elem = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');\n    elem.setAttributeNS(null, 'baseline-shift', shift);\n    elem.appendChild(document.createTextNode(text));\n    elem.setAttributeNS(null, 'class', 'sub');\n    return elem;\n  }\n  /**\r\n   * Determine drawing dimensiosn based on vertex positions.\r\n   *\r\n   * @param {Vertex[]} vertices An array of vertices containing the vertices associated with the current molecule.\r\n   */\n\n\n  determineDimensions(vertices) {\n    // Figure out the final size of the image\n    let maxX = -Number.MAX_VALUE;\n    let maxY = -Number.MAX_VALUE;\n    let minX = Number.MAX_VALUE;\n    let minY = Number.MAX_VALUE;\n\n    for (var i = 0; i < vertices.length; i++) {\n      if (!vertices[i].value.isDrawn) {\n        continue;\n      }\n\n      let p = vertices[i].position;\n      if (maxX < p.x) maxX = p.x;\n      if (maxY < p.y) maxY = p.y;\n      if (minX > p.x) minX = p.x;\n      if (minY > p.y) minY = p.y;\n    } // Add padding\n\n\n    let padding = this.opts.padding;\n    maxX += padding;\n    maxY += padding;\n    minX -= padding;\n    minY -= padding;\n    this.drawingWidth = maxX - minX;\n    this.drawingHeight = maxY - minY;\n    let scaleX = this.svg.clientWidth / this.drawingWidth;\n    let scaleY = this.svg.clientHeight / this.drawingHeight;\n    let scale = scaleX < scaleY ? scaleX : scaleY;\n    let viewBoxDim = Math.round(this.drawingWidth > this.drawingHeight ? this.drawingWidth : this.drawingHeight);\n    this.svg.setAttributeNS(null, 'viewBox', `0 0 ${viewBoxDim} ${viewBoxDim}`);\n    this.offsetX = -minX;\n    this.offsetY = -minY; // Center\n\n    if (scaleX < scaleY) {\n      this.offsetY += this.svg.clientHeight / (2.0 * scale) - this.drawingHeight / 2.0;\n    } else {\n      this.offsetX += this.svg.clientWidth / (2.0 * scale) - this.drawingWidth / 2.0;\n    }\n  }\n  /**\r\n   * Draw an svg ellipse as a ball.\r\n   *\r\n   * @param {Number} x The x position of the text.\r\n   * @param {Number} y The y position of the text.\r\n   * @param {String} elementName The name of the element (single-letter).\r\n   */\n\n\n  drawBall(x, y, elementName) {\n    let ball = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n    ball.setAttributeNS(null, 'cx', x + this.offsetX);\n    ball.setAttributeNS(null, 'cy', y + this.offsetY);\n    ball.setAttributeNS(null, 'r', this.opts.bondLength / 4.5);\n    ball.setAttributeNS(null, 'fill', this.themeManager.getColor(elementName));\n    this.vertices.push(ball);\n  }\n  /**\r\n   * Draw a dashed wedge on the canvas.\r\n   *\r\n   * @param {Line} line A line.\r\n   */\n\n\n  drawDashedWedge(line) {\n    if (isNaN(line.from.x) || isNaN(line.from.y) || isNaN(line.to.x) || isNaN(line.to.y)) {\n      return;\n    }\n\n    let offsetX = this.offsetX,\n        offsetY = this.offsetY,\n        l = line.getLeftVector().clone(),\n        r = line.getRightVector().clone(),\n        normals = Vector2.normals(l, r);\n    normals[0].normalize();\n    normals[1].normalize();\n    let isRightChiralCenter = line.getRightChiral(),\n        start,\n        end;\n\n    if (isRightChiralCenter) {\n      start = r;\n      end = l;\n    } else {\n      start = l;\n      end = r;\n    }\n\n    let dir = Vector2.subtract(end, start).normalize(),\n        length = line.getLength(),\n        step = 1.25 / (length / (this.opts.bondThickness * 3.0)),\n        changed = false;\n    let gradient = this.createGradient(line);\n\n    for (let t = 0.0; t < 1.0; t += step) {\n      let to = Vector2.multiplyScalar(dir, t * length),\n          startDash = Vector2.add(start, to),\n          width = 1.5 * t,\n          dashOffset = Vector2.multiplyScalar(normals[0], width);\n      startDash.subtract(dashOffset);\n      let endDash = startDash.clone();\n      endDash.add(Vector2.multiplyScalar(dashOffset, 2.0));\n      this.drawLine(new Line(startDash, endDash), null, gradient);\n    }\n  }\n  /**\r\n   * Draws a debug dot at a given coordinate and adds text.\r\n   *\r\n   * @param {Number} x The x coordinate.\r\n   * @param {Number} y The y coordindate.\r\n   * @param {String} [debugText=''] A string.\r\n   * @param {String} [color='#f00'] A color in hex form.\r\n   */\n\n\n  drawDebugPoint(x, y, debugText = '', color = '#f00') {\n    let point = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n    point.setAttributeNS(null, 'cx', x + this.offsetX);\n    point.setAttributeNS(null, 'cy', y + this.offsetY);\n    point.setAttributeNS(null, 'r', '2');\n    point.setAttributeNS(null, 'fill', '#f00');\n    this.vertices.push(point);\n    this.drawDebugText(x, y, debugText);\n  }\n  /**\r\n   * Draws a debug text message at a given position\r\n   *\r\n   * @param {Number} x The x coordinate.\r\n   * @param {Number} y The y coordinate.\r\n   * @param {String} text The debug text.\r\n   */\n\n\n  drawDebugText(x, y, text) {\n    let textElem = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n    textElem.setAttributeNS(null, 'x', x + this.offsetX);\n    textElem.setAttributeNS(null, 'y', y + this.offsetY);\n    textElem.setAttributeNS(null, 'class', 'debug');\n    textElem.setAttributeNS(null, 'fill', '#ff0000');\n    textElem.setAttributeNS(null, 'style', `\n                font: 5px Droid Sans, sans-serif;\n            `);\n    textElem.appendChild(document.createTextNode(text));\n    this.vertices.push(textElem);\n  }\n  /**\r\n   * Draws a line.\r\n   *\r\n   * @param {Line} line A line.\r\n   * @param {Boolean} dashed defaults to false.\r\n   * @param {String} gradient gradient url. Defaults to null.\r\n   */\n\n\n  drawLine(line, dashed = false, gradient = null) {\n    let opts = this.opts,\n        stylesArr = [['stroke-linecap', 'round'], ['stroke-dasharray', dashed ? '5, 5' : 'none']],\n        l = line.getLeftVector(),\n        r = line.getRightVector(),\n        fromX = l.x + this.offsetX,\n        fromY = l.y + this.offsetY,\n        toX = r.x + this.offsetX,\n        toY = r.y + this.offsetY;\n    let styles = stylesArr.map(sub => sub.join(':')).join(';'),\n        lineElem = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n    lineElem.setAttributeNS(null, 'x1', fromX);\n    lineElem.setAttributeNS(null, 'y1', fromY);\n    lineElem.setAttributeNS(null, 'x2', toX);\n    lineElem.setAttributeNS(null, 'y2', toY);\n    lineElem.setAttributeNS(null, 'style', styles);\n    this.paths.push(lineElem);\n\n    if (gradient == null) {\n      gradient = this.createGradient(line, fromX, fromY, toX, toY);\n    }\n\n    lineElem.setAttributeNS(null, 'stroke', `url('#${gradient}')`);\n  }\n  /**\r\n   * Draw a point.\r\n   *\r\n   * @param {Number} x The x position of the point.\r\n   * @param {Number} y The y position of the point.\r\n   * @param {String} elementName The name of the element (single-letter).\r\n   */\n\n\n  drawPoint(x, y, elementName) {\n    let ctx = this.ctx;\n    let offsetX = this.offsetX;\n    let offsetY = this.offsetY; // first create a mask\n\n    let mask = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n    mask.setAttributeNS(null, 'cx', x + offsetX);\n    mask.setAttributeNS(null, 'cy', y + offsetY);\n    mask.setAttributeNS(null, 'r', '1.5');\n    mask.setAttributeNS(null, 'fill', 'black');\n    this.maskElements.push(mask); // now create the point\n\n    let point = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n    point.setAttributeNS(null, 'cx', x + offsetX);\n    point.setAttributeNS(null, 'cy', y + offsetY);\n    point.setAttributeNS(null, 'r', '0.75');\n    point.setAttributeNS(null, 'fill', this.themeManager.getColor(elementName));\n    this.vertices.push(point);\n  }\n  /**\r\n   * Draw a text to the canvas.\r\n   *\r\n   * @param {Number} x The x position of the text.\r\n   * @param {Number} y The y position of the text.\r\n   * @param {String} elementName The name of the element (single-letter).\r\n   * @param {Number} hydrogens The number of hydrogen atoms.\r\n   * @param {String} direction The direction of the text in relation to the associated vertex.\r\n   * @param {Boolean} isTerminal A boolean indicating whether or not the vertex is terminal.\r\n   * @param {Number} charge The charge of the atom.\r\n   * @param {Number} isotope The isotope number.\r\n   * @param {Object} attachedPseudoElement A map with containing information for pseudo elements or concatinated elements. The key is comprised of the element symbol and the hydrogen count.\r\n   * @param {String} attachedPseudoElement.element The element symbol.\r\n   * @param {Number} attachedPseudoElement.count The number of occurences that match the key.\r\n   * @param {Number} attachedPseudoElement.hyrogenCount The number of hydrogens attached to each atom matching the key.\r\n   */\n\n\n  drawText(x, y, elementName, hydrogens, direction, isTerminal, charge, isotope, attachedPseudoElement = {}) {\n    let offsetX = this.offsetX,\n        offsetY = this.offsetY,\n        pos = {\n      x: x + offsetX,\n      y: y + offsetY\n    },\n        textElem = document.createElementNS('http://www.w3.org/2000/svg', 'text'),\n        writingMode = 'horizontal-tb',\n        letterSpacing = 'normal',\n        textOrientation = 'mixed',\n        textDirection = 'direction: ltr;',\n        xShift = -2,\n        yShift = 2.5;\n    let mask = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n    mask.setAttributeNS(null, 'cx', pos.x);\n    mask.setAttributeNS(null, 'cy', pos.y);\n    mask.setAttributeNS(null, 'r', '3.5');\n    mask.setAttributeNS(null, 'fill', 'black');\n    this.maskElements.push(mask); // determine writing mode\n\n    if (/up|down/.test(direction) && !isTerminal) {\n      writingMode = 'vertical-rl';\n      textOrientation = 'upright';\n      letterSpacing = '-1px';\n    }\n\n    if (direction === 'down' && !isTerminal) {\n      xShift = 0;\n      yShift = -2;\n    } else if (direction === 'up' && !isTerminal) {\n      xShift = 0.5;\n    } else if (direction === 'left') {\n      xShift = 2;\n    }\n\n    if (direction === 'left' || direction === 'up' && !isTerminal) {\n      textDirection = 'direction: rtl; unicode-bidi: bidi-override;';\n    } // now the text element\n\n\n    textElem.setAttributeNS(null, 'x', pos.x + xShift);\n    textElem.setAttributeNS(null, 'y', pos.y + yShift);\n    textElem.setAttributeNS(null, 'class', 'element');\n    textElem.setAttributeNS(null, 'fill', this.themeManager.getColor(elementName));\n    textElem.setAttributeNS(null, 'style', `\n                text-anchor: start;\n                writing-mode: ${writingMode};\n                text-orientation: ${textOrientation};\n                letter-spacing: ${letterSpacing};\n                ${textDirection}\n            `);\n    let textNode = document.createElementNS('http://www.w3.org/2000/svg', 'tspan'); // special case for element names that are 2 letters\n\n    if (elementName.length > 1) {\n      let textAnchor = /up|down/.test(direction) ? 'middle' : 'start';\n      textNode.setAttributeNS(null, 'style', `\n                unicode-bidi: plaintext;\n                writing-mode: lr-tb;\n                letter-spacing: normal;\n                text-anchor: ${textAnchor};\n            `);\n    }\n\n    textNode.appendChild(document.createTextNode(elementName));\n    textElem.appendChild(textNode); // Charge\n\n    if (charge) {\n      let chargeElem = this.createSubSuperScripts(getChargeText(charge), 'super');\n      textNode.appendChild(chargeElem);\n    }\n\n    let isotopeText = '0';\n\n    if (isotope > 0) {\n      let isotopeElem = this.createSubSuperScripts(isotope.toString(), 'super');\n      textNode.appendChild(isotopeElem);\n    } // TODO: Better handle exceptions\n    // Exception for nitro (draw nitro as NO2 instead of N+O-O)\n\n\n    if (charge === 1 && elementName === 'N' && attachedPseudoElement.hasOwnProperty('0O') && attachedPseudoElement.hasOwnProperty('0O-1')) {\n      attachedPseudoElement = {\n        '0O': {\n          element: 'O',\n          count: 2,\n          hydrogenCount: 0,\n          previousElement: 'C',\n          charge: ''\n        }\n      };\n      charge = 0;\n    }\n\n    if (hydrogens > 0) {\n      let hydrogenElem = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');\n      hydrogenElem.setAttributeNS(null, 'style', 'unicode-bidi: plaintext;');\n      hydrogenElem.appendChild(document.createTextNode('H'));\n      textElem.appendChild(hydrogenElem);\n\n      if (hydrogens > 1) {\n        let hydrogenCountElem = this.createSubSuperScripts(hydrogens, 'sub');\n        hydrogenElem.appendChild(hydrogenCountElem);\n      }\n    }\n\n    for (let key in attachedPseudoElement) {\n      if (!attachedPseudoElement.hasOwnProperty(key)) {\n        continue;\n      }\n\n      let element = attachedPseudoElement[key].element,\n          elementCount = attachedPseudoElement[key].count,\n          hydrogenCount = attachedPseudoElement[key].hydrogenCount,\n          elementCharge = attachedPseudoElement[key].charge,\n          pseudoElementElem = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');\n      pseudoElementElem.setAttributeNS(null, 'style', 'unicode-bidi: plaintext;');\n      pseudoElementElem.appendChild(document.createTextNode(element));\n      pseudoElementElem.setAttributeNS(null, 'fill', this.themeManager.getColor(element));\n\n      if (elementCharge !== 0) {\n        let elementChargeElem = this.createSubSuperScripts(getChargeText(elementCharge), 'super');\n        pseudoElementElem.appendChild(elementChargeElem);\n      }\n\n      if (hydrogenCount > 0) {\n        let pseudoHydrogenElem = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');\n        pseudoHydrogenElem.setAttributeNS(null, 'style', 'unicode-bidi: plaintext;');\n        pseudoHydrogenElem.appendChild(document.createTextNode('H'));\n        pseudoElementElem.appendChild(pseudoHydrogenElem);\n\n        if (hydrogenCount > 1) {\n          let hydrogenCountElem = this.createSubSuperScripts(hydrogenCount, 'sub');\n          pseudoHydrogenElem.appendChild(hydrogenCountElem);\n        }\n      }\n\n      if (elementCount > 1) {\n        let elementCountElem = this.createSubSuperScripts(elementCount, 'sub');\n        pseudoElementElem.appendChild(elementCountElem);\n      }\n\n      textElem.appendChild(pseudoElementElem);\n    }\n\n    this.vertices.push(textElem);\n  }\n  /**\r\n   * @param {Line} line the line object to create the wedge from\r\n   */\n\n\n  drawWedge(line) {\n    let offsetX = this.offsetX,\n        offsetY = this.offsetY,\n        l = line.getLeftVector().clone(),\n        r = line.getRightVector().clone();\n    l.x += offsetX;\n    l.y += offsetY;\n    r.x += offsetX;\n    r.y += offsetY;\n    let normals = Vector2.normals(l, r);\n    normals[0].normalize();\n    normals[1].normalize();\n    let isRightChiralCenter = line.getRightChiral();\n    let start = l,\n        end = r;\n\n    if (isRightChiralCenter) {\n      start = r;\n      end = l;\n    }\n\n    let t = Vector2.add(start, Vector2.multiplyScalar(normals[0], this.halfBondThickness)),\n        u = Vector2.add(end, Vector2.multiplyScalar(normals[0], 1.5 + this.halfBondThickness)),\n        v = Vector2.add(end, Vector2.multiplyScalar(normals[1], 1.5 + this.halfBondThickness)),\n        w = Vector2.add(start, Vector2.multiplyScalar(normals[1], this.halfBondThickness));\n    let polygon = document.createElementNS('http://www.w3.org/2000/svg', 'polygon'),\n        gradient = this.createGradient(line, l.x, l.y, r.x, r.y);\n    polygon.setAttributeNS(null, 'points', `${t.x},${t.y} ${u.x},${u.y} ${v.x},${v.y} ${w.x},${w.y}`);\n    polygon.setAttributeNS(null, 'fill', `url('#${gradient}')`);\n    this.paths.push(polygon);\n  }\n\n}\n\nmodule.exports = SvgWrapper;","map":{"version":3,"sources":["/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/smiles-drawer/src/SvgWrapper.js"],"names":["getChargeText","require","Line","Vector2","SvgWrapper","constructor","themeManager","target","options","svg","document","getElementById","opts","gradientId","paths","vertices","gradients","offsetX","offsetY","drawingWidth","drawingHeight","halfBondThickness","bondThickness","maskElements","mask","createElementNS","setAttributeNS","push","firstChild","removeChild","constructSvg","defs","masks","style","pathChildNodes","appendChild","createTextNode","fontSizeLarge","fontSizeSmall","path","vertex","gradient","container","createGradient","line","gradientUrl","l","getLeftVector","r","getRightVector","fromX","x","fromY","y","toX","toY","firstStop","getColor","getLeftElement","secondStop","getRightElement","createSubSuperScripts","text","shift","elem","determineDimensions","maxX","Number","MAX_VALUE","maxY","minX","minY","i","length","value","isDrawn","p","position","padding","scaleX","clientWidth","scaleY","clientHeight","scale","viewBoxDim","Math","round","drawBall","elementName","ball","bondLength","drawDashedWedge","isNaN","from","to","clone","normals","normalize","isRightChiralCenter","getRightChiral","start","end","dir","subtract","getLength","step","changed","t","multiplyScalar","startDash","add","width","dashOffset","endDash","drawLine","drawDebugPoint","debugText","color","point","drawDebugText","textElem","dashed","stylesArr","styles","map","sub","join","lineElem","drawPoint","ctx","drawText","hydrogens","direction","isTerminal","charge","isotope","attachedPseudoElement","pos","writingMode","letterSpacing","textOrientation","textDirection","xShift","yShift","test","textNode","textAnchor","chargeElem","isotopeText","isotopeElem","toString","hasOwnProperty","element","count","hydrogenCount","previousElement","hydrogenElem","hydrogenCountElem","key","elementCount","elementCharge","pseudoElementElem","elementChargeElem","pseudoHydrogenElem","elementCountElem","drawWedge","u","v","w","polygon","module","exports"],"mappings":"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","sourcesContent":["const {\r\n  getChargeText\r\n} = require('./UtilityFunctions');\r\n\r\nconst Line = require('./Line');\r\nconst Vector2 = require('./Vector2');\r\n\r\nclass SvgWrapper {\r\n  constructor(themeManager, target, options) {\r\n    this.svg = document.getElementById(target);\r\n    this.opts = options;\r\n    this.gradientId = 0;\r\n\r\n    // maintain a list of line elements and their corresponding gradients\r\n    // maintain a list of vertex elements\r\n    this.paths = [];\r\n    this.vertices = [];\r\n    this.gradients = [];\r\n\r\n    // maintain the offset for drawing purposes\r\n    this.offsetX = 0.0;\r\n    this.offsetY = 0.0;\r\n\r\n    // maintain the dimensions\r\n    this.drawingWidth = 0;\r\n    this.drawingHeight = 0;\r\n    this.halfBondThickness = this.opts.bondThickness / 2.0;\r\n\r\n    // for managing color schemes\r\n    this.themeManager = themeManager;\r\n\r\n    // create the mask\r\n    this.maskElements = [];\r\n\r\n    let mask = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\r\n    mask.setAttributeNS(null, 'x', 0);\r\n    mask.setAttributeNS(null, 'y', 0);\r\n    mask.setAttributeNS(null, 'width', '100%');\r\n    mask.setAttributeNS(null, 'height', '100%');\r\n    mask.setAttributeNS(null, 'fill', 'white');\r\n\r\n    this.maskElements.push(mask);\r\n\r\n    // clear the svg element\r\n    while (this.svg.firstChild) {\r\n      this.svg.removeChild(this.svg.firstChild);\r\n    }\r\n  }\r\n\r\n  constructSvg() {\r\n    // TODO: add the defs element to put gradients in\r\n    let defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs'),\r\n      masks = document.createElementNS('http://www.w3.org/2000/svg', 'mask'),\r\n      style = document.createElementNS('http://www.w3.org/2000/svg', 'style'),\r\n      paths = document.createElementNS('http://www.w3.org/2000/svg', 'g'),\r\n      vertices = document.createElementNS('http://www.w3.org/2000/svg', 'g'),\r\n      pathChildNodes = this.paths;\r\n\r\n    // give the mask an id\r\n    masks.setAttributeNS(null, 'id', 'text-mask');\r\n\r\n    // create the css styles\r\n    style.appendChild(document.createTextNode(`\r\n                .element {\r\n                    font: ${this.opts.fontSizeLarge}pt Helvetica, Arial, sans-serif;\r\n                    alignment-baseline: 'middle';\r\n                }\r\n                .sub {\r\n                    font: ${this.opts.fontSizeSmall}pt Helvetica, Arial, sans-serif;\r\n                }\r\n            `));\r\n\r\n    for (let path of pathChildNodes) {\r\n      paths.appendChild(path);\r\n    }\r\n    for (let vertex of this.vertices) {\r\n      vertices.appendChild(vertex);\r\n    }\r\n    for (let mask of this.maskElements) {\r\n      masks.appendChild(mask);\r\n    }\r\n    for (let gradient of this.gradients) {\r\n      defs.appendChild(gradient);\r\n    }\r\n\r\n    paths.setAttributeNS(null, 'mask', 'url(#text-mask)');\r\n\r\n    if (this.svg) {\r\n      this.svg.appendChild(defs);\r\n      this.svg.appendChild(masks);\r\n      this.svg.appendChild(style);\r\n      this.svg.appendChild(paths);\r\n      this.svg.appendChild(vertices);\r\n      return this.svg;\r\n    } else {\r\n      let container = document.createElementNS('http://www.w3.org/2000/svg', 'g');\r\n      container.appendChild(defs);\r\n      container.appendChild(masks);\r\n      container.appendChild(style);\r\n      container.appendChild(paths);\r\n      container.appendChild(vertices);\r\n      return container;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a linear gradient to apply to a line\r\n   *\r\n   * @param {Line} line the line to apply the gradiation to.\r\n   */\r\n  createGradient(line) {\r\n    // create the gradient and add it\r\n    let gradient = document.createElementNS('http://www.w3.org/2000/svg', 'linearGradient'),\r\n      gradientUrl = `line-${this.gradientId++}`,\r\n      l = line.getLeftVector(),\r\n      r = line.getRightVector(),\r\n      fromX = l.x + this.offsetX,\r\n      fromY = l.y + this.offsetY,\r\n      toX = r.x + this.offsetX,\r\n      toY = r.y + this.offsetY;\r\n\r\n    gradient.setAttributeNS(null, 'id', gradientUrl);\r\n    gradient.setAttributeNS(null, 'gradientUnits', 'userSpaceOnUse');\r\n    gradient.setAttributeNS(null, 'x1', fromX);\r\n    gradient.setAttributeNS(null, 'y1', fromY);\r\n    gradient.setAttributeNS(null, 'x2', toX);\r\n    gradient.setAttributeNS(null, 'y2', toY);\r\n\r\n    let firstStop = document.createElementNS('http://www.w3.org/2000/svg', 'stop');\r\n    firstStop.setAttributeNS(null, 'stop-color', this.themeManager.getColor(line.getLeftElement()) || this.themeManager.getColor('C'));\r\n    firstStop.setAttributeNS(null, 'offset', '20%');\r\n\r\n    let secondStop = document.createElementNS('http://www.w3.org/2000/svg', 'stop');\r\n    secondStop.setAttributeNS(null, 'stop-color', this.themeManager.getColor(line.getRightElement() || this.themeManager.getColor('C')));\r\n    secondStop.setAttributeNS(null, 'offset', '100%');\r\n\r\n    gradient.appendChild(firstStop);\r\n    gradient.appendChild(secondStop);\r\n\r\n    this.gradients.push(gradient);\r\n\r\n    return gradientUrl;\r\n  }\r\n\r\n  /**\r\n   * Create a tspan element for sub or super scripts that styles the text\r\n   * appropriately as one of those text types.\r\n   *\r\n   * @param {String} text the actual text\r\n   * @param {String} shift the type of text, either 'sub', or 'super'\r\n   */\r\n  createSubSuperScripts(text, shift) {\r\n    let elem = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');\r\n    elem.setAttributeNS(null, 'baseline-shift', shift);\r\n    elem.appendChild(document.createTextNode(text));\r\n    elem.setAttributeNS(null, 'class', 'sub');\r\n\r\n    return elem;\r\n  }\r\n\r\n  /**\r\n   * Determine drawing dimensiosn based on vertex positions.\r\n   *\r\n   * @param {Vertex[]} vertices An array of vertices containing the vertices associated with the current molecule.\r\n   */\r\n  determineDimensions(vertices) {\r\n    // Figure out the final size of the image\r\n    let maxX = -Number.MAX_VALUE;\r\n    let maxY = -Number.MAX_VALUE;\r\n    let minX = Number.MAX_VALUE;\r\n    let minY = Number.MAX_VALUE;\r\n\r\n    for (var i = 0; i < vertices.length; i++) {\r\n      if (!vertices[i].value.isDrawn) {\r\n        continue;\r\n      }\r\n\r\n      let p = vertices[i].position;\r\n\r\n      if (maxX < p.x) maxX = p.x;\r\n      if (maxY < p.y) maxY = p.y;\r\n      if (minX > p.x) minX = p.x;\r\n      if (minY > p.y) minY = p.y;\r\n    }\r\n\r\n    // Add padding\r\n    let padding = this.opts.padding;\r\n    maxX += padding;\r\n    maxY += padding;\r\n    minX -= padding;\r\n    minY -= padding;\r\n\r\n    this.drawingWidth = maxX - minX;\r\n    this.drawingHeight = maxY - minY;\r\n\r\n    let scaleX = this.svg.clientWidth / this.drawingWidth;\r\n    let scaleY = this.svg.clientHeight / this.drawingHeight;\r\n\r\n    let scale = (scaleX < scaleY) ? scaleX : scaleY;\r\n    let viewBoxDim = Math.round(this.drawingWidth > this.drawingHeight ? this.drawingWidth : this.drawingHeight);\r\n\r\n    this.svg.setAttributeNS(null, 'viewBox', `0 0 ${viewBoxDim} ${viewBoxDim}`);\r\n\r\n    this.offsetX = -minX;\r\n    this.offsetY = -minY;\r\n\r\n    // Center\r\n    if (scaleX < scaleY) {\r\n      this.offsetY += this.svg.clientHeight / (2.0 * scale) - this.drawingHeight / 2.0;\r\n    } else {\r\n      this.offsetX += this.svg.clientWidth / (2.0 * scale) - this.drawingWidth / 2.0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw an svg ellipse as a ball.\r\n   *\r\n   * @param {Number} x The x position of the text.\r\n   * @param {Number} y The y position of the text.\r\n   * @param {String} elementName The name of the element (single-letter).\r\n   */\r\n  drawBall(x, y, elementName) {\r\n    let ball = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\r\n    ball.setAttributeNS(null, 'cx', x + this.offsetX);\r\n    ball.setAttributeNS(null, 'cy', y + this.offsetY);\r\n    ball.setAttributeNS(null, 'r', this.opts.bondLength / 4.5);\r\n    ball.setAttributeNS(null, 'fill', this.themeManager.getColor(elementName));\r\n\r\n    this.vertices.push(ball);\r\n  }\r\n\r\n  /**\r\n   * Draw a dashed wedge on the canvas.\r\n   *\r\n   * @param {Line} line A line.\r\n   */\r\n  drawDashedWedge(line) {\r\n    if (isNaN(line.from.x) || isNaN(line.from.y) ||\r\n      isNaN(line.to.x) || isNaN(line.to.y)) {\r\n      return;\r\n    }\r\n\r\n    let offsetX = this.offsetX,\r\n      offsetY = this.offsetY,\r\n      l = line.getLeftVector().clone(),\r\n      r = line.getRightVector().clone(),\r\n      normals = Vector2.normals(l, r);\r\n\r\n    normals[0].normalize();\r\n    normals[1].normalize();\r\n\r\n    let isRightChiralCenter = line.getRightChiral(),\r\n      start,\r\n      end;\r\n\r\n    if (isRightChiralCenter) {\r\n      start = r;\r\n      end = l;\r\n    } else {\r\n      start = l;\r\n      end = r;\r\n    }\r\n\r\n    let dir = Vector2.subtract(end, start).normalize(),\r\n      length = line.getLength(),\r\n      step = 1.25 / (length / (this.opts.bondThickness * 3.0)),\r\n      changed = false;\r\n\r\n    let gradient = this.createGradient(line);\r\n\r\n    for (let t = 0.0; t < 1.0; t += step) {\r\n      let to = Vector2.multiplyScalar(dir, t * length),\r\n        startDash = Vector2.add(start, to),\r\n        width = 1.5 * t,\r\n        dashOffset = Vector2.multiplyScalar(normals[0], width);\r\n\r\n      startDash.subtract(dashOffset);\r\n      let endDash = startDash.clone();\r\n      endDash.add(Vector2.multiplyScalar(dashOffset, 2.0));\r\n\r\n      this.drawLine(new Line(startDash, endDash), null, gradient);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draws a debug dot at a given coordinate and adds text.\r\n   *\r\n   * @param {Number} x The x coordinate.\r\n   * @param {Number} y The y coordindate.\r\n   * @param {String} [debugText=''] A string.\r\n   * @param {String} [color='#f00'] A color in hex form.\r\n   */\r\n  drawDebugPoint(x, y, debugText = '', color = '#f00') {\r\n    let point = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\r\n    point.setAttributeNS(null, 'cx', x + this.offsetX);\r\n    point.setAttributeNS(null, 'cy', y + this.offsetY);\r\n    point.setAttributeNS(null, 'r', '2');\r\n    point.setAttributeNS(null, 'fill', '#f00');\r\n    this.vertices.push(point);\r\n    this.drawDebugText(x, y, debugText);\r\n  }\r\n\r\n  /**\r\n   * Draws a debug text message at a given position\r\n   *\r\n   * @param {Number} x The x coordinate.\r\n   * @param {Number} y The y coordinate.\r\n   * @param {String} text The debug text.\r\n   */\r\n  drawDebugText(x, y, text) {\r\n    let textElem = document.createElementNS('http://www.w3.org/2000/svg', 'text');\r\n    textElem.setAttributeNS(null, 'x', x + this.offsetX);\r\n    textElem.setAttributeNS(null, 'y', y + this.offsetY);\r\n    textElem.setAttributeNS(null, 'class', 'debug');\r\n    textElem.setAttributeNS(null, 'fill', '#ff0000');\r\n    textElem.setAttributeNS(null, 'style', `\r\n                font: 5px Droid Sans, sans-serif;\r\n            `);\r\n    textElem.appendChild(document.createTextNode(text));\r\n\r\n    this.vertices.push(textElem);\r\n  }\r\n\r\n  /**\r\n   * Draws a line.\r\n   *\r\n   * @param {Line} line A line.\r\n   * @param {Boolean} dashed defaults to false.\r\n   * @param {String} gradient gradient url. Defaults to null.\r\n   */\r\n  drawLine(line, dashed = false, gradient = null) {\r\n    let opts = this.opts,\r\n      stylesArr = [\r\n                ['stroke-linecap', 'round'],\r\n                ['stroke-dasharray', dashed ? '5, 5' : 'none'],\r\n            ],\r\n      l = line.getLeftVector(),\r\n      r = line.getRightVector(),\r\n      fromX = l.x + this.offsetX,\r\n      fromY = l.y + this.offsetY,\r\n      toX = r.x + this.offsetX,\r\n      toY = r.y + this.offsetY;\r\n\r\n    let styles = stylesArr.map(sub => sub.join(':')).join(';'),\r\n      lineElem = document.createElementNS('http://www.w3.org/2000/svg', 'line');\r\n\r\n    lineElem.setAttributeNS(null, 'x1', fromX);\r\n    lineElem.setAttributeNS(null, 'y1', fromY);\r\n    lineElem.setAttributeNS(null, 'x2', toX);\r\n    lineElem.setAttributeNS(null, 'y2', toY);\r\n    lineElem.setAttributeNS(null, 'style', styles);\r\n    this.paths.push(lineElem);\r\n\r\n    if (gradient == null) {\r\n      gradient = this.createGradient(line, fromX, fromY, toX, toY);\r\n    }\r\n    lineElem.setAttributeNS(null, 'stroke', `url('#${gradient}')`);\r\n  }\r\n\r\n  /**\r\n   * Draw a point.\r\n   *\r\n   * @param {Number} x The x position of the point.\r\n   * @param {Number} y The y position of the point.\r\n   * @param {String} elementName The name of the element (single-letter).\r\n   */\r\n  drawPoint(x, y, elementName) {\r\n    let ctx = this.ctx;\r\n    let offsetX = this.offsetX;\r\n    let offsetY = this.offsetY;\r\n\r\n    // first create a mask\r\n    let mask = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\r\n    mask.setAttributeNS(null, 'cx', x + offsetX);\r\n    mask.setAttributeNS(null, 'cy', y + offsetY);\r\n    mask.setAttributeNS(null, 'r', '1.5');\r\n    mask.setAttributeNS(null, 'fill', 'black');\r\n    this.maskElements.push(mask);\r\n\r\n    // now create the point\r\n    let point = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\r\n    point.setAttributeNS(null, 'cx', x + offsetX);\r\n    point.setAttributeNS(null, 'cy', y + offsetY);\r\n    point.setAttributeNS(null, 'r', '0.75');\r\n    point.setAttributeNS(null, 'fill', this.themeManager.getColor(elementName));\r\n    this.vertices.push(point);\r\n  }\r\n\r\n  /**\r\n   * Draw a text to the canvas.\r\n   *\r\n   * @param {Number} x The x position of the text.\r\n   * @param {Number} y The y position of the text.\r\n   * @param {String} elementName The name of the element (single-letter).\r\n   * @param {Number} hydrogens The number of hydrogen atoms.\r\n   * @param {String} direction The direction of the text in relation to the associated vertex.\r\n   * @param {Boolean} isTerminal A boolean indicating whether or not the vertex is terminal.\r\n   * @param {Number} charge The charge of the atom.\r\n   * @param {Number} isotope The isotope number.\r\n   * @param {Object} attachedPseudoElement A map with containing information for pseudo elements or concatinated elements. The key is comprised of the element symbol and the hydrogen count.\r\n   * @param {String} attachedPseudoElement.element The element symbol.\r\n   * @param {Number} attachedPseudoElement.count The number of occurences that match the key.\r\n   * @param {Number} attachedPseudoElement.hyrogenCount The number of hydrogens attached to each atom matching the key.\r\n   */\r\n  drawText(x, y, elementName, hydrogens, direction, isTerminal, charge, isotope, attachedPseudoElement = {}) {\r\n    let offsetX = this.offsetX,\r\n      offsetY = this.offsetY,\r\n      pos = {\r\n        x: x + offsetX,\r\n        y: y + offsetY,\r\n      },\r\n      textElem = document.createElementNS('http://www.w3.org/2000/svg', 'text'),\r\n      writingMode = 'horizontal-tb',\r\n      letterSpacing = 'normal',\r\n      textOrientation = 'mixed',\r\n      textDirection = 'direction: ltr;',\r\n      xShift = -2,\r\n      yShift = 2.5;\r\n\r\n    let mask = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\r\n    mask.setAttributeNS(null, 'cx', pos.x);\r\n    mask.setAttributeNS(null, 'cy', pos.y);\r\n    mask.setAttributeNS(null, 'r', '3.5');\r\n    mask.setAttributeNS(null, 'fill', 'black');\r\n    this.maskElements.push(mask);\r\n\r\n    // determine writing mode\r\n    if (/up|down/.test(direction) && !isTerminal) {\r\n      writingMode = 'vertical-rl';\r\n      textOrientation = 'upright';\r\n      letterSpacing = '-1px';\r\n    }\r\n\r\n    if (direction === 'down' && !isTerminal) {\r\n      xShift = 0;\r\n      yShift = -2;\r\n    } else if (direction === 'up' && !isTerminal) {\r\n      xShift = 0.5;\r\n    } else if (direction === 'left') {\r\n      xShift = 2;\r\n    }\r\n\r\n    if (direction === 'left' || (direction === 'up' && !isTerminal)) {\r\n      textDirection = 'direction: rtl; unicode-bidi: bidi-override;'\r\n    }\r\n\r\n    // now the text element\r\n    textElem.setAttributeNS(null, 'x', pos.x + xShift);\r\n    textElem.setAttributeNS(null, 'y', pos.y + yShift);\r\n    textElem.setAttributeNS(null, 'class', 'element');\r\n    textElem.setAttributeNS(null, 'fill', this.themeManager.getColor(elementName));\r\n    textElem.setAttributeNS(null, 'style', `\r\n                text-anchor: start;\r\n                writing-mode: ${writingMode};\r\n                text-orientation: ${textOrientation};\r\n                letter-spacing: ${letterSpacing};\r\n                ${textDirection}\r\n            `);\r\n\r\n    let textNode = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');\r\n    // special case for element names that are 2 letters\r\n    if (elementName.length > 1) {\r\n      let textAnchor = /up|down/.test(direction) ? 'middle' : 'start';\r\n\r\n      textNode.setAttributeNS(null, 'style', `\r\n                unicode-bidi: plaintext;\r\n                writing-mode: lr-tb;\r\n                letter-spacing: normal;\r\n                text-anchor: ${textAnchor};\r\n            `);\r\n    }\r\n    textNode.appendChild(document.createTextNode(elementName));\r\n    textElem.appendChild(textNode);\r\n\r\n    // Charge\r\n    if (charge) {\r\n      let chargeElem = this.createSubSuperScripts(getChargeText(charge), 'super');\r\n      textNode.appendChild(chargeElem);\r\n    }\r\n\r\n    let isotopeText = '0';\r\n\r\n    if (isotope > 0) {\r\n      let isotopeElem = this.createSubSuperScripts(isotope.toString(), 'super');\r\n      textNode.appendChild(isotopeElem);\r\n    }\r\n\r\n\r\n    // TODO: Better handle exceptions\r\n    // Exception for nitro (draw nitro as NO2 instead of N+O-O)\r\n    if (charge === 1 && elementName === 'N' && attachedPseudoElement.hasOwnProperty('0O') &&\r\n      attachedPseudoElement.hasOwnProperty('0O-1')) {\r\n      attachedPseudoElement = {\r\n        '0O': {\r\n          element: 'O',\r\n          count: 2,\r\n          hydrogenCount: 0,\r\n          previousElement: 'C',\r\n          charge: ''\r\n        }\r\n      }\r\n      charge = 0;\r\n    }\r\n\r\n    if (hydrogens > 0) {\r\n      let hydrogenElem = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');\r\n      hydrogenElem.setAttributeNS(null, 'style', 'unicode-bidi: plaintext;');\r\n      hydrogenElem.appendChild(document.createTextNode('H'));\r\n      textElem.appendChild(hydrogenElem);\r\n\r\n      if (hydrogens > 1) {\r\n        let hydrogenCountElem = this.createSubSuperScripts(hydrogens, 'sub');\r\n        hydrogenElem.appendChild(hydrogenCountElem);\r\n      }\r\n    }\r\n\r\n    for (let key in attachedPseudoElement) {\r\n      if (!attachedPseudoElement.hasOwnProperty(key)) {\r\n        continue;\r\n      }\r\n\r\n      let element = attachedPseudoElement[key].element,\r\n        elementCount = attachedPseudoElement[key].count,\r\n        hydrogenCount = attachedPseudoElement[key].hydrogenCount,\r\n        elementCharge = attachedPseudoElement[key].charge,\r\n        pseudoElementElem = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');\r\n\r\n      pseudoElementElem.setAttributeNS(null, 'style', 'unicode-bidi: plaintext;');\r\n      pseudoElementElem.appendChild(document.createTextNode(element));\r\n      pseudoElementElem.setAttributeNS(null, 'fill', this.themeManager.getColor(element));\r\n\r\n      if (elementCharge !== 0) {\r\n        let elementChargeElem = this.createSubSuperScripts(getChargeText(elementCharge), 'super');\r\n        pseudoElementElem.appendChild(elementChargeElem);\r\n      }\r\n\r\n      if (hydrogenCount > 0) {\r\n        let pseudoHydrogenElem = document.createElementNS('http://www.w3.org/2000/svg', 'tspan');\r\n\r\n        pseudoHydrogenElem.setAttributeNS(null, 'style', 'unicode-bidi: plaintext;');\r\n        pseudoHydrogenElem.appendChild(document.createTextNode('H'));\r\n        pseudoElementElem.appendChild(pseudoHydrogenElem);\r\n\r\n        if (hydrogenCount > 1) {\r\n          let hydrogenCountElem = this.createSubSuperScripts(hydrogenCount, 'sub');\r\n          pseudoHydrogenElem.appendChild(hydrogenCountElem);\r\n        }\r\n      }\r\n\r\n      if (elementCount > 1) {\r\n        let elementCountElem = this.createSubSuperScripts(elementCount, 'sub');\r\n        pseudoElementElem.appendChild(elementCountElem);\r\n      }\r\n\r\n      textElem.appendChild(pseudoElementElem);\r\n    }\r\n\r\n    this.vertices.push(textElem);\r\n  }\r\n\r\n  /**\r\n   * @param {Line} line the line object to create the wedge from\r\n   */\r\n  drawWedge(line) {\r\n    let offsetX = this.offsetX,\r\n      offsetY = this.offsetY,\r\n      l = line.getLeftVector().clone(),\r\n      r = line.getRightVector().clone();\r\n\r\n    l.x += offsetX;\r\n    l.y += offsetY;\r\n\r\n    r.x += offsetX;\r\n    r.y += offsetY;\r\n\r\n    let normals = Vector2.normals(l, r);\r\n\r\n    normals[0].normalize();\r\n    normals[1].normalize();\r\n\r\n    let isRightChiralCenter = line.getRightChiral();\r\n\r\n    let start = l,\r\n      end = r;\r\n\r\n    if (isRightChiralCenter) {\r\n      start = r;\r\n      end = l;\r\n    }\r\n\r\n    let t = Vector2.add(start, Vector2.multiplyScalar(normals[0], this.halfBondThickness)),\r\n      u = Vector2.add(end, Vector2.multiplyScalar(normals[0], 1.5 + this.halfBondThickness)),\r\n      v = Vector2.add(end, Vector2.multiplyScalar(normals[1], 1.5 + this.halfBondThickness)),\r\n      w = Vector2.add(start, Vector2.multiplyScalar(normals[1], this.halfBondThickness));\r\n\r\n    let polygon = document.createElementNS('http://www.w3.org/2000/svg', 'polygon'),\r\n      gradient = this.createGradient(line, l.x, l.y, r.x, r.y);\r\n    polygon.setAttributeNS(null, 'points', `${t.x},${t.y} ${u.x},${u.y} ${v.x},${v.y} ${w.x},${w.y}`);\r\n    polygon.setAttributeNS(null, 'fill', `url('#${gradient}')`);\r\n    this.paths.push(polygon);\r\n  }\r\n}\r\n\r\nmodule.exports = SvgWrapper;"]},"metadata":{},"sourceType":"script"}