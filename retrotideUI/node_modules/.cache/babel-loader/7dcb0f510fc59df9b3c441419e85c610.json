{"ast":null,"code":"class ThemeManager {\n  constructor(colors, theme) {\n    this.colors = colors;\n    this.theme = this.colors[theme];\n  }\n  /**\r\n   * Returns the hex code of a color associated with a key from the current theme.\r\n   *\r\n   * @param {String} key The color key in the theme (e.g. C, N, BACKGROUND, ...).\r\n   * @returns {String} A color hex value.\r\n   */\n\n\n  getColor(key) {\n    if (key) {\n      key = key.toUpperCase();\n\n      if (key in this.theme) {\n        return this.theme[key];\n      }\n    }\n\n    return this.theme['C'];\n  }\n  /**\r\n   * Sets the theme to the specified string if it exists. If it does not, this\r\n   * does nothing.\r\n   *\r\n   * @param {String} theme the name of the theme to switch to\r\n   */\n\n\n  setTheme(theme) {\n    if (this.colors.hasOwnProperty(theme)) {\n      this.theme = this.colors[theme];\n    } // TODO: this probably should notify those who are watching this theme\n    // manager that the theme has changed so that colors can be changed\n    // on the fly\n\n  }\n\n}\n\nmodule.exports = ThemeManager;","map":{"version":3,"sources":["/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/smiles-drawer/src/ThemeManager.js"],"names":["ThemeManager","constructor","colors","theme","getColor","key","toUpperCase","setTheme","hasOwnProperty","module","exports"],"mappings":"AAAA,MAAMA,YAAN,CAAmB;AACjBC,EAAAA,WAAW,CAACC,MAAD,EAASC,KAAT,EAAgB;AACzB,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAa,KAAKD,MAAL,CAAYC,KAAZ,CAAb;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,QAAQ,CAACC,GAAD,EAAM;AACZ,QAAIA,GAAJ,EAAS;AACPA,MAAAA,GAAG,GAAGA,GAAG,CAACC,WAAJ,EAAN;;AAEA,UAAID,GAAG,IAAI,KAAKF,KAAhB,EAAuB;AACrB,eAAO,KAAKA,KAAL,CAAWE,GAAX,CAAP;AACD;AACF;;AAED,WAAO,KAAKF,KAAL,CAAW,GAAX,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEI,EAAAA,QAAQ,CAACJ,KAAD,EAAQ;AACd,QAAI,KAAKD,MAAL,CAAYM,cAAZ,CAA2BL,KAA3B,CAAJ,EAAuC;AACrC,WAAKA,KAAL,GAAa,KAAKD,MAAL,CAAYC,KAAZ,CAAb;AACD,KAHa,CAKd;AACA;AACA;;AACD;;AAtCgB;;AAyCnBM,MAAM,CAACC,OAAP,GAAiBV,YAAjB","sourcesContent":["class ThemeManager {\r\n  constructor(colors, theme) {\r\n    this.colors = colors;\r\n    this.theme = this.colors[theme];\r\n  }\r\n\r\n  /**\r\n   * Returns the hex code of a color associated with a key from the current theme.\r\n   *\r\n   * @param {String} key The color key in the theme (e.g. C, N, BACKGROUND, ...).\r\n   * @returns {String} A color hex value.\r\n   */\r\n  getColor(key) {\r\n    if (key) {\r\n      key = key.toUpperCase();\r\n\r\n      if (key in this.theme) {\r\n        return this.theme[key];\r\n      }\r\n    }\r\n\r\n    return this.theme['C'];\r\n  }\r\n\r\n  /**\r\n   * Sets the theme to the specified string if it exists. If it does not, this\r\n   * does nothing.\r\n   *\r\n   * @param {String} theme the name of the theme to switch to\r\n   */\r\n  setTheme(theme) {\r\n    if (this.colors.hasOwnProperty(theme)) {\r\n      this.theme = this.colors[theme];\r\n    }\r\n\r\n    // TODO: this probably should notify those who are watching this theme\r\n    // manager that the theme has changed so that colors can be changed\r\n    // on the fly\r\n  }\r\n}\r\n\r\nmodule.exports = ThemeManager;"]},"metadata":{},"sourceType":"script"}