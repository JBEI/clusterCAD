{"ast":null,"code":"var _classCallCheck = require(\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n//@ts-check\n\n/** \r\n * A static class containing helper functions for array-related tasks. \r\n */\nvar ArrayHelper = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function ArrayHelper() {\n    _classCallCheck(this, ArrayHelper);\n  }\n\n  _createClass(ArrayHelper, null, [{\n    key: \"clone\",\n    value:\n    /**\r\n     * Clone an array or an object. If an object is passed, a shallow clone will be created.\r\n     *\r\n     * @static\r\n     * @param {*} arr The array or object to be cloned.\r\n     * @returns {*} A clone of the array or object.\r\n     */\n    function clone(arr) {\n      var out = Array.isArray(arr) ? Array() : {};\n\n      for (var key in arr) {\n        var value = arr[key];\n\n        if (typeof value.clone === 'function') {\n          out[key] = value.clone();\n        } else {\n          out[key] = typeof value === 'object' ? ArrayHelper.clone(value) : value;\n        }\n      }\n\n      return out;\n    }\n    /**\r\n     * Returns a boolean indicating whether or not the two arrays contain the same elements.\r\n     * Only supports 1d, non-nested arrays.\r\n     *\r\n     * @static\r\n     * @param {Array} arrA An array.\r\n     * @param {Array} arrB An array.\r\n     * @returns {Boolean} A boolean indicating whether or not the two arrays contain the same elements.\r\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(arrA, arrB) {\n      if (arrA.length !== arrB.length) {\n        return false;\n      }\n\n      var tmpA = arrA.slice().sort();\n      var tmpB = arrB.slice().sort();\n\n      for (var i = 0; i < tmpA.length; i++) {\n        if (tmpA[i] !== tmpB[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    /**\r\n     * Returns a string representation of an array. If the array contains objects with an id property, the id property is printed for each of the elements.\r\n     *\r\n     * @static\r\n     * @param {Object[]} arr An array.\r\n     * @param {*} arr[].id If the array contains an object with the property 'id', the properties value is printed. Else, the array elements value is printend.\r\n     * @returns {String} A string representation of the array.\r\n     */\n\n  }, {\n    key: \"print\",\n    value: function print(arr) {\n      if (arr.length == 0) {\n        return '';\n      }\n\n      var s = '(';\n\n      for (var i = 0; i < arr.length; i++) {\n        s += arr[i].id ? arr[i].id + ', ' : arr[i] + ', ';\n      }\n\n      s = s.substring(0, s.length - 2);\n      return s + ')';\n    }\n    /**\r\n     * Run a function for each element in the array. The element is supplied as an argument for the callback function\r\n     *\r\n     * @static\r\n     * @param {Array} arr An array.\r\n     * @param {Function} callback The callback function that is called for each element.\r\n     */\n\n  }, {\n    key: \"each\",\n    value: function each(arr, callback) {\n      for (var i = 0; i < arr.length; i++) {\n        callback(arr[i]);\n      }\n    }\n    /**\r\n     * Return the array element from an array containing objects, where a property of the object is set to a given value.\r\n     *\r\n     * @static\r\n     * @param {Array} arr An array.\r\n     * @param {(String|Number)} property A property contained within an object in the array.\r\n     * @param {(String|Number)} value The value of the property.\r\n     * @returns {*} The array element matching the value.\r\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(arr, property, value) {\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i][property] == value) {\n          return arr[i];\n        }\n      }\n    }\n    /**\r\n     * Checks whether or not an array contains a given value. the options object passed as a second argument can contain three properties. value: The value to be searched for. property: The property that is to be searched for a given value. func: A function that is used as a callback to return either true or false in order to do a custom comparison.\r\n     *\r\n     * @static\r\n     * @param {Array} arr An array.\r\n     * @param {Object} options See method description.\r\n     * @param {*} options.value The value for which to check.\r\n     * @param {String} [options.property=undefined] The property on which to check.\r\n     * @param {Function} [options.func=undefined] A custom property function.\r\n     * @returns {Boolean} A boolean whether or not the array contains a value.\r\n     */\n\n  }, {\n    key: \"contains\",\n    value: function contains(arr, options) {\n      if (!options.property && !options.func) {\n        for (var i = 0; i < arr.length; i++) {\n          if (arr[i] == options.value) {\n            return true;\n          }\n        }\n      } else if (options.func) {\n        for (var _i = 0; _i < arr.length; _i++) {\n          if (options.func(arr[_i])) {\n            return true;\n          }\n        }\n      } else {\n        for (var _i2 = 0; _i2 < arr.length; _i2++) {\n          if (arr[_i2][options.property] == options.value) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n    /**\r\n     * Returns an array containing the intersection between two arrays. That is, values that are common to both arrays.\r\n     *\r\n     * @static\r\n     * @param {Array} arrA An array.\r\n     * @param {Array} arrB An array.\r\n     * @returns {Array} The intersecting vlaues.\r\n     */\n\n  }, {\n    key: \"intersection\",\n    value: function intersection(arrA, arrB) {\n      var intersection = new Array();\n\n      for (var i = 0; i < arrA.length; i++) {\n        for (var j = 0; j < arrB.length; j++) {\n          if (arrA[i] === arrB[j]) {\n            intersection.push(arrA[i]);\n          }\n        }\n      }\n\n      return intersection;\n    }\n    /**\r\n     * Returns an array of unique elements contained in an array.\r\n     *\r\n     * @static\r\n     * @param {Array} arr An array.\r\n     * @returns {Array} An array of unique elements contained within the array supplied as an argument.\r\n     */\n\n  }, {\n    key: \"unique\",\n    value: function unique(arr) {\n      var contains = {};\n      return arr.filter(function (i) {\n        // using !== instead of hasOwnProperty (http://andrew.hedges.name/experiments/in/)\n        return contains[i] !== undefined ? false : contains[i] = true;\n      });\n    }\n    /**\r\n     * Count the number of occurences of a value in an array.\r\n     *\r\n     * @static\r\n     * @param {Array} arr An array.\r\n     * @param {*} value A value to be counted.\r\n     * @returns {Number} The number of occurences of a value in the array.\r\n     */\n\n  }, {\n    key: \"count\",\n    value: function count(arr, value) {\n      var count = 0;\n\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] === value) {\n          count++;\n        }\n      }\n\n      return count;\n    }\n    /**\r\n     * Toggles the value of an array. If a value is not contained in an array, the array returned will contain all the values of the original array including the value. If a value is contained in an array, the array returned will contain all the values of the original array excluding the value.\r\n     *\r\n     * @static\r\n     * @param {Array} arr An array.\r\n     * @param {*} value A value to be toggled.\r\n     * @returns {Array} The toggled array.\r\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle(arr, value) {\n      var newArr = Array();\n      var removed = false;\n\n      for (var i = 0; i < arr.length; i++) {\n        // Do not copy value if it exists\n        if (arr[i] !== value) {\n          newArr.push(arr[i]);\n        } else {\n          // The element was not copied to the new array, which\n          // means it was removed\n          removed = true;\n        }\n      } // If the element was not removed, then it was not in the array\n      // so add it\n\n\n      if (!removed) {\n        newArr.push(value);\n      }\n\n      return newArr;\n    }\n    /**\r\n     * Remove a value from an array.\r\n     *\r\n     * @static\r\n     * @param {Array} arr An array.\r\n     * @param {*} value A value to be removed.\r\n     * @returns {Array} A new array with the element with a given value removed.\r\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(arr, value) {\n      var tmp = Array();\n\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] !== value) {\n          tmp.push(arr[i]);\n        }\n      }\n\n      return tmp;\n    }\n    /**\r\n     * Remove a value from an array with unique values.\r\n     *\r\n     * @static\r\n     * @param {Array} arr An array.\r\n     * @param {*} value A value to be removed.\r\n     * @returns {Array} An array with the element with a given value removed.\r\n     */\n\n  }, {\n    key: \"removeUnique\",\n    value: function removeUnique(arr, value) {\n      var index = arr.indexOf(value);\n\n      if (index > -1) {\n        arr.splice(index, 1);\n      }\n\n      return arr;\n    }\n    /**\r\n     * Remove all elements contained in one array from another array.\r\n     *\r\n     * @static\r\n     * @param {Array} arrA The array to be filtered.\r\n     * @param {Array} arrB The array containing elements that will be removed from the other array.\r\n     * @returns {Array} The filtered array.\r\n     */\n\n  }, {\n    key: \"removeAll\",\n    value: function removeAll(arrA, arrB) {\n      return arrA.filter(function (item) {\n        return arrB.indexOf(item) === -1;\n      });\n    }\n    /**\r\n     * Merges two arrays and returns the result. The first array will be appended to the second array.\r\n     *\r\n     * @static\r\n     * @param {Array} arrA An array.\r\n     * @param {Array} arrB An array.\r\n     * @returns {Array} The merged array.\r\n     */\n\n  }, {\n    key: \"merge\",\n    value: function merge(arrA, arrB) {\n      var arr = new Array(arrA.length + arrB.length);\n\n      for (var i = 0; i < arrA.length; i++) {\n        arr[i] = arrA[i];\n      }\n\n      for (var _i3 = 0; _i3 < arrB.length; _i3++) {\n        arr[arrA.length + _i3] = arrB[_i3];\n      }\n\n      return arr;\n    }\n    /**\r\n     * Checks whether or not an array contains all the elements of another array, without regard to the order.\r\n     *\r\n     * @static\r\n     * @param {Array} arrA An array.\r\n     * @param {Array} arrB An array.\r\n     * @returns {Boolean} A boolean indicating whether or not both array contain the same elements.\r\n     */\n\n  }, {\n    key: \"containsAll\",\n    value: function containsAll(arrA, arrB) {\n      var containing = 0;\n\n      for (var i = 0; i < arrA.length; i++) {\n        for (var j = 0; j < arrB.length; j++) {\n          if (arrA[i] === arrB[j]) {\n            containing++;\n          }\n        }\n      }\n\n      return containing === arrB.length;\n    }\n    /**\r\n     * Sort an array of atomic number information. Where the number is indicated as x, x.y, x.y.z, ...\r\n     *\r\n     * @param {Object[]} arr An array of vertex ids with their associated atomic numbers.\r\n     * @param {Number} arr[].vertexId A vertex id.\r\n     * @param {String} arr[].atomicNumber The atomic number associated with the vertex id.\r\n     * @returns {Object[]} The array sorted by atomic number. Example of an array entry: { atomicNumber: 2, vertexId: 5 }.\r\n     */\n\n  }, {\n    key: \"sortByAtomicNumberDesc\",\n    value: function sortByAtomicNumberDesc(arr) {\n      var map = arr.map(function (e, i) {\n        return {\n          index: i,\n          value: e.atomicNumber.split('.').map(Number)\n        };\n      });\n      map.sort(function (a, b) {\n        var min = Math.min(b.value.length, a.value.length);\n        var i = 0;\n\n        while (i < min && b.value[i] === a.value[i]) {\n          i++;\n        }\n\n        return i === min ? b.value.length - a.value.length : b.value[i] - a.value[i];\n      });\n      return map.map(function (e) {\n        return arr[e.index];\n      });\n    }\n    /**\r\n     * Copies a an n-dimensional array.\r\n     * \r\n     * @param {Array} arr The array to be copied.\r\n     * @returns {Array} The copy.\r\n     */\n\n  }, {\n    key: \"deepCopy\",\n    value: function deepCopy(arr) {\n      var newArr = Array();\n\n      for (var i = 0; i < arr.length; i++) {\n        var item = arr[i];\n\n        if (item instanceof Array) {\n          newArr[i] = ArrayHelper.deepCopy(item);\n        } else {\n          newArr[i] = item;\n        }\n      }\n\n      return newArr;\n    }\n  }]);\n\n  return ArrayHelper;\n}();\n\nmodule.exports = ArrayHelper;","map":{"version":3,"sources":["/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/smiles-drawer/src/ArrayHelper.js"],"names":["ArrayHelper","arr","out","Array","isArray","key","value","clone","arrA","arrB","length","tmpA","slice","sort","tmpB","i","s","id","substring","callback","property","options","func","intersection","j","push","contains","filter","undefined","count","newArr","removed","tmp","index","indexOf","splice","item","containing","map","e","atomicNumber","split","Number","a","b","min","Math","deepCopy","module","exports"],"mappings":"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","sourcesContent":["//@ts-check\r\n\r\n/** \r\n * A static class containing helper functions for array-related tasks. \r\n */\r\nclass ArrayHelper {\r\n    /**\r\n     * Clone an array or an object. If an object is passed, a shallow clone will be created.\r\n     *\r\n     * @static\r\n     * @param {*} arr The array or object to be cloned.\r\n     * @returns {*} A clone of the array or object.\r\n     */\r\n    static clone(arr) {\r\n        let out = Array.isArray(arr) ? Array() : {};\r\n        \r\n        for (let key in arr) {\r\n            let value = arr[key];\r\n            \r\n            if (typeof value.clone === 'function') {\r\n                out[key] = value.clone();\r\n            }\r\n            else {\r\n                out[key] = (typeof value === 'object') ? ArrayHelper.clone(value) : value;\r\n            }\r\n        }\r\n        \r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Returns a boolean indicating whether or not the two arrays contain the same elements.\r\n     * Only supports 1d, non-nested arrays.\r\n     *\r\n     * @static\r\n     * @param {Array} arrA An array.\r\n     * @param {Array} arrB An array.\r\n     * @returns {Boolean} A boolean indicating whether or not the two arrays contain the same elements.\r\n     */\r\n    static equals(arrA, arrB) {\r\n        if (arrA.length !== arrB.length) {\r\n            return false;\r\n        }\r\n\r\n        let tmpA = arrA.slice().sort();\r\n        let tmpB = arrB.slice().sort();\r\n\r\n        for (var i = 0; i < tmpA.length; i++) {\r\n            if (tmpA[i] !== tmpB[i]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of an array. If the array contains objects with an id property, the id property is printed for each of the elements.\r\n     *\r\n     * @static\r\n     * @param {Object[]} arr An array.\r\n     * @param {*} arr[].id If the array contains an object with the property 'id', the properties value is printed. Else, the array elements value is printend.\r\n     * @returns {String} A string representation of the array.\r\n     */\r\n    static print(arr) {\r\n        if (arr.length == 0) {\r\n            return '';\r\n        }\r\n\r\n        let s = '(';\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            s += arr[i].id ? arr[i].id + ', ' : arr[i] + ', ';\r\n        }\r\n\r\n        s = s.substring(0, s.length - 2);\r\n\r\n        return s + ')';\r\n    }\r\n\r\n    /**\r\n     * Run a function for each element in the array. The element is supplied as an argument for the callback function\r\n     *\r\n     * @static\r\n     * @param {Array} arr An array.\r\n     * @param {Function} callback The callback function that is called for each element.\r\n     */\r\n    static each(arr, callback) {\r\n        for (let i = 0; i < arr.length; i++) {\r\n            callback(arr[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the array element from an array containing objects, where a property of the object is set to a given value.\r\n     *\r\n     * @static\r\n     * @param {Array} arr An array.\r\n     * @param {(String|Number)} property A property contained within an object in the array.\r\n     * @param {(String|Number)} value The value of the property.\r\n     * @returns {*} The array element matching the value.\r\n     */\r\n    static get(arr, property, value) {\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (arr[i][property] == value) {\r\n                return arr[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether or not an array contains a given value. the options object passed as a second argument can contain three properties. value: The value to be searched for. property: The property that is to be searched for a given value. func: A function that is used as a callback to return either true or false in order to do a custom comparison.\r\n     *\r\n     * @static\r\n     * @param {Array} arr An array.\r\n     * @param {Object} options See method description.\r\n     * @param {*} options.value The value for which to check.\r\n     * @param {String} [options.property=undefined] The property on which to check.\r\n     * @param {Function} [options.func=undefined] A custom property function.\r\n     * @returns {Boolean} A boolean whether or not the array contains a value.\r\n     */\r\n    static contains(arr, options) {\r\n        if (!options.property && !options.func) {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                if (arr[i] == options.value) {\r\n                    return true;\r\n                }\r\n            }\r\n        } else if (options.func) {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                if (options.func(arr[i])) {\r\n                    return true;\r\n                }\r\n            }\r\n        } else {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                if (arr[i][options.property] == options.value) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns an array containing the intersection between two arrays. That is, values that are common to both arrays.\r\n     *\r\n     * @static\r\n     * @param {Array} arrA An array.\r\n     * @param {Array} arrB An array.\r\n     * @returns {Array} The intersecting vlaues.\r\n     */\r\n    static intersection(arrA, arrB) {\r\n        let intersection = new Array();\r\n        \r\n        for (let i = 0; i < arrA.length; i++) {\r\n            for (let j = 0; j < arrB.length; j++) {\r\n                if (arrA[i] === arrB[j]) {\r\n                    intersection.push(arrA[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return intersection;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of unique elements contained in an array.\r\n     *\r\n     * @static\r\n     * @param {Array} arr An array.\r\n     * @returns {Array} An array of unique elements contained within the array supplied as an argument.\r\n     */\r\n    static unique(arr) {\r\n        let contains = {};\r\n        return arr.filter(function (i) {\r\n            // using !== instead of hasOwnProperty (http://andrew.hedges.name/experiments/in/)\r\n            return contains[i] !== undefined ? false : (contains[i] = true);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Count the number of occurences of a value in an array.\r\n     *\r\n     * @static\r\n     * @param {Array} arr An array.\r\n     * @param {*} value A value to be counted.\r\n     * @returns {Number} The number of occurences of a value in the array.\r\n     */\r\n    static count(arr, value) {\r\n        let count = 0;\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (arr[i] === value) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * Toggles the value of an array. If a value is not contained in an array, the array returned will contain all the values of the original array including the value. If a value is contained in an array, the array returned will contain all the values of the original array excluding the value.\r\n     *\r\n     * @static\r\n     * @param {Array} arr An array.\r\n     * @param {*} value A value to be toggled.\r\n     * @returns {Array} The toggled array.\r\n     */\r\n    static toggle(arr, value) {\r\n        let newArr = Array();\r\n\r\n        let removed = false;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            // Do not copy value if it exists\r\n            if (arr[i] !== value) {\r\n                newArr.push(arr[i]);\r\n            } else {\r\n                // The element was not copied to the new array, which\r\n                // means it was removed\r\n                removed = true;\r\n            }\r\n        }\r\n\r\n        // If the element was not removed, then it was not in the array\r\n        // so add it\r\n        if (!removed) {\r\n            newArr.push(value);\r\n        }\r\n\r\n        return newArr;\r\n    }\r\n\r\n    /**\r\n     * Remove a value from an array.\r\n     *\r\n     * @static\r\n     * @param {Array} arr An array.\r\n     * @param {*} value A value to be removed.\r\n     * @returns {Array} A new array with the element with a given value removed.\r\n     */\r\n    static remove(arr, value) {\r\n        let tmp = Array();\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (arr[i] !== value) {\r\n                tmp.push(arr[i]);\r\n            }\r\n        }\r\n\r\n        return tmp;\r\n    }\r\n\r\n    /**\r\n     * Remove a value from an array with unique values.\r\n     *\r\n     * @static\r\n     * @param {Array} arr An array.\r\n     * @param {*} value A value to be removed.\r\n     * @returns {Array} An array with the element with a given value removed.\r\n     */\r\n    static removeUnique(arr, value) {\r\n        let index = arr.indexOf(value);\r\n\r\n        if (index > -1) {\r\n            arr.splice(index, 1);\r\n        }\r\n\r\n        return arr;\r\n    }\r\n\r\n    /**\r\n     * Remove all elements contained in one array from another array.\r\n     *\r\n     * @static\r\n     * @param {Array} arrA The array to be filtered.\r\n     * @param {Array} arrB The array containing elements that will be removed from the other array.\r\n     * @returns {Array} The filtered array.\r\n     */\r\n    static removeAll(arrA, arrB) {\r\n        return arrA.filter(function (item) {\r\n            return arrB.indexOf(item) === -1;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Merges two arrays and returns the result. The first array will be appended to the second array.\r\n     *\r\n     * @static\r\n     * @param {Array} arrA An array.\r\n     * @param {Array} arrB An array.\r\n     * @returns {Array} The merged array.\r\n     */\r\n    static merge(arrA, arrB) {\r\n        let arr = new Array(arrA.length + arrB.length);\r\n\r\n        for (let i = 0; i < arrA.length; i++) {\r\n            arr[i] = arrA[i];\r\n        }\r\n\r\n        for (let i = 0; i < arrB.length; i++) {\r\n            arr[arrA.length + i] = arrB[i];\r\n        }\r\n\r\n        return arr;\r\n    }\r\n\r\n    /**\r\n     * Checks whether or not an array contains all the elements of another array, without regard to the order.\r\n     *\r\n     * @static\r\n     * @param {Array} arrA An array.\r\n     * @param {Array} arrB An array.\r\n     * @returns {Boolean} A boolean indicating whether or not both array contain the same elements.\r\n     */\r\n    static containsAll(arrA, arrB) {\r\n        let containing = 0;\r\n        for (let i = 0; i < arrA.length; i++) {\r\n            for (let j = 0; j < arrB.length; j++) {\r\n                if (arrA[i] === arrB[j]) {\r\n                    containing++;\r\n                }\r\n            }\r\n        }\r\n\r\n        return containing === arrB.length;\r\n    }\r\n    \r\n    /**\r\n     * Sort an array of atomic number information. Where the number is indicated as x, x.y, x.y.z, ...\r\n     *\r\n     * @param {Object[]} arr An array of vertex ids with their associated atomic numbers.\r\n     * @param {Number} arr[].vertexId A vertex id.\r\n     * @param {String} arr[].atomicNumber The atomic number associated with the vertex id.\r\n     * @returns {Object[]} The array sorted by atomic number. Example of an array entry: { atomicNumber: 2, vertexId: 5 }.\r\n     */\r\n    static sortByAtomicNumberDesc(arr) {\r\n        let map = arr.map(function(e, i) {\r\n            return { index: i, value: e.atomicNumber.split('.').map(Number) };\r\n        });\r\n\r\n        map.sort(function(a, b) {\r\n            let min = Math.min(b.value.length, a.value.length);\r\n            let i = 0;\r\n            \r\n            while(i < min && b.value[i] === a.value[i]) {\r\n                i++;\r\n            }\r\n\r\n            return i === min ? b.value.length - a.value.length : b.value[i] - a.value[i];\r\n        });\r\n\r\n        return map.map(function(e) {\r\n            return arr[e.index];\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Copies a an n-dimensional array.\r\n     * \r\n     * @param {Array} arr The array to be copied.\r\n     * @returns {Array} The copy.\r\n     */\r\n    static deepCopy(arr) {\r\n        let newArr = Array();\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            let item = arr[i];\r\n\r\n            if (item instanceof Array) {\r\n                newArr[i] = ArrayHelper.deepCopy(item);\r\n            } else {\r\n                newArr[i] = item;\r\n            }\r\n        }\r\n\r\n        return newArr;\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = ArrayHelper;"]},"metadata":{},"sourceType":"script"}