{"ast":null,"code":"var _classCallCheck = require(\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n//@ts-check\nvar ArrayHelper = require('./ArrayHelper');\n\nvar Vector2 = require('./Vector2');\n\nvar Vertex = require('./Vertex');\n\nvar RingConnection = require('./RingConnection');\n/** \r\n * A class representing a ring.\r\n * \r\n * @property {Number} id The id of this ring.\r\n * @property {Number[]} members An array containing the vertex ids of the ring members.\r\n * @property {Number[]} edges An array containing the edge ids of the edges between the ring members.\r\n * @property {Number[]} insiders An array containing the vertex ids of the vertices contained within the ring if it is a bridged ring.\r\n * @property {Number[]} neighbours An array containing the ids of neighbouring rings.\r\n * @property {Boolean} positioned A boolean indicating whether or not this ring has been positioned.\r\n * @property {Vector2} center The center of this ring.\r\n * @property {Ring[]} rings The rings contained within this ring if this ring is bridged.\r\n * @property {Boolean} isBridged A boolean whether or not this ring is bridged.\r\n * @property {Boolean} isPartOfBridged A boolean whether or not this ring is part of a bridge ring.\r\n * @property {Boolean} isSpiro A boolean whether or not this ring is part of a spiro.\r\n * @property {Boolean} isFused A boolean whether or not this ring is part of a fused ring.\r\n * @property {Number} centralAngle The central angle of this ring.\r\n * @property {Boolean} canFlip A boolean indicating whether or not this ring allows flipping of attached vertices to the inside of the ring.\r\n */\n\n\nvar Ring = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\r\n   * The constructor for the class Ring.\r\n   *\r\n   * @param {Number[]} members An array containing the vertex ids of the members of the ring to be created.\r\n   */\n  function Ring(members) {\n    _classCallCheck(this, Ring);\n\n    this.id = null;\n    this.members = members;\n    this.edges = [];\n    this.insiders = [];\n    this.neighbours = [];\n    this.positioned = false;\n    this.center = new Vector2(0, 0);\n    this.rings = [];\n    this.isBridged = false;\n    this.isPartOfBridged = false;\n    this.isSpiro = false;\n    this.isFused = false;\n    this.centralAngle = 0.0;\n    this.canFlip = true;\n  }\n  /**\r\n   * Clones this ring and returns the clone.\r\n   *\r\n   * @returns {Ring} A clone of this ring.\r\n   */\n\n\n  _createClass(Ring, [{\n    key: \"clone\",\n    value: function clone() {\n      var clone = new Ring(this.members);\n      clone.id = this.id;\n      clone.insiders = ArrayHelper.clone(this.insiders);\n      clone.neighbours = ArrayHelper.clone(this.neighbours);\n      clone.positioned = this.positioned;\n      clone.center = this.center.clone();\n      clone.rings = ArrayHelper.clone(this.rings);\n      clone.isBridged = this.isBridged;\n      clone.isPartOfBridged = this.isPartOfBridged;\n      clone.isSpiro = this.isSpiro;\n      clone.isFused = this.isFused;\n      clone.centralAngle = this.centralAngle;\n      clone.canFlip = this.canFlip;\n      return clone;\n    }\n    /**\r\n     * Returns the size (number of members) of this ring.\r\n     *\r\n     * @returns {Number} The size (number of members) of this ring.\r\n     */\n\n  }, {\n    key: \"getSize\",\n    value: function getSize() {\n      return this.members.length;\n    }\n    /**\r\n     * Gets the polygon representation (an array of the ring-members positional vectors) of this ring.\r\n     *\r\n     * @param {Vertex[]} vertices An array of vertices representing the current molecule.\r\n     * @returns {Vector2[]} An array of the positional vectors of the ring members.\r\n     */\n\n  }, {\n    key: \"getPolygon\",\n    value: function getPolygon(vertices) {\n      var polygon = [];\n\n      for (var i = 0; i < this.members.length; i++) {\n        polygon.push(vertices[this.members[i]].position);\n      }\n\n      return polygon;\n    }\n    /**\r\n     * Returns the angle of this ring in relation to the coordinate system.\r\n     *\r\n     * @returns {Number} The angle in radians.\r\n     */\n\n  }, {\n    key: \"getAngle\",\n    value: function getAngle() {\n      return Math.PI - this.centralAngle;\n    }\n    /**\r\n     * Loops over the members of this ring from a given start position in a direction opposite to the vertex id passed as the previousId.\r\n     *\r\n     * @param {Vertex[]} vertices The vertices associated with the current molecule.\r\n     * @param {Function} callback A callback with the current vertex id as a parameter.\r\n     * @param {Number} startVertexId The vertex id of the start vertex.\r\n     * @param {Number} previousVertexId The vertex id of the previous vertex (the loop calling the callback function will run in the opposite direction of this vertex).\r\n     */\n\n  }, {\n    key: \"eachMember\",\n    value: function eachMember(vertices, callback, startVertexId, previousVertexId) {\n      startVertexId = startVertexId || startVertexId === 0 ? startVertexId : this.members[0];\n      var current = startVertexId;\n      var max = 0;\n\n      while (current != null && max < 100) {\n        var prev = current;\n        callback(prev);\n        current = vertices[current].getNextInRing(vertices, this.id, previousVertexId);\n        previousVertexId = prev; // Stop while loop when arriving back at the start vertex\n\n        if (current == startVertexId) {\n          current = null;\n        }\n\n        max++;\n      }\n    }\n    /**\r\n     * Returns an array containing the neighbouring rings of this ring ordered by ring size.\r\n     *\r\n     * @param {RingConnection[]} ringConnections An array of ring connections associated with the current molecule.\r\n     * @returns {Object[]} An array of neighbouring rings sorted by ring size. Example: { n: 5, neighbour: 1 }.\r\n     */\n\n  }, {\n    key: \"getOrderedNeighbours\",\n    value: function getOrderedNeighbours(ringConnections) {\n      var orderedNeighbours = Array(this.neighbours.length);\n\n      for (var i = 0; i < this.neighbours.length; i++) {\n        var vertices = RingConnection.getVertices(ringConnections, this.id, this.neighbours[i]);\n        orderedNeighbours[i] = {\n          n: vertices.length,\n          neighbour: this.neighbours[i]\n        };\n      }\n\n      orderedNeighbours.sort(function (a, b) {\n        // Sort highest to lowest\n        return b.n - a.n;\n      });\n      return orderedNeighbours;\n    }\n    /**\r\n     * Check whether this ring is an implicitly defined benzene-like (e.g. C1=CC=CC=C1) with 6 members and 3 double bonds.\r\n     *\r\n     * @param {Vertex[]} vertices An array of vertices associated with the current molecule.\r\n     * @returns {Boolean} A boolean indicating whether or not this ring is an implicitly defined benzene-like.\r\n     */\n\n  }, {\n    key: \"isBenzeneLike\",\n    value: function isBenzeneLike(vertices) {\n      var db = this.getDoubleBondCount(vertices);\n      var length = this.members.length;\n      return db === 3 && length === 6 || db === 2 && length === 5;\n    }\n    /**\r\n     * Get the number of double bonds inside this ring.\r\n     *\r\n     * @param {Vertex[]} vertices An array of vertices associated with the current molecule.\r\n     * @returns {Number} The number of double bonds inside this ring.\r\n     */\n\n  }, {\n    key: \"getDoubleBondCount\",\n    value: function getDoubleBondCount(vertices) {\n      var doubleBondCount = 0;\n\n      for (var i = 0; i < this.members.length; i++) {\n        var atom = vertices[this.members[i]].value;\n\n        if (atom.bondType === '=' || atom.branchBond === '=') {\n          doubleBondCount++;\n        }\n      }\n\n      return doubleBondCount;\n    }\n    /**\r\n     * Checks whether or not this ring contains a member with a given vertex id.\r\n     *\r\n     * @param {Number} vertexId A vertex id.\r\n     * @returns {Boolean} A boolean indicating whether or not this ring contains a member with the given vertex id.\r\n     */\n\n  }, {\n    key: \"contains\",\n    value: function contains(vertexId) {\n      for (var i = 0; i < this.members.length; i++) {\n        if (this.members[i] == vertexId) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }]);\n\n  return Ring;\n}();\n\nmodule.exports = Ring;","map":{"version":3,"sources":["/Users/sarahlafrance/LBNL/clusterCAD/retrotideUI/node_modules/smiles-drawer/src/Ring.js"],"names":["ArrayHelper","require","Vector2","Vertex","RingConnection","Ring","members","id","edges","insiders","neighbours","positioned","center","rings","isBridged","isPartOfBridged","isSpiro","isFused","centralAngle","canFlip","clone","length","vertices","polygon","i","push","position","Math","PI","callback","startVertexId","previousVertexId","current","max","prev","getNextInRing","ringConnections","orderedNeighbours","Array","getVertices","n","neighbour","sort","a","b","db","getDoubleBondCount","doubleBondCount","atom","value","bondType","branchBond","vertexId","module","exports"],"mappings":"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","sourcesContent":["//@ts-check\r\nconst ArrayHelper = require('./ArrayHelper')\r\nconst Vector2 = require('./Vector2')\r\nconst Vertex = require('./Vertex')\r\nconst RingConnection = require('./RingConnection')\r\n\r\n/** \r\n * A class representing a ring.\r\n * \r\n * @property {Number} id The id of this ring.\r\n * @property {Number[]} members An array containing the vertex ids of the ring members.\r\n * @property {Number[]} edges An array containing the edge ids of the edges between the ring members.\r\n * @property {Number[]} insiders An array containing the vertex ids of the vertices contained within the ring if it is a bridged ring.\r\n * @property {Number[]} neighbours An array containing the ids of neighbouring rings.\r\n * @property {Boolean} positioned A boolean indicating whether or not this ring has been positioned.\r\n * @property {Vector2} center The center of this ring.\r\n * @property {Ring[]} rings The rings contained within this ring if this ring is bridged.\r\n * @property {Boolean} isBridged A boolean whether or not this ring is bridged.\r\n * @property {Boolean} isPartOfBridged A boolean whether or not this ring is part of a bridge ring.\r\n * @property {Boolean} isSpiro A boolean whether or not this ring is part of a spiro.\r\n * @property {Boolean} isFused A boolean whether or not this ring is part of a fused ring.\r\n * @property {Number} centralAngle The central angle of this ring.\r\n * @property {Boolean} canFlip A boolean indicating whether or not this ring allows flipping of attached vertices to the inside of the ring.\r\n */\r\nclass Ring {\r\n    /**\r\n     * The constructor for the class Ring.\r\n     *\r\n     * @param {Number[]} members An array containing the vertex ids of the members of the ring to be created.\r\n     */\r\n    constructor(members) {\r\n        this.id = null;\r\n        this.members = members;\r\n        this.edges = [];\r\n        this.insiders = [];\r\n        this.neighbours = [];\r\n        this.positioned = false;\r\n        this.center = new Vector2(0, 0);\r\n        this.rings = [];\r\n        this.isBridged = false;\r\n        this.isPartOfBridged = false;\r\n        this.isSpiro = false;\r\n        this.isFused = false;\r\n        this.centralAngle = 0.0;\r\n        this.canFlip = true;\r\n    }\r\n    \r\n    /**\r\n     * Clones this ring and returns the clone.\r\n     *\r\n     * @returns {Ring} A clone of this ring.\r\n     */\r\n    clone() {\r\n        let clone = new Ring(this.members);\r\n\r\n        clone.id = this.id;\r\n        clone.insiders = ArrayHelper.clone(this.insiders);\r\n        clone.neighbours = ArrayHelper.clone(this.neighbours);\r\n        clone.positioned = this.positioned;\r\n        clone.center = this.center.clone();\r\n        clone.rings = ArrayHelper.clone(this.rings);\r\n        clone.isBridged = this.isBridged;\r\n        clone.isPartOfBridged = this.isPartOfBridged;\r\n        clone.isSpiro = this.isSpiro;\r\n        clone.isFused = this.isFused;\r\n        clone.centralAngle = this.centralAngle;\r\n        clone.canFlip = this.canFlip;\r\n\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Returns the size (number of members) of this ring.\r\n     *\r\n     * @returns {Number} The size (number of members) of this ring.\r\n     */\r\n    getSize() {\r\n        return this.members.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the polygon representation (an array of the ring-members positional vectors) of this ring.\r\n     *\r\n     * @param {Vertex[]} vertices An array of vertices representing the current molecule.\r\n     * @returns {Vector2[]} An array of the positional vectors of the ring members.\r\n     */\r\n    getPolygon(vertices) {\r\n        let polygon = [];\r\n\r\n        for (let i = 0; i < this.members.length; i++) {\r\n            polygon.push(vertices[this.members[i]].position);\r\n        }\r\n\r\n        return polygon;\r\n    }\r\n\r\n    /**\r\n     * Returns the angle of this ring in relation to the coordinate system.\r\n     *\r\n     * @returns {Number} The angle in radians.\r\n     */\r\n    getAngle() {\r\n        return Math.PI - this.centralAngle;\r\n    }\r\n\r\n    /**\r\n     * Loops over the members of this ring from a given start position in a direction opposite to the vertex id passed as the previousId.\r\n     *\r\n     * @param {Vertex[]} vertices The vertices associated with the current molecule.\r\n     * @param {Function} callback A callback with the current vertex id as a parameter.\r\n     * @param {Number} startVertexId The vertex id of the start vertex.\r\n     * @param {Number} previousVertexId The vertex id of the previous vertex (the loop calling the callback function will run in the opposite direction of this vertex).\r\n     */\r\n    eachMember(vertices, callback, startVertexId, previousVertexId) {\r\n        startVertexId = startVertexId || startVertexId === 0 ? startVertexId : this.members[0];\r\n        let current = startVertexId;\r\n        let max = 0;\r\n\r\n        while (current != null && max < 100) {\r\n            let prev = current;\r\n            \r\n            callback(prev);\r\n            current = vertices[current].getNextInRing(vertices, this.id, previousVertexId);\r\n            previousVertexId = prev;\r\n            \r\n            // Stop while loop when arriving back at the start vertex\r\n            if (current == startVertexId) {\r\n                current = null;\r\n            }\r\n\r\n            max++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns an array containing the neighbouring rings of this ring ordered by ring size.\r\n     *\r\n     * @param {RingConnection[]} ringConnections An array of ring connections associated with the current molecule.\r\n     * @returns {Object[]} An array of neighbouring rings sorted by ring size. Example: { n: 5, neighbour: 1 }.\r\n     */\r\n    getOrderedNeighbours(ringConnections) {\r\n        let orderedNeighbours = Array(this.neighbours.length);\r\n        \r\n        for (let i = 0; i < this.neighbours.length; i++) {\r\n            let vertices = RingConnection.getVertices(ringConnections, this.id, this.neighbours[i]);\r\n            \r\n            orderedNeighbours[i] = {\r\n                n: vertices.length,\r\n                neighbour: this.neighbours[i]\r\n            };\r\n        }\r\n\r\n        orderedNeighbours.sort(function (a, b) {\r\n            // Sort highest to lowest\r\n            return b.n - a.n;\r\n        });\r\n\r\n        return orderedNeighbours;\r\n    }\r\n\r\n    /**\r\n     * Check whether this ring is an implicitly defined benzene-like (e.g. C1=CC=CC=C1) with 6 members and 3 double bonds.\r\n     *\r\n     * @param {Vertex[]} vertices An array of vertices associated with the current molecule.\r\n     * @returns {Boolean} A boolean indicating whether or not this ring is an implicitly defined benzene-like.\r\n     */\r\n    isBenzeneLike(vertices) {\r\n        let db = this.getDoubleBondCount(vertices);\r\n        let length = this.members.length;\r\n\r\n        return db === 3 && length === 6 ||\r\n               db === 2 && length === 5 ;\r\n    }\r\n\r\n    /**\r\n     * Get the number of double bonds inside this ring.\r\n     *\r\n     * @param {Vertex[]} vertices An array of vertices associated with the current molecule.\r\n     * @returns {Number} The number of double bonds inside this ring.\r\n     */\r\n    getDoubleBondCount(vertices) {\r\n        let doubleBondCount = 0;\r\n\r\n        for (let i = 0; i < this.members.length; i++) {\r\n            let atom = vertices[this.members[i]].value;\r\n\r\n            if (atom.bondType === '=' || atom.branchBond === '=') {\r\n                doubleBondCount++;\r\n            }\r\n        }\r\n\r\n        return doubleBondCount;\r\n    }\r\n\r\n    /**\r\n     * Checks whether or not this ring contains a member with a given vertex id.\r\n     *\r\n     * @param {Number} vertexId A vertex id.\r\n     * @returns {Boolean} A boolean indicating whether or not this ring contains a member with the given vertex id.\r\n     */\r\n    contains(vertexId) {\r\n        for (let i = 0; i < this.members.length; i++) {\r\n            if (this.members[i] == vertexId) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\nmodule.exports = Ring;"]},"metadata":{},"sourceType":"script"}