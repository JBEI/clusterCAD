##########################
# Download MIBiG database #
###########################

There is no direct link to the 'latest' version of the MiBiG database. Navigate
to the below page and download the latest version manually.

http://mibig.secondarymetabolites.org/download.html

The following script takes as an argument the version of the MIBiG database
to use. It will download the database and generate antiSMASH annotations
as .embl files.

mibig_to_antismash.sh

After this script is run, we should have:
./data/
  mibig/ - MIBiG tar.gz files for JSON and GBK data
    raw/ - unzipped tar.gz files for JSON and GBK data
  antismash/
    raw/ - raw antiSMASH annotations
    split/ - split antiSMASH annotations for each cluster

######################################
# Aggregate known final product data #
######################################

ChemAxon structures expected in ./data/compounds/chemaxon.smi
Manual structures expected in ./data/compounds/manual.smi

Aggregated known structures will be written to ./data/compounds/all_known_products.p.
The pickled object is a dictionary where the keys are the MIBiG accession numbers and
the values are the SMILES corresponding to the known structure.

aggregate_final_structures.py

################################
# Populate ClusterCAD database #
################################

The script antismash_to_databse.py will populate the ClusterCAD database.
It depends on the functions in antismash_to_database_functions.py.

antismash_to_database_functions.py
antismash_to_database.py

#######################################
# Implement corrections to ClusterCAD #
#######################################

The folders ./data/corrections and ./data/corrections/modified will need to be created.

These need to be done manually. Write JSON templates to the folder ./data/corrections
using the script clustercad_templates.py. Then the template JSON files can be 
manually updated. The changes to the database should be implemented using the script
clustercad_corrections.py, which will update the database to reflect the contents of 
the JSON files.

###############################
# Clean up ClusterCAD entries #
###############################

Use script clustercad_clean.py to delete clusters that have less than
three modules or lack a computable product.

#########################################
# Compile Blast database for ClusterCAD #
########################################

It will be necessary to make the folder ./data/blast/.

Use script blast_database.py to generate Fasta file containing all known subunits.



Download executables
ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/

BLAST programs expect BLASTDB to be located in working directory

Build BLAST database from FASTA file
-Text in the definition line will be stored and displayed, but 
 cannot be used to get or filter the sequences by default. To
 enable this feature, the -parse_seqids flag must be used when
 invoking makeblastdb
-The following format is chsoen for the sequence ID: 
 gb|genbankAccession   # note that this refers to the subunit sequence ID
-Amino acid sequences for all subunits were written to the single 
 FASTA file , and a database generated as follows
 $ makeblastdb -in clustercad_subunits -parse_seqids -dbtype prot

Search database use blastp
Options can be adjusted as per https://www.ncbi.nlm.nih.gov/books/NBK279675/
blastp -db clustercad_subunits -query query-max_target_seqs 10 -max_hsps=3 -outfmt "10 sseqid qstart qend sstart ssend evalue"
